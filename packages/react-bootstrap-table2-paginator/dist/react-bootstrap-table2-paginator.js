/*! For license information please see react-bootstrap-table2-paginator.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.ReactBootstrapTable2Paginator=t(require("react")):e.ReactBootstrapTable2Paginator=t(e.React)}(self,(e=>(()=>{var t={184:(e,t)=>{var r;!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)){if(r.length){var a=o.apply(null,r);a&&e.push(a)}}else if("object"===i){if(r.toString!==Object.prototype.toString&&!r.toString.toString().includes("[native code]")){e.push(r.toString());continue}for(var u in r)n.call(r,u)&&r[u]&&e.push(u)}}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},187:e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,n){function o(r){e.removeListener(t,i),n(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),r([].slice.call(arguments))}P(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&P(e,"error",t,r)}(e,o,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var a=10;function u(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function s(e,t,r,n){var o,i,a,s;if(u(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),a=i[t]),void 0===a)a=i[t]=r,++e._eventsCount;else if("function"==typeof a?a=i[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(o=c(e))>0&&a.length>o&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,s=l,console&&console.warn&&console.warn(s)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},o=l.bind(n);return o.listener=r,n.wrapFn=o,o}function p(e,t,r){var n=e._events;if(void 0===n)return[];var o=n[t];return void 0===o?[]:"function"==typeof o?r?[o.listener||o]:[o]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(o):y(o,o.length)}function g(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function y(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function P(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){n.once&&e.removeEventListener(t,o),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return c(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var o="error"===e,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var u=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw u.context=a,u}var c=i[e];if(void 0===c)return!1;if("function"==typeof c)n(c,this,t);else{var s=c.length,l=y(c,s);for(r=0;r<s;++r)n(l[r],this,t)}return!0},i.prototype.addListener=function(e,t){return s(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return s(this,e,t,!0)},i.prototype.once=function(e,t){return u(t),this.on(e,f(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return u(t),this.prependListener(e,f(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,n,o,i,a;if(u(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(o=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){a=r[i].listener,o=i;break}if(o<0)return this;0===o?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,o),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var o,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(o=i[n])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},i.prototype.listeners=function(e){return p(this,e,!0)},i.prototype.rawListeners=function(e){return p(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):g.call(e,t)},i.prototype.listenerCount=g,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},703:(e,t,r)=>{"use strict";var n=r(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,i,a){if(a!==n){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var r={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return r.PropTypes=r,r}},697:(e,t,r)=>{e.exports=r(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},787:t=>{"use strict";t.exports=e}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{"use strict";n.r(o),n.d(o,{PaginationListStandalone:()=>bt,PaginationProvider:()=>wt,PaginationTotalStandalone:()=>ht,SizePerPageDropdownStandalone:()=>dt,default:()=>vt});var e=n(787),t=n.n(e),r=n(697),i=n.n(r),a=n(187),u=n.n(a);const c={PAGINATION_SIZE:5,PAGE_START_INDEX:1,With_FIRST_AND_LAST:!0,SHOW_ALL_PAGE_BTNS:!1,SHOW_TOTAL:!1,PAGINATION_TOTAL:null,FIRST_PAGE_TEXT:"<<",PRE_PAGE_TEXT:"<",NEXT_PAGE_TEXT:">",LAST_PAGE_TEXT:">>",NEXT_PAGE_TITLE:"next page",LAST_PAGE_TITLE:"last page",PRE_PAGE_TITLE:"previous page",FIRST_PAGE_TITLE:"first page",SIZE_PER_PAGE_LIST:[10,25,30,50],HIDE_SIZE_PER_PAGE:!1,HIDE_PAGE_LIST_ONLY_ONE_PAGE:!1};var s=function(e,t,r){return function(e,t){return e+Math.abs(1-t)}(e,r)*t-1},l=function(e,t,r,n,o){return t<e?r:r<o||e<=0?o:r>=Math.floor(e/n)+o&&1===o?Math.ceil(e/n):r>=Math.floor(e/n)&&0===o?Math.ceil(e/n)-Math.abs(c.PAGE_START_INDEX-o):r};function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function g(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){v(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function y(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,m(n.key),n)}}function P(e,t){return P=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},P(e,t)}function b(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=h(e);if(t){var o=h(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===f(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return d(e)}(this,r)}}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return h=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},h(e)}function v(e,t,r){return(t=m(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function m(e){var t=function(e,t){if("object"!==f(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==f(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===f(t)?t:String(t)}var O=t().createContext(),S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(a,e);var r,n,o,i=b(a);function a(e){var t,r,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),v(d(t=i.call(this,e)),"getPaginationProps",(function(){var e=t.props,r=e.pagination.options,n=e.bootstrap4,o=e.tableId,i=d(t),a=i.currPage,u=i.currSizePerPage,s=i.dataSize,l=void 0===r.withFirstAndLast?c.With_FIRST_AND_LAST:r.withFirstAndLast,f=void 0===r.alwaysShowAllBtns?c.SHOW_ALL_PAGE_BTNS:r.alwaysShowAllBtns,p=void 0===r.hideSizePerPage?c.HIDE_SIZE_PER_PAGE:r.hideSizePerPage,y=void 0===r.hidePageListOnlyOnePage?c.HIDE_PAGE_LIST_ONLY_ONE_PAGE:r.hidePageListOnlyOnePage,P=void 0===r.pageStartIndex?c.PAGE_START_INDEX:r.pageStartIndex;return g(g({},r),{},{bootstrap4:n,tableId:o,page:a,sizePerPage:u,pageStartIndex:P,hidePageListOnlyOnePage:y,hideSizePerPage:p,alwaysShowAllBtns:f,withFirstAndLast:l,dataSize:s,sizePerPageList:r.sizePerPageList||c.SIZE_PER_PAGE_LIST,paginationSize:r.paginationSize||c.PAGINATION_SIZE,showTotal:r.showTotal,pageListRenderer:r.pageListRenderer,pageButtonRenderer:r.pageButtonRenderer,sizePerPageRenderer:r.sizePerPageRenderer,paginationTotalRenderer:r.paginationTotalRenderer,sizePerPageOptionRenderer:r.sizePerPageOptionRenderer,firstPageText:r.firstPageText||c.FIRST_PAGE_TEXT,prePageText:r.prePageText||c.PRE_PAGE_TEXT,nextPageText:r.nextPageText||c.NEXT_PAGE_TEXT,lastPageText:r.lastPageText||c.LAST_PAGE_TEXT,prePageTitle:r.prePageTitle||c.PRE_PAGE_TITLE,nextPageTitle:r.nextPageTitle||c.NEXT_PAGE_TITLE,firstPageTitle:r.firstPageTitle||c.FIRST_PAGE_TITLE,lastPageTitle:r.lastPageTitle||c.LAST_PAGE_TITLE,onPageChange:t.handleChangePage,onSizePerPageChange:t.handleChangeSizePerPage})})),v(d(t),"setPaginationRemoteEmitter",(function(e){t.remoteEmitter=e})),v(d(t),"getPaginationRemoteEmitter",(function(){return t.remoteEmitter||t.props.remoteEmitter})),v(d(t),"isRemotePagination",(function(){var e={};return t.remoteEmitter.emit("isRemotePagination",e),e.result})),t.handleChangePage=t.handleChangePage.bind(d(t)),t.handleDataSizeChange=t.handleDataSizeChange.bind(d(t)),t.handleChangeSizePerPage=t.handleChangeSizePerPage.bind(d(t));var o=e.pagination.options,s=o.sizePerPageList||c.SIZE_PER_PAGE_LIST;return r=void 0!==o.page?o.page:void 0!==o.pageStartIndex?o.pageStartIndex:c.PAGE_START_INDEX,n=void 0!==o.sizePerPage?o.sizePerPage:"object"===f(s[0])?s[0].value:s[0],t.currPage=r,t.dataSize=o.totalSize,t.currSizePerPage=n,t.dataChangeListener=new(u()),t.dataChangeListener.on("filterChanged",t.handleDataSizeChange),t}return r=a,n=[{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=e.pagination.options.custom;(this.isRemotePagination()||t)&&(void 0!==e.pagination.options.page&&(this.currPage=e.pagination.options.page),void 0!==e.pagination.options.sizePerPage&&(this.currSizePerPage=e.pagination.options.sizePerPage),void 0!==e.pagination.options.totalSize&&(this.dataSize=e.pagination.options.totalSize))}},{key:"handleDataSizeChange",value:function(e){var t=this.props.pagination.options,r=void 0===t.pageStartIndex?c.PAGE_START_INDEX:t.pageStartIndex;this.currPage=l(e,this.dataSize,this.currPage,this.currSizePerPage,r),this.dataSize=e,this.forceUpdate()}},{key:"handleChangePage",value:function(e){var t=this.currSizePerPage,r=this.props.pagination.options;r.onPageChange&&r.onPageChange(e,t),this.currPage=e,this.isRemotePagination()?this.getPaginationRemoteEmitter().emit("paginationChange",e,t):this.forceUpdate()}},{key:"handleChangeSizePerPage",value:function(e,t){var r=this.props.pagination.options;r.onSizePerPageChange&&r.onSizePerPageChange(e,t),this.currPage=t,this.currSizePerPage=e,this.isRemotePagination()?this.getPaginationRemoteEmitter().emit("paginationChange",t,e):this.forceUpdate()}},{key:"render",value:function(){var e=this.getPaginationProps(),r=g(g({},this.props.pagination),{},{options:e});return t().createElement(O.Provider,{value:{paginationProps:e,paginationTableProps:{pagination:r,setPaginationRemoteEmitter:this.setPaginationRemoteEmitter,dataChangeListener:this.dataChangeListener}}},this.props.children)}}],n&&y(r.prototype,n),o&&y(r,o),Object.defineProperty(r,"prototype",{writable:!1}),a}(t().Component);const T=function(){return{Provider:S,Consumer:O.Consumer}};var w=n(184),E=n.n(w);function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function j(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==_(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==_(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===_(i)?i:String(i)),n)}var o,i}function R(e,t){return R=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},R(e,t)}function z(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=x(e);if(t){var o=x(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===_(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,r)}}function x(e){return x=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},x(e)}const C=function(e){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&R(e,t)}(i,e);var t,r,n,o=z(i);function i(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.apply(this,arguments)}return t=i,r=[{key:"backToPrevPage",value:function(){var e=this.props,t=e.currPage,r=e.pageStartIndex;return t-1<r?r:t-1}},{key:"initialState",value:function(){var e=this.calculateTotalPage();return{totalPages:e,lastPage:this.calculateLastPage(e)}}},{key:"calculateTotalPage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props.currSizePerPage,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.props.dataSize;return Math.ceil(t/e)}},{key:"calculateLastPage",value:function(e){return this.props.pageStartIndex+e-1}},{key:"calculateFromTo",value:function(){var e=this.props,t=e.dataSize,r=e.currPage,n=e.currSizePerPage,o=e.pageStartIndex,i=Math.abs(c.PAGE_START_INDEX-o),a=(r-o)*n;a=0===t?0:a+1;var u=Math.min(n*(r+i),t);return u>t&&(u=t),[a,u]}},{key:"calculatePages",value:function(e,t){var r=this.props,n=r.currPage,o=r.paginationSize,i=r.pageStartIndex,a=r.withFirstAndLast,u=r.firstPageText,c=r.prePageText,s=r.nextPageText,l=r.lastPageText,f=r.alwaysShowAllBtns,p=[],g=e;if(g<=0)return[];var y=Math.max(n-Math.floor(o/2),i);(g=y+o-1)>t&&(y=(g=t)-o+1),f&&(p=a?[u,c]:[c]),y!==i&&e>o&&a&&0===p.length?p=[u,c]:e>1&&0===p.length&&(p=[c]);for(var P=y;P<=g;P+=1)P>=i&&p.push(P);return(f||g<=t&&p.length>1)&&p.push(s),(g!==t&&a||a&&f)&&p.push(l),p}},{key:"calculatePageStatus",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=arguments.length>1?arguments[1]:void 0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=this.props,i=o.currPage,a=o.pageStartIndex,u=o.firstPageText,c=o.prePageText,s=o.nextPageText,l=o.lastPageText,f=o.alwaysShowAllBtns,p=function(e){return i===a&&(e===u||e===c)},g=function(e){return i===r&&(e===s||e===l)};return t.filter((function(e){return!!f||!(p(e)||g(e))})).map((function(t){var r,o=t===i,a=p(t)||g(t);r=t===s?e.props.nextPageTitle:t===c?e.props.prePageTitle:t===u?e.props.firstPageTitle:t===l?e.props.lastPageTitle:"".concat(t);var f={page:t,active:o,disabled:a};return n||(f.title=r),f}))}},{key:"calculateSizePerPageStatus",value:function(){return this.props.sizePerPageList.map((function(e){var t=void 0!==e.text?e.text:e,r=void 0!==e.value?e.value:e;return{text:"".concat(t),page:r}}))}}],r&&j(t.prototype,r),n&&j(t,n),Object.defineProperty(t,"prototype",{writable:!1}),i}(e)};function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function A(){return A=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},A.apply(this,arguments)}function I(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==L(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==L(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===L(i)?i:String(i)),n)}var o,i}function D(e,t){return D=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},D(e,t)}function N(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=G(e);if(t){var o=G(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===L(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return k(e)}(this,r)}}function k(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function G(e){return G=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},G(e)}const B=function(r){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&D(e,t)}(u,e);var n,o,i,a=N(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this,e)).handleChangePage=t.handleChangePage.bind(k(t)),t.handleChangeSizePerPage=t.handleChangeSizePerPage.bind(k(t)),t.state=t.initialState(),t}return n=u,(o=[{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=e.dataSize,r=e.currSizePerPage;if(r!==this.props.currSizePerPage||t!==this.props.dataSize){var n=this.calculateTotalPage(r,t),o=this.calculateLastPage(n);this.setState({totalPages:n,lastPage:o})}}},{key:"handleChangeSizePerPage",value:function(e){var t=this.props,r=t.currSizePerPage,n=t.onSizePerPageChange,o="string"==typeof e?parseInt(e,10):e,i=this.props.currPage;if(o!==r){var a=this.calculateTotalPage(o),u=this.calculateLastPage(a);i>u&&(i=u),n(o,i)}}},{key:"handleChangePage",value:function(e){var t,r=this.props,n=r.currPage,o=r.pageStartIndex,i=r.prePageText,a=r.nextPageText,u=r.lastPageText,c=r.firstPageText,s=r.onPageChange,l=this.state.lastPage;(t=e===i?this.backToPrevPage():e===a?n+1>l?l:n+1:e===u?l:e===c?o:parseInt(e,10))!==n&&s(t)}},{key:"render",value:function(){return t().createElement(r,A({},this.props,{lastPage:this.state.lastPage,totalPages:this.state.totalPages,onPageChange:this.handleChangePage,onSizePerPageChange:this.handleChangeSizePerPage}))}}])&&I(n.prototype,o),i&&I(n,i),Object.defineProperty(n,"prototype",{writable:!1}),u}(C(e.Component))};var q=function(e){var r=e.text,n=e.page,o=e.onSizePerPageChange;return e.bootstrap4?t().createElement("a",{href:"#",tabIndex:"-1",role:"menuitem",className:"dropdown-item","data-page":n,onMouseDown:function(e){e.preventDefault(),o(n)}},r):t().createElement("li",{key:r,role:"presentation",className:"dropdown-item"},t().createElement("a",{href:"#",tabIndex:"-1",role:"menuitem","data-page":n,onMouseDown:function(e){e.preventDefault(),o(n)}},r))};q.propTypes={text:i().string.isRequired,page:i().number.isRequired,onSizePerPageChange:i().func.isRequired,bootstrap4:i().bool},q.defaultProps={bootstrap4:!1};const F=q;function X(e){return X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},X(e)}function M(){return M=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},M.apply(this,arguments)}function W(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function H(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?W(Object(r),!0).forEach((function(t){U(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):W(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function U(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==X(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==X(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===X(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var Z=function(e){var r=e.open,n=e.tableId,o=e.hidden,i=e.onClick,a=e.onBlur,u=e.options,c=e.className,s=e.variation,l=e.bootstrap4,f=e.btnContextual,p=e.optionRenderer,g=e.currSizePerPage,y=e.onSizePerPageChange,P={visibility:o?"hidden":"visible"},b=r?"open show":"",d=E()(b,"react-bs-table-sizePerPage-dropdown",s,c),h=n?"".concat(n,"-pageDropDown"):"pageDropDown";return t().createElement("span",{style:P,className:d},t().createElement("button",{id:h,type:"button",className:"btn ".concat(f," dropdown-toggle"),"data-toggle":"dropdown","aria-expanded":r,onClick:i,onBlur:a},g," ",l?null:t().createElement("span",null,t().createElement("span",{className:"caret"}))),t().createElement("ul",{className:"dropdown-menu ".concat(b),role:"menu","aria-labelledby":h},u.map((function(e){return p?p(H(H({},e),{},{onSizePerPageChange:y})):t().createElement(F,M({},e,{key:e.text,bootstrap4:l,onSizePerPageChange:y}))}))))};Z.propTypes={currSizePerPage:i().string.isRequired,options:i().array.isRequired,onClick:i().func.isRequired,onBlur:i().func.isRequired,onSizePerPageChange:i().func.isRequired,bootstrap4:i().bool,tableId:i().string,open:i().bool,hidden:i().bool,btnContextual:i().string,variation:i().oneOf(["dropdown","dropup"]),className:i().string,optionRenderer:i().func},Z.defaultProps={open:!1,hidden:!1,btnContextual:"btn-default btn-secondary",variation:"dropdown",className:"",optionRenderer:null,bootstrap4:!1,tableId:null};const Y=Z;function K(e){return K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},K(e)}function V(){return V=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},V.apply(this,arguments)}function $(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==K(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==K(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===K(i)?i:String(i)),n)}var o,i}function J(e,t){return J=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},J(e,t)}function Q(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=te(e);if(t){var o=te(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===K(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ee(e)}(this,r)}}function ee(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function te(e){return te=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},te(e)}var re=function(r){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&J(e,t)}(u,e);var n,o,i,a=Q(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this,e)).closeDropDown=t.closeDropDown.bind(ee(t)),t.toggleDropDown=t.toggleDropDown.bind(ee(t)),t.handleChangeSizePerPage=t.handleChangeSizePerPage.bind(ee(t)),t.state={dropdownOpen:!1},t}return n=u,(o=[{key:"toggleDropDown",value:function(){var e=!this.state.dropdownOpen;this.setState((function(){return{dropdownOpen:e}}))}},{key:"closeDropDown",value:function(){this.setState((function(){return{dropdownOpen:!1}}))}},{key:"handleChangeSizePerPage",value:function(e){this.props.onSizePerPageChange(e),this.closeDropDown()}},{key:"render",value:function(){var e=this.props,n=e.tableId,o=e.bootstrap4,i=e.sizePerPageList,a=e.currSizePerPage,u=e.hideSizePerPage,c=e.sizePerPageRenderer,s=e.sizePerPageOptionRenderer,l=this.state.dropdownOpen;return i.length>1&&!u?c?c({options:this.calculateSizePerPageStatus(),currSizePerPage:"".concat(a),onSizePerPageChange:this.handleChangeSizePerPage}):t().createElement(r,V({},this.props,{currSizePerPage:"".concat(a),options:this.calculateSizePerPageStatus(),optionRenderer:s,onSizePerPageChange:this.handleChangeSizePerPage,onClick:this.toggleDropDown,onBlur:this.closeDropDown,open:l,tableId:n,bootstrap4:o})):null}}])&&$(n.prototype,o),i&&$(n,i),Object.defineProperty(n,"prototype",{writable:!1}),u}(C(e.Component))},ne=re(Y);const oe=re;function ie(e){return ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ie(e)}function ae(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==ie(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==ie(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===ie(i)?i:String(i)),n)}var o,i}function ue(e,t){return ue=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ue(e,t)}function ce(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=le(e);if(t){var o=le(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===ie(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return se(e)}(this,r)}}function se(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function le(e){return le=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},le(e)}var fe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ue(e,t)}(a,e);var r,n,o,i=ce(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e)).handleClick=t.handleClick.bind(se(t)),t}return r=a,(n=[{key:"handleClick",value:function(e){e.preventDefault(),this.props.onPageChange(this.props.page)}},{key:"render",value:function(){var e=this.props,r=e.page,n=e.title,o=e.active,i=e.disabled,a=e.className,u=E()({active:o,disabled:i,"page-item":!0},a);return t().createElement("li",{className:u,title:n},t().createElement("a",{href:"#",onClick:this.handleClick,className:"page-link"},r))}}])&&ae(r.prototype,n),o&&ae(r,o),Object.defineProperty(r,"prototype",{writable:!1}),a}(e.Component);fe.propTypes={onPageChange:i().func.isRequired,page:i().oneOfType([i().node,i().number,i().string]).isRequired,active:i().bool.isRequired,disabled:i().bool.isRequired,className:i().string,title:i().string};const pe=fe;function ge(e){return ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ge(e)}function ye(){return ye=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},ye.apply(this,arguments)}function Pe(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function be(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Pe(Object(r),!0).forEach((function(t){de(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Pe(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function de(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==ge(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==ge(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===ge(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var he=function(e){return t().createElement("ul",{className:"pagination react-bootstrap-table-page-btns-ul"},e.pages.map((function(r){return e.pageButtonRenderer?e.pageButtonRenderer(be(be({},r),{},{onPageChange:e.onPageChange})):t().createElement(pe,ye({key:r.page},r,{onPageChange:e.onPageChange}))})))};he.propTypes={pages:i().arrayOf(i().shape({page:i().oneOfType([i().node,i().number,i().string]),active:i().bool,disable:i().bool,title:i().string})).isRequired,onPageChange:i().func.isRequired,pageButtonRenderer:i().func},he.defaultProps={pageButtonRenderer:null};const ve=he;function me(e){return me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},me(e)}function Oe(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==me(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==me(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===me(i)?i:String(i)),n)}var o,i}function Se(e,t){return Se=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Se(e,t)}function Te(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=we(e);if(t){var o=we(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===me(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,r)}}function we(e){return we=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},we(e)}var Ee=function(r){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Se(e,t)}(u,e);var n,o,i,a=Te(u);function u(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a.apply(this,arguments)}return n=u,(o=[{key:"render",value:function(){var e=this.props,n=e.lastPage,o=e.totalPages,i=e.pageButtonRenderer,a=e.onPageChange,u=e.disablePageTitle,c=e.hidePageListOnlyOnePage,s=this.calculatePageStatus(this.calculatePages(o,n),n,u);return 1===o&&c?null:t().createElement(r,{pageButtonRenderer:i,onPageChange:a,pages:s})}}])&&Oe(n.prototype,o),i&&Oe(n,i),Object.defineProperty(n,"prototype",{writable:!1}),u}(C(e.Component))},_e=Ee(ve);const je=Ee;var Re=function(e){return e.paginationTotalRenderer?e.paginationTotalRenderer(e.from,e.to,e.dataSize):t().createElement("span",{className:"react-bootstrap-table-pagination-total"}," Showing rows ",e.from," to ",e.to," of ",e.dataSize)};Re.propTypes={from:i().number.isRequired,to:i().number.isRequired,dataSize:i().number.isRequired,paginationTotalRenderer:i().func},Re.defaultProps={paginationTotalRenderer:void 0};const ze=Re;function xe(e){return xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xe(e)}function Ce(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,u=[],c=!0,s=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(u.push(n.value),u.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return u}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Le(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Le(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Le(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Ae(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==xe(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==xe(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===xe(i)?i:String(i)),n)}var o,i}function Ie(e,t){return Ie=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ie(e,t)}function De(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Ne(e);if(t){var o=Ne(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===xe(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,r)}}function Ne(e){return Ne=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Ne(e)}var ke=function(r){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ie(e,t)}(u,e);var n,o,i,a=De(u);function u(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a.apply(this,arguments)}return n=u,(o=[{key:"render",value:function(){var e=Ce(this.calculateFromTo(),2),n=e[0],o=e[1];return t().createElement(r,{from:n,to:o,dataSize:this.props.dataSize,paginationTotalRenderer:this.props.paginationTotalRenderer})}}])&&Ae(n.prototype,o),i&&Ae(n,i),Object.defineProperty(n,"prototype",{writable:!1}),u}(C(e.Component))},Ge=ke(ze);const Be=ke;function qe(e){return qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},qe(e)}var Fe=["tableId","currPage","pageStartIndex","showTotal","dataSize","pageListRenderer","pageButtonRenderer","paginationTotalRenderer","hidePageListOnlyOnePage","totalPages","lastPage","onPageChange","sizePerPageList","currSizePerPage","hideSizePerPage","sizePerPageRenderer","sizePerPageOptionRenderer","onSizePerPageChange","bootstrap4"];function Xe(){return Xe=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Xe.apply(this,arguments)}function Me(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function We(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==qe(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==qe(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===qe(i)?i:String(i)),n)}var o,i}function He(e,t){return He=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},He(e,t)}function Ue(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Ze(e);if(t){var o=Ze(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===qe(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,r)}}function Ze(e){return Ze=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Ze(e)}var Ye=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&He(e,t)}(a,e);var r,n,o,i=Ue(a);function a(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.apply(this,arguments)}return r=a,(n=[{key:"render",value:function(){var e=this.props,r=e.tableId,n=e.currPage,o=e.pageStartIndex,i=e.showTotal,a=e.dataSize,u=e.pageListRenderer,c=e.pageButtonRenderer,s=e.paginationTotalRenderer,l=e.hidePageListOnlyOnePage,f=e.totalPages,p=e.lastPage,g=e.onPageChange,y=e.sizePerPageList,P=e.currSizePerPage,b=e.hideSizePerPage,d=e.sizePerPageRenderer,h=e.sizePerPageOptionRenderer,v=e.onSizePerPageChange,m=e.bootstrap4,O=Me(e,Fe),S=this.calculatePageStatus(this.calculatePages(f,p),p),T=E()("react-bootstrap-table-pagination-list","col-md-6 col-xs-6 col-sm-6 col-lg-6",{"react-bootstrap-table-pagination-list-hidden":l&&1===f});return t().createElement("div",{className:"row react-bootstrap-table-pagination"},t().createElement("div",{className:"col-md-6 col-xs-6 col-sm-6 col-lg-6"},t().createElement(ne,{bootstrap4:m,tableId:r,sizePerPageList:y,currSizePerPage:P,hideSizePerPage:b,sizePerPageRenderer:d,sizePerPageOptionRenderer:h,onSizePerPageChange:v}),i?t().createElement(Ge,{currPage:n,currSizePerPage:P,pageStartIndex:o,dataSize:a,paginationTotalRenderer:s}):null),u?u({pages:S,onPageChange:g}):t().createElement("div",{className:T},t().createElement(_e,Xe({},O,{currPage:n,currSizePerPage:P,pageStartIndex:o,lastPage:p,totalPages:f,pageButtonRenderer:c,onPageChange:g}))))}}])&&We(r.prototype,n),o&&We(r,o),Object.defineProperty(r,"prototype",{writable:!1}),a}(C(e.Component));Ye.propTypes={dataSize:i().number.isRequired,sizePerPageList:i().array.isRequired,currPage:i().number.isRequired,currSizePerPage:i().number.isRequired,onPageChange:i().func.isRequired,onSizePerPageChange:i().func.isRequired,disablePageTitle:i().bool,pageStartIndex:i().number,paginationSize:i().number,showTotal:i().bool,pageListRenderer:i().func,pageButtonRenderer:i().func,sizePerPageRenderer:i().func,paginationTotalRenderer:i().func,sizePerPageOptionRenderer:i().func,firstPageText:i().oneOfType([i().string,i().node]),prePageText:i().oneOfType([i().string,i().node]),nextPageText:i().oneOfType([i().string,i().node]),lastPageText:i().oneOfType([i().string,i().node]),nextPageTitle:i().string,prePageTitle:i().string,firstPageTitle:i().string,lastPageTitle:i().string,withFirstAndLast:i().bool,alwaysShowAllBtns:i().bool,hideSizePerPage:i().bool,hidePageListOnlyOnePage:i().bool,bootstrap4:i().bool},Ye.defaultProps={disablePageTitle:!1,bootstrap4:!1,pageStartIndex:c.PAGE_START_INDEX,paginationSize:c.PAGINATION_SIZE,withFirstAndLast:c.With_FIRST_AND_LAST,alwaysShowAllBtns:c.SHOW_ALL_PAGE_BTNS,showTotal:c.SHOW_TOTAL,pageListRenderer:null,pageButtonRenderer:null,sizePerPageRenderer:null,paginationTotalRenderer:c.PAGINATION_TOTAL,sizePerPageOptionRenderer:null,firstPageText:c.FIRST_PAGE_TEXT,prePageText:c.PRE_PAGE_TEXT,nextPageText:c.NEXT_PAGE_TEXT,lastPageText:c.LAST_PAGE_TEXT,sizePerPageList:c.SIZE_PER_PAGE_LIST,nextPageTitle:c.NEXT_PAGE_TITLE,prePageTitle:c.PRE_PAGE_TITLE,firstPageTitle:c.FIRST_PAGE_TITLE,lastPageTitle:c.LAST_PAGE_TITLE,hideSizePerPage:c.HIDE_SIZE_PER_PAGE,hidePageListOnlyOnePage:c.HIDE_PAGE_LIST_ONLY_ONE_PAGE};const Ke=B(Ye);var Ve=["page","sizePerPage","dataSize"];function $e(e){return $e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$e(e)}function Je(){return Je=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Je.apply(this,arguments)}function Qe(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function et(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,ut(n.key),n)}}function tt(){return tt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=it(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},tt.apply(this,arguments)}function rt(e,t){return rt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},rt(e,t)}function nt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=it(e);if(t){var o=it(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===$e(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ot(e)}(this,r)}}function ot(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function it(e){return it=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},it(e)}function at(e,t,r){return(t=ut(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ut(e){var t=function(e,t){if("object"!==$e(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==$e(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===$e(t)?t:String(t)}var ct=T().Provider,st=t().createContext(),lt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&rt(e,t)}(a,e);var r,n,o,i=nt(a);function a(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return at(ot(e=i.call.apply(i,[this].concat(n))),"isRemotePagination",(function(){return e.props.isRemotePagination()})),at(ot(e),"renderDefaultPagination",(function(){if(!e.props.pagination.options.custom){var r=e.getPaginationProps(),n=r.page,o=r.sizePerPage,i=r.dataSize,a=Qe(r,Ve);return t().createElement(Ke,Je({},a,{key:"pagination",dataSize:i||e.props.data.length,currPage:n,currSizePerPage:o}))}return null})),e}return r=a,(n=[{key:"UNSAFE_componentWillReceiveProps",value:function(e){tt(it(a.prototype),"UNSAFE_componentWillReceiveProps",this).call(this,e);var t=this.currSizePerPage,r=e.pagination.options,n=r.custom,o=r.onPageChange,i=void 0!==e.pagination.options.pageStartIndex?e.pagination.options.pageStartIndex:c.PAGE_START_INDEX;if(!this.isRemotePagination()&&!n){var u=l(e.data.length,this.props.data.length,this.currPage,t,i);this.currPage!==u&&(o&&o(u,t),this.currPage=u)}e.onDataSizeChange&&e.data.length!==this.props.data.length&&e.onDataSizeChange({dataSize:e.data.length})}},{key:"render",value:function(){var e=this.props.data,r=this.props.pagination.options,n=this.currPage,o=this.currSizePerPage,i=void 0===r.pageStartIndex?c.PAGE_START_INDEX:r.pageStartIndex;return e=this.isRemotePagination()?e:function(e,t,r,n){var o=e.length;if(!o)return[];for(var i=s(t,r,n),a=function(e,t){return e-(t-1)}(i,r),u=[],c=a;c<=i&&(u.push(e[c]),c+1!==o);c+=1);return u}(e,n,o,i),t().createElement(st.Provider,{value:{data:e,setRemoteEmitter:this.setRemoteEmitter}},this.props.children,this.renderDefaultPagination())}}])&&et(r.prototype,n),o&&et(r,o),Object.defineProperty(r,"prototype",{writable:!1}),a}(ct);at(lt,"propTypes",{data:i().array.isRequired,remoteEmitter:i().object.isRequired,isRemotePagination:i().func.isRequired});const ft=function(){return{Provider:lt,Consumer:st.Consumer}};var pt=["page","sizePerPage"];function gt(){return gt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},gt.apply(this,arguments)}function yt(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const Pt=function(e){return function(r){var n=r.page,o=r.sizePerPage,i=yt(r,pt);return t().createElement(e,gt({},i,{currPage:n,currSizePerPage:o}))}};const bt=Pt(B(je((function(e){return t().createElement(ve,e)}))));const dt=Pt(B(oe((function(e){return t().createElement(Y,e)}))));const ht=Pt(Be((function(e){return t().createElement(ze,e)}))),vt=function(){return{createContext:ft,options:arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}}};var mt=T(),Ot=mt.Provider,St=mt.Consumer,Tt=function(e){return t().createElement(Ot,e,t().createElement(St,null,(function(t){return e.children(t)})))};Tt.propTypes={children:i().func.isRequired};var wt=Tt})(),o})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,