/*! For license information please see react-bootstrap-table2-paginator.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.ReactBootstrapTable2Paginator=t(require("react")):e.ReactBootstrapTable2Paginator=t(e.React)}(self,(e=>(()=>{var t={184:(e,t)=>{var r;!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)){if(r.length){var a=o.apply(null,r);a&&e.push(a)}}else if("object"===i)if(r.toString===Object.prototype.toString)for(var u in r)n.call(r,u)&&r[u]&&e.push(u);else e.push(r.toString())}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},187:e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,n){function o(r){e.removeListener(t,i),n(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),r([].slice.call(arguments))}P(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&P(e,"error",t,r)}(e,o,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var a=10;function u(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function s(e,t,r,n){var o,i,a,s;if(u(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),a=i[t]),void 0===a)a=i[t]=r,++e._eventsCount;else if("function"==typeof a?a=i[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(o=c(e))>0&&a.length>o&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,s=l,console&&console.warn&&console.warn(s)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function p(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},o=l.bind(n);return o.listener=r,n.wrapFn=o,o}function f(e,t,r){var n=e._events;if(void 0===n)return[];var o=n[t];return void 0===o?[]:"function"==typeof o?r?[o.listener||o]:[o]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(o):y(o,o.length)}function g(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function y(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function P(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){n.once&&e.removeEventListener(t,o),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return c(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var o="error"===e,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var u=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw u.context=a,u}var c=i[e];if(void 0===c)return!1;if("function"==typeof c)n(c,this,t);else{var s=c.length,l=y(c,s);for(r=0;r<s;++r)n(l[r],this,t)}return!0},i.prototype.addListener=function(e,t){return s(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return s(this,e,t,!0)},i.prototype.once=function(e,t){return u(t),this.on(e,p(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return u(t),this.prependListener(e,p(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,n,o,i,a;if(u(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(o=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){a=r[i].listener,o=i;break}if(o<0)return this;0===o?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,o),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var o,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(o=i[n])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},i.prototype.listeners=function(e){return f(this,e,!0)},i.prototype.rawListeners=function(e){return f(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):g.call(e,t)},i.prototype.listenerCount=g,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},703:(e,t,r)=>{"use strict";var n=r(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,i,a){if(a!==n){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var r={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return r.PropTypes=r,r}},697:(e,t,r)=>{e.exports=r(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},787:t=>{"use strict";t.exports=e}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{"use strict";n.r(o),n.d(o,{PaginationListStandalone:()=>Rt,PaginationProvider:()=>Dt,PaginationTotalStandalone:()=>zt,SizePerPageDropdownStandalone:()=>jt,default:()=>xt});var e=n(787),t=n.n(e),r=n(697),i=n.n(r),a=n(187),u=n.n(a);const c={PAGINATION_SIZE:5,PAGE_START_INDEX:1,With_FIRST_AND_LAST:!0,SHOW_ALL_PAGE_BTNS:!1,SHOW_TOTAL:!1,PAGINATION_TOTAL:null,FIRST_PAGE_TEXT:"<<",PRE_PAGE_TEXT:"<",NEXT_PAGE_TEXT:">",LAST_PAGE_TEXT:">>",NEXT_PAGE_TITLE:"next page",LAST_PAGE_TITLE:"last page",PRE_PAGE_TITLE:"previous page",FIRST_PAGE_TITLE:"first page",SIZE_PER_PAGE_LIST:[10,25,30,50],HIDE_SIZE_PER_PAGE:!1,HIDE_PAGE_LIST_ONLY_ONE_PAGE:!1};var s=function(e,t,r){return function(e,t){return e+Math.abs(1-t)}(e,r)*t-1},l=function(e,t,r,n,o){return t<e?r:r<o||e<=0?o:r>=Math.floor(e/n)+o&&1===o?Math.ceil(e/n):r>=Math.floor(e/n)&&0===o?Math.ceil(e/n)-Math.abs(c.PAGE_START_INDEX-o):r};function p(e){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}function f(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function g(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?f(Object(r),!0).forEach((function(t){m(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):f(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function y(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function P(e,t){return P=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},P(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=v(e);if(t){var o=v(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return d(this,r)}}function d(e,t){if(t&&("object"===p(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return b(e)}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function v(e){return v=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},v(e)}function m(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var O=t().createContext(),S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(a,e);var r,n,o,i=h(a);function a(e){var t,r,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),m(b(t=i.call(this,e)),"getPaginationProps",(function(){var e=t.props,r=e.pagination.options,n=e.bootstrap4,o=e.tableId,i=b(t),a=i.currPage,u=i.currSizePerPage,s=i.dataSize,l=void 0===r.withFirstAndLast?c.With_FIRST_AND_LAST:r.withFirstAndLast,p=void 0===r.alwaysShowAllBtns?c.SHOW_ALL_PAGE_BTNS:r.alwaysShowAllBtns,f=void 0===r.hideSizePerPage?c.HIDE_SIZE_PER_PAGE:r.hideSizePerPage,y=void 0===r.hidePageListOnlyOnePage?c.HIDE_PAGE_LIST_ONLY_ONE_PAGE:r.hidePageListOnlyOnePage,P=void 0===r.pageStartIndex?c.PAGE_START_INDEX:r.pageStartIndex;return g(g({},r),{},{bootstrap4:n,tableId:o,page:a,sizePerPage:u,pageStartIndex:P,hidePageListOnlyOnePage:y,hideSizePerPage:f,alwaysShowAllBtns:p,withFirstAndLast:l,dataSize:s,sizePerPageList:r.sizePerPageList||c.SIZE_PER_PAGE_LIST,paginationSize:r.paginationSize||c.PAGINATION_SIZE,showTotal:r.showTotal,pageListRenderer:r.pageListRenderer,pageButtonRenderer:r.pageButtonRenderer,sizePerPageRenderer:r.sizePerPageRenderer,paginationTotalRenderer:r.paginationTotalRenderer,sizePerPageOptionRenderer:r.sizePerPageOptionRenderer,firstPageText:r.firstPageText||c.FIRST_PAGE_TEXT,prePageText:r.prePageText||c.PRE_PAGE_TEXT,nextPageText:r.nextPageText||c.NEXT_PAGE_TEXT,lastPageText:r.lastPageText||c.LAST_PAGE_TEXT,prePageTitle:r.prePageTitle||c.PRE_PAGE_TITLE,nextPageTitle:r.nextPageTitle||c.NEXT_PAGE_TITLE,firstPageTitle:r.firstPageTitle||c.FIRST_PAGE_TITLE,lastPageTitle:r.lastPageTitle||c.LAST_PAGE_TITLE,onPageChange:t.handleChangePage,onSizePerPageChange:t.handleChangeSizePerPage})})),m(b(t),"setPaginationRemoteEmitter",(function(e){t.remoteEmitter=e})),m(b(t),"getPaginationRemoteEmitter",(function(){return t.remoteEmitter||t.props.remoteEmitter})),m(b(t),"isRemotePagination",(function(){var e={};return t.remoteEmitter.emit("isRemotePagination",e),e.result})),t.handleChangePage=t.handleChangePage.bind(b(t)),t.handleDataSizeChange=t.handleDataSizeChange.bind(b(t)),t.handleChangeSizePerPage=t.handleChangeSizePerPage.bind(b(t));var o=e.pagination.options,s=o.sizePerPageList||c.SIZE_PER_PAGE_LIST;return r=void 0!==o.page?o.page:void 0!==o.pageStartIndex?o.pageStartIndex:c.PAGE_START_INDEX,n=void 0!==o.sizePerPage?o.sizePerPage:"object"===p(s[0])?s[0].value:s[0],t.currPage=r,t.dataSize=o.totalSize,t.currSizePerPage=n,t.dataChangeListener=new(u()),t.dataChangeListener.on("filterChanged",t.handleDataSizeChange),t}return r=a,n=[{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=e.pagination.options.custom;(this.isRemotePagination()||t)&&(void 0!==e.pagination.options.page&&(this.currPage=e.pagination.options.page),void 0!==e.pagination.options.sizePerPage&&(this.currSizePerPage=e.pagination.options.sizePerPage),void 0!==e.pagination.options.totalSize&&(this.dataSize=e.pagination.options.totalSize))}},{key:"handleDataSizeChange",value:function(e){var t=this.props.pagination.options,r=void 0===t.pageStartIndex?c.PAGE_START_INDEX:t.pageStartIndex;this.currPage=l(e,this.dataSize,this.currPage,this.currSizePerPage,r),this.dataSize=e,this.forceUpdate()}},{key:"handleChangePage",value:function(e){var t=this.currSizePerPage,r=this.props.pagination.options;r.onPageChange&&r.onPageChange(e,t),this.currPage=e,this.isRemotePagination()?this.getPaginationRemoteEmitter().emit("paginationChange",e,t):this.forceUpdate()}},{key:"handleChangeSizePerPage",value:function(e,t){var r=this.props.pagination.options;r.onSizePerPageChange&&r.onSizePerPageChange(e,t),this.currPage=t,this.currSizePerPage=e,this.isRemotePagination()?this.getPaginationRemoteEmitter().emit("paginationChange",t,e):this.forceUpdate()}},{key:"render",value:function(){var e=this.getPaginationProps(),r=g(g({},this.props.pagination),{},{options:e});return t().createElement(O.Provider,{value:{paginationProps:e,paginationTableProps:{pagination:r,setPaginationRemoteEmitter:this.setPaginationRemoteEmitter,dataChangeListener:this.dataChangeListener}}},this.props.children)}}],n&&y(r.prototype,n),o&&y(r,o),Object.defineProperty(r,"prototype",{writable:!1}),a}(t().Component);const T=function(){return{Provider:S,Consumer:O.Consumer}};var _=n(184),w=n.n(_);function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function R(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function j(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function z(e,t){return z=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},z(e,t)}function x(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=L(e);if(t){var o=L(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return C(this,r)}}function C(e,t){if(t&&("object"===E(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function L(e){return L=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},L(e)}const A=function(e){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&z(e,t)}(i,e);var t,r,n,o=x(i);function i(){return R(this,i),o.apply(this,arguments)}return t=i,r=[{key:"backToPrevPage",value:function(){var e=this.props,t=e.currPage,r=e.pageStartIndex;return t-1<r?r:t-1}},{key:"initialState",value:function(){var e=this.calculateTotalPage();return{totalPages:e,lastPage:this.calculateLastPage(e)}}},{key:"calculateTotalPage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props.currSizePerPage,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.props.dataSize;return Math.ceil(t/e)}},{key:"calculateLastPage",value:function(e){return this.props.pageStartIndex+e-1}},{key:"calculateFromTo",value:function(){var e=this.props,t=e.dataSize,r=e.currPage,n=e.currSizePerPage,o=e.pageStartIndex,i=Math.abs(c.PAGE_START_INDEX-o),a=(r-o)*n;a=0===t?0:a+1;var u=Math.min(n*(r+i),t);return u>t&&(u=t),[a,u]}},{key:"calculatePages",value:function(e,t){var r=this.props,n=r.currPage,o=r.paginationSize,i=r.pageStartIndex,a=r.withFirstAndLast,u=r.firstPageText,c=r.prePageText,s=r.nextPageText,l=r.lastPageText,p=r.alwaysShowAllBtns,f=[],g=e;if(g<=0)return[];var y=Math.max(n-Math.floor(o/2),i);(g=y+o-1)>t&&(y=(g=t)-o+1),p&&(f=a?[u,c]:[c]),y!==i&&e>o&&a&&0===f.length?f=[u,c]:e>1&&0===f.length&&(f=[c]);for(var P=y;P<=g;P+=1)P>=i&&f.push(P);return(p||g<=t&&f.length>1)&&f.push(s),(g!==t&&a||a&&p)&&f.push(l),f}},{key:"calculatePageStatus",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=arguments.length>1?arguments[1]:void 0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=this.props,i=o.currPage,a=o.pageStartIndex,u=o.firstPageText,c=o.prePageText,s=o.nextPageText,l=o.lastPageText,p=o.alwaysShowAllBtns,f=function(e){return i===a&&(e===u||e===c)},g=function(e){return i===r&&(e===s||e===l)};return t.filter((function(e){return!!p||!(f(e)||g(e))})).map((function(t){var r,o=t===i,a=f(t)||g(t);r=t===s?e.props.nextPageTitle:t===c?e.props.prePageTitle:t===u?e.props.firstPageTitle:t===l?e.props.lastPageTitle:"".concat(t);var p={page:t,active:o,disabled:a};return n||(p.title=r),p}))}},{key:"calculateSizePerPageStatus",value:function(){return this.props.sizePerPageList.map((function(e){var t=void 0!==e.text?e.text:e,r=void 0!==e.value?e.value:e;return{text:"".concat(t),page:r}}))}}],r&&j(t.prototype,r),n&&j(t,n),Object.defineProperty(t,"prototype",{writable:!1}),i}(e)};function I(e){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},I(e)}function D(){return D=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},D.apply(this,arguments)}function k(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function N(e,t){return N=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},N(e,t)}function G(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=F(e);if(t){var o=F(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return B(this,r)}}function B(e,t){if(t&&("object"===I(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return q(e)}function q(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function F(e){return F=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},F(e)}const X=function(r){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&N(e,t)}(u,e);var n,o,i,a=G(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this,e)).handleChangePage=t.handleChangePage.bind(q(t)),t.handleChangeSizePerPage=t.handleChangeSizePerPage.bind(q(t)),t.state=t.initialState(),t}return n=u,(o=[{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=e.dataSize,r=e.currSizePerPage;if(r!==this.props.currSizePerPage||t!==this.props.dataSize){var n=this.calculateTotalPage(r,t),o=this.calculateLastPage(n);this.setState({totalPages:n,lastPage:o})}}},{key:"handleChangeSizePerPage",value:function(e){var t=this.props,r=t.currSizePerPage,n=t.onSizePerPageChange,o="string"==typeof e?parseInt(e,10):e,i=this.props.currPage;if(o!==r){var a=this.calculateTotalPage(o),u=this.calculateLastPage(a);i>u&&(i=u),n(o,i)}}},{key:"handleChangePage",value:function(e){var t,r=this.props,n=r.currPage,o=r.pageStartIndex,i=r.prePageText,a=r.nextPageText,u=r.lastPageText,c=r.firstPageText,s=r.onPageChange,l=this.state.lastPage;(t=e===i?this.backToPrevPage():e===a?n+1>l?l:n+1:e===u?l:e===c?o:parseInt(e,10))!==n&&s(t)}},{key:"render",value:function(){return t().createElement(r,D({},this.props,{lastPage:this.state.lastPage,totalPages:this.state.totalPages,onPageChange:this.handleChangePage,onSizePerPageChange:this.handleChangeSizePerPage}))}}])&&k(n.prototype,o),i&&k(n,i),Object.defineProperty(n,"prototype",{writable:!1}),u}(A(e.Component))};var M=function(e){var r=e.text,n=e.page,o=e.onSizePerPageChange;return e.bootstrap4?t().createElement("a",{href:"#",tabIndex:"-1",role:"menuitem",className:"dropdown-item","data-page":n,onMouseDown:function(e){e.preventDefault(),o(n)}},r):t().createElement("li",{key:r,role:"presentation",className:"dropdown-item"},t().createElement("a",{href:"#",tabIndex:"-1",role:"menuitem","data-page":n,onMouseDown:function(e){e.preventDefault(),o(n)}},r))};M.propTypes={text:i().string.isRequired,page:i().number.isRequired,onSizePerPageChange:i().func.isRequired,bootstrap4:i().bool},M.defaultProps={bootstrap4:!1};const W=M;function H(){return H=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},H.apply(this,arguments)}function U(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Z(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?U(Object(r),!0).forEach((function(t){Y(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):U(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Y(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var K=function(e){var r=e.open,n=e.tableId,o=e.hidden,i=e.onClick,a=e.onBlur,u=e.options,c=e.className,s=e.variation,l=e.bootstrap4,p=e.btnContextual,f=e.optionRenderer,g=e.currSizePerPage,y=e.onSizePerPageChange,P={visibility:o?"hidden":"visible"},h=r?"open show":"",d=w()(h,"react-bs-table-sizePerPage-dropdown",s,c),b=n?"".concat(n,"-pageDropDown"):"pageDropDown";return t().createElement("span",{style:P,className:d},t().createElement("button",{id:b,type:"button",className:"btn ".concat(p," dropdown-toggle"),"data-toggle":"dropdown","aria-expanded":r,onClick:i,onBlur:a},g," ",l?null:t().createElement("span",null,t().createElement("span",{className:"caret"}))),t().createElement("ul",{className:"dropdown-menu ".concat(h),role:"menu","aria-labelledby":b},u.map((function(e){return f?f(Z(Z({},e),{},{onSizePerPageChange:y})):t().createElement(W,H({},e,{key:e.text,bootstrap4:l,onSizePerPageChange:y}))}))))};K.propTypes={currSizePerPage:i().string.isRequired,options:i().array.isRequired,onClick:i().func.isRequired,onBlur:i().func.isRequired,onSizePerPageChange:i().func.isRequired,bootstrap4:i().bool,tableId:i().string,open:i().bool,hidden:i().bool,btnContextual:i().string,variation:i().oneOf(["dropdown","dropup"]),className:i().string,optionRenderer:i().func},K.defaultProps={open:!1,hidden:!1,btnContextual:"btn-default btn-secondary",variation:"dropdown",className:"",optionRenderer:null,bootstrap4:!1,tableId:null};const V=K;function $(e){return $="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$(e)}function J(){return J=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},J.apply(this,arguments)}function Q(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function ee(e,t){return ee=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ee(e,t)}function te(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oe(e);if(t){var o=oe(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return re(this,r)}}function re(e,t){if(t&&("object"===$(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ne(e)}function ne(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function oe(e){return oe=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},oe(e)}var ie=function(r){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ee(e,t)}(u,e);var n,o,i,a=te(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this,e)).closeDropDown=t.closeDropDown.bind(ne(t)),t.toggleDropDown=t.toggleDropDown.bind(ne(t)),t.handleChangeSizePerPage=t.handleChangeSizePerPage.bind(ne(t)),t.state={dropdownOpen:!1},t}return n=u,(o=[{key:"toggleDropDown",value:function(){var e=!this.state.dropdownOpen;this.setState((function(){return{dropdownOpen:e}}))}},{key:"closeDropDown",value:function(){this.setState((function(){return{dropdownOpen:!1}}))}},{key:"handleChangeSizePerPage",value:function(e){this.props.onSizePerPageChange(e),this.closeDropDown()}},{key:"render",value:function(){var e=this.props,n=e.tableId,o=e.bootstrap4,i=e.sizePerPageList,a=e.currSizePerPage,u=e.hideSizePerPage,c=e.sizePerPageRenderer,s=e.sizePerPageOptionRenderer,l=this.state.dropdownOpen;return i.length>1&&!u?c?c({options:this.calculateSizePerPageStatus(),currSizePerPage:"".concat(a),onSizePerPageChange:this.handleChangeSizePerPage}):t().createElement(r,J({},this.props,{currSizePerPage:"".concat(a),options:this.calculateSizePerPageStatus(),optionRenderer:s,onSizePerPageChange:this.handleChangeSizePerPage,onClick:this.toggleDropDown,onBlur:this.closeDropDown,open:l,tableId:n,bootstrap4:o})):null}}])&&Q(n.prototype,o),i&&Q(n,i),Object.defineProperty(n,"prototype",{writable:!1}),u}(A(e.Component))},ae=ie(V);const ue=ie;function ce(e){return ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ce(e)}function se(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function le(e,t){return le=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},le(e,t)}function pe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=ye(e);if(t){var o=ye(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return fe(this,r)}}function fe(e,t){if(t&&("object"===ce(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ge(e)}function ge(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ye(e){return ye=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ye(e)}var Pe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&le(e,t)}(a,e);var r,n,o,i=pe(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e)).handleClick=t.handleClick.bind(ge(t)),t}return r=a,(n=[{key:"handleClick",value:function(e){e.preventDefault(),this.props.onPageChange(this.props.page)}},{key:"render",value:function(){var e=this.props,r=e.page,n=e.title,o=e.active,i=e.disabled,a=e.className,u=w()({active:o,disabled:i,"page-item":!0},a);return t().createElement("li",{className:u,title:n},t().createElement("a",{href:"#",onClick:this.handleClick,className:"page-link"},r))}}])&&se(r.prototype,n),o&&se(r,o),Object.defineProperty(r,"prototype",{writable:!1}),a}(e.Component);Pe.propTypes={onPageChange:i().func.isRequired,page:i().oneOfType([i().node,i().number,i().string]).isRequired,active:i().bool.isRequired,disabled:i().bool.isRequired,className:i().string,title:i().string};const he=Pe;function de(){return de=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},de.apply(this,arguments)}function be(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ve(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?be(Object(r),!0).forEach((function(t){me(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):be(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function me(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var Oe=function(e){return t().createElement("ul",{className:"pagination react-bootstrap-table-page-btns-ul"},e.pages.map((function(r){return e.pageButtonRenderer?e.pageButtonRenderer(ve(ve({},r),{},{onPageChange:e.onPageChange})):t().createElement(he,de({key:r.page},r,{onPageChange:e.onPageChange}))})))};Oe.propTypes={pages:i().arrayOf(i().shape({page:i().oneOfType([i().node,i().number,i().string]),active:i().bool,disable:i().bool,title:i().string})).isRequired,onPageChange:i().func.isRequired,pageButtonRenderer:i().func},Oe.defaultProps={pageButtonRenderer:null};const Se=Oe;function Te(e){return Te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Te(e)}function _e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function we(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ee(e,t){return Ee=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ee(e,t)}function Re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=ze(e);if(t){var o=ze(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return je(this,r)}}function je(e,t){if(t&&("object"===Te(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function ze(e){return ze=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ze(e)}var xe=function(r){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ee(e,t)}(u,e);var n,o,i,a=Re(u);function u(){return _e(this,u),a.apply(this,arguments)}return n=u,(o=[{key:"render",value:function(){var e=this.props,n=e.lastPage,o=e.totalPages,i=e.pageButtonRenderer,a=e.onPageChange,u=e.disablePageTitle,c=e.hidePageListOnlyOnePage,s=this.calculatePageStatus(this.calculatePages(o,n),n,u);return 1===o&&c?null:t().createElement(r,{pageButtonRenderer:i,onPageChange:a,pages:s})}}])&&we(n.prototype,o),i&&we(n,i),Object.defineProperty(n,"prototype",{writable:!1}),u}(A(e.Component))},Ce=xe(Se);const Le=xe;var Ae=function(e){return e.paginationTotalRenderer?e.paginationTotalRenderer(e.from,e.to,e.dataSize):t().createElement("span",{className:"react-bootstrap-table-pagination-total"}," Showing rows ",e.from," to ",e.to," of ",e.dataSize)};Ae.propTypes={from:i().number.isRequired,to:i().number.isRequired,dataSize:i().number.isRequired,paginationTotalRenderer:i().func},Ae.defaultProps={paginationTotalRenderer:void 0};const Ie=Ae;function De(e){return De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},De(e)}function ke(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==r)return;var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Ne(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Ne(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ne(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Ge(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Be(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function qe(e,t){return qe=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},qe(e,t)}function Fe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Me(e);if(t){var o=Me(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Xe(this,r)}}function Xe(e,t){if(t&&("object"===De(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function Me(e){return Me=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Me(e)}var We=function(r){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&qe(e,t)}(u,e);var n,o,i,a=Fe(u);function u(){return Ge(this,u),a.apply(this,arguments)}return n=u,(o=[{key:"render",value:function(){var e=ke(this.calculateFromTo(),2),n=e[0],o=e[1];return t().createElement(r,{from:n,to:o,dataSize:this.props.dataSize,paginationTotalRenderer:this.props.paginationTotalRenderer})}}])&&Be(n.prototype,o),i&&Be(n,i),Object.defineProperty(n,"prototype",{writable:!1}),u}(A(e.Component))},He=We(Ie);const Ue=We;function Ze(e){return Ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ze(e)}var Ye=["tableId","currPage","pageStartIndex","showTotal","dataSize","pageListRenderer","pageButtonRenderer","paginationTotalRenderer","hidePageListOnlyOnePage","totalPages","lastPage","onPageChange","sizePerPageList","currSizePerPage","hideSizePerPage","sizePerPageRenderer","sizePerPageOptionRenderer","onSizePerPageChange","bootstrap4"];function Ke(){return Ke=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Ke.apply(this,arguments)}function Ve(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function $e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Je(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Qe(e,t){return Qe=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Qe(e,t)}function et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=rt(e);if(t){var o=rt(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return tt(this,r)}}function tt(e,t){if(t&&("object"===Ze(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function rt(e){return rt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},rt(e)}var nt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Qe(e,t)}(a,e);var r,n,o,i=et(a);function a(){return $e(this,a),i.apply(this,arguments)}return r=a,(n=[{key:"render",value:function(){var e=this.props,r=e.tableId,n=e.currPage,o=e.pageStartIndex,i=e.showTotal,a=e.dataSize,u=e.pageListRenderer,c=e.pageButtonRenderer,s=e.paginationTotalRenderer,l=e.hidePageListOnlyOnePage,p=e.totalPages,f=e.lastPage,g=e.onPageChange,y=e.sizePerPageList,P=e.currSizePerPage,h=e.hideSizePerPage,d=e.sizePerPageRenderer,b=e.sizePerPageOptionRenderer,v=e.onSizePerPageChange,m=e.bootstrap4,O=Ve(e,Ye),S=this.calculatePageStatus(this.calculatePages(p,f),f),T=w()("react-bootstrap-table-pagination-list","col-md-6 col-xs-6 col-sm-6 col-lg-6",{"react-bootstrap-table-pagination-list-hidden":l&&1===p});return t().createElement("div",{className:"row react-bootstrap-table-pagination"},t().createElement("div",{className:"col-md-6 col-xs-6 col-sm-6 col-lg-6"},t().createElement(ae,{bootstrap4:m,tableId:r,sizePerPageList:y,currSizePerPage:P,hideSizePerPage:h,sizePerPageRenderer:d,sizePerPageOptionRenderer:b,onSizePerPageChange:v}),i?t().createElement(He,{currPage:n,currSizePerPage:P,pageStartIndex:o,dataSize:a,paginationTotalRenderer:s}):null),u?u({pages:S,onPageChange:g}):t().createElement("div",{className:T},t().createElement(Ce,Ke({},O,{currPage:n,currSizePerPage:P,pageStartIndex:o,lastPage:f,totalPages:p,pageButtonRenderer:c,onPageChange:g}))))}}])&&Je(r.prototype,n),o&&Je(r,o),Object.defineProperty(r,"prototype",{writable:!1}),a}(A(e.Component));nt.propTypes={dataSize:i().number.isRequired,sizePerPageList:i().array.isRequired,currPage:i().number.isRequired,currSizePerPage:i().number.isRequired,onPageChange:i().func.isRequired,onSizePerPageChange:i().func.isRequired,disablePageTitle:i().bool,pageStartIndex:i().number,paginationSize:i().number,showTotal:i().bool,pageListRenderer:i().func,pageButtonRenderer:i().func,sizePerPageRenderer:i().func,paginationTotalRenderer:i().func,sizePerPageOptionRenderer:i().func,firstPageText:i().oneOfType([i().string,i().node]),prePageText:i().oneOfType([i().string,i().node]),nextPageText:i().oneOfType([i().string,i().node]),lastPageText:i().oneOfType([i().string,i().node]),nextPageTitle:i().string,prePageTitle:i().string,firstPageTitle:i().string,lastPageTitle:i().string,withFirstAndLast:i().bool,alwaysShowAllBtns:i().bool,hideSizePerPage:i().bool,hidePageListOnlyOnePage:i().bool,bootstrap4:i().bool},nt.defaultProps={disablePageTitle:!1,bootstrap4:!1,pageStartIndex:c.PAGE_START_INDEX,paginationSize:c.PAGINATION_SIZE,withFirstAndLast:c.With_FIRST_AND_LAST,alwaysShowAllBtns:c.SHOW_ALL_PAGE_BTNS,showTotal:c.SHOW_TOTAL,pageListRenderer:null,pageButtonRenderer:null,sizePerPageRenderer:null,paginationTotalRenderer:c.PAGINATION_TOTAL,sizePerPageOptionRenderer:null,firstPageText:c.FIRST_PAGE_TEXT,prePageText:c.PRE_PAGE_TEXT,nextPageText:c.NEXT_PAGE_TEXT,lastPageText:c.LAST_PAGE_TEXT,sizePerPageList:c.SIZE_PER_PAGE_LIST,nextPageTitle:c.NEXT_PAGE_TITLE,prePageTitle:c.PRE_PAGE_TITLE,firstPageTitle:c.FIRST_PAGE_TITLE,lastPageTitle:c.LAST_PAGE_TITLE,hideSizePerPage:c.HIDE_SIZE_PER_PAGE,hidePageListOnlyOnePage:c.HIDE_PAGE_LIST_ONLY_ONE_PAGE};const ot=X(nt);function it(e){return it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},it(e)}var at=["page","sizePerPage","dataSize"];function ut(){return ut=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},ut.apply(this,arguments)}function ct(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function st(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function lt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function pt(){return pt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=ft(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},pt.apply(this,arguments)}function ft(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=dt(e)););return e}function gt(e,t){return gt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},gt(e,t)}function yt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=dt(e);if(t){var o=dt(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Pt(this,r)}}function Pt(e,t){if(t&&("object"===it(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ht(e)}function ht(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function dt(e){return dt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},dt(e)}function bt(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var vt=T().Provider,mt=t().createContext(),Ot=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&gt(e,t)}(a,e);var r,n,o,i=yt(a);function a(){var e;st(this,a);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return bt(ht(e=i.call.apply(i,[this].concat(n))),"isRemotePagination",(function(){return e.props.isRemotePagination()})),bt(ht(e),"renderDefaultPagination",(function(){if(!e.props.pagination.options.custom){var r=e.getPaginationProps(),n=r.page,o=r.sizePerPage,i=r.dataSize,a=ct(r,at);return t().createElement(ot,ut({},a,{key:"pagination",dataSize:i||e.props.data.length,currPage:n,currSizePerPage:o}))}return null})),e}return r=a,(n=[{key:"UNSAFE_componentWillReceiveProps",value:function(e){pt(dt(a.prototype),"UNSAFE_componentWillReceiveProps",this).call(this,e);var t=this.currSizePerPage,r=e.pagination.options,n=r.custom,o=r.onPageChange,i=void 0!==e.pagination.options.pageStartIndex?e.pagination.options.pageStartIndex:c.PAGE_START_INDEX;if(!this.isRemotePagination()&&!n){var u=l(e.data.length,this.props.data.length,this.currPage,t,i);this.currPage!==u&&(o&&o(u,t),this.currPage=u)}e.onDataSizeChange&&e.data.length!==this.props.data.length&&e.onDataSizeChange({dataSize:e.data.length})}},{key:"render",value:function(){var e=this.props.data,r=this.props.pagination.options,n=this.currPage,o=this.currSizePerPage,i=void 0===r.pageStartIndex?c.PAGE_START_INDEX:r.pageStartIndex;return e=this.isRemotePagination()?e:function(e,t,r,n){var o=e.length;if(!o)return[];for(var i=s(t,r,n),a=function(e,t){return e-(t-1)}(i,r),u=[],c=a;c<=i&&(u.push(e[c]),c+1!==o);c+=1);return u}(e,n,o,i),t().createElement(mt.Provider,{value:{data:e,setRemoteEmitter:this.setRemoteEmitter}},this.props.children,this.renderDefaultPagination())}}])&&lt(r.prototype,n),o&&lt(r,o),Object.defineProperty(r,"prototype",{writable:!1}),a}(vt);bt(Ot,"propTypes",{data:i().array.isRequired,remoteEmitter:i().object.isRequired,isRemotePagination:i().func.isRequired});const St=function(){return{Provider:Ot,Consumer:mt.Consumer}};var Tt=["page","sizePerPage"];function _t(){return _t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_t.apply(this,arguments)}function wt(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const Et=function(e){return function(r){var n=r.page,o=r.sizePerPage,i=wt(r,Tt);return t().createElement(e,_t({},i,{currPage:n,currSizePerPage:o}))}};const Rt=Et(X(Le((function(e){return t().createElement(Se,e)}))));const jt=Et(X(ue((function(e){return t().createElement(V,e)}))));const zt=Et(Ue((function(e){return t().createElement(Ie,e)}))),xt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{createContext:St,options:e}};var Ct=T(),Lt=Ct.Provider,At=Ct.Consumer,It=function(e){return t().createElement(Lt,e,t().createElement(At,null,(function(t){return e.children(t)})))};It.propTypes={children:i().func.isRequired};var Dt=It})(),o})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,