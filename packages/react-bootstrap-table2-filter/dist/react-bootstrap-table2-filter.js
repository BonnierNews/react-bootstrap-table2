!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports.ReactBootstrapTable2Filter=e(require("react")):t.ReactBootstrapTable2Filter=e(t.React)}(self,(t=>(()=>{var e={703:(t,e,r)=>{"use strict";var n=r(414);function o(){}function i(){}i.resetWarningCache=o,t.exports=function(){function t(t,e,r,o,i,a){if(a!==n){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function e(){return t}t.isRequired=t;var r={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:i,resetWarningCache:o};return r.PropTypes=r,r}},697:(t,e,r)=>{t.exports=r(703)()},414:t=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},787:e=>{"use strict";e.exports=t}},r={};function n(t){var o=r[t];if(void 0!==o)return o.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};return(()=>{"use strict";n.r(o),n.d(o,{Comparator:()=>Vt,FILTER_TYPES:()=>Nt,customFilter:()=>Lt,dateFilter:()=>Ut,default:()=>kt,multiSelectFilter:()=>_t,numberFilter:()=>xt,selectFilter:()=>Dt,textFilter:()=>Rt});var t={};n.r(t),n.d(t,{EQ:()=>u,GE:()=>p,GT:()=>s,LE:()=>y,LIKE:()=>l,LT:()=>f,NE:()=>c});var e=n(787),r=n.n(e),i=n(697),a=n.n(i),l="LIKE",u="=",c="!=",s=">",p=">=",f="<",y="<=",m={TEXT:"TEXT",SELECT:"SELECT",MULTISELECT:"MULTISELECT",NUMBER:"NUMBER",DATE:"DATE"};function b(t){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},b(t)}var d=["id","placeholder","column","style","className","onFilter","caseSensitive","defaultValue","getFilter","filterState"];function h(){return h=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},h.apply(this,arguments)}function v(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}function g(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==b(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==b(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===b(i)?i:String(i)),n)}var o,i}function O(t,e){return O=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},O(t,e)}function S(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=F(t);if(e){var o=F(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(t,e){if(e&&("object"===b(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return E(t)}(this,r)}}function E(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function F(t){return F=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},F(t)}var j=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&O(t,e)}(a,t);var e,n,o,i=S(a);function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t)).filter=e.filter.bind(E(e)),e.handleClick=e.handleClick.bind(E(e)),e.timeout=null,e.state={value:t.filterState&&void 0!==t.filterState.filterVal?t.filterState.filterVal:t.defaultValue},e}return e=a,(n=[{key:"componentDidMount",value:function(){var t=this,e=this.props,r=e.onFilter,n=e.getFilter,o=e.column,i=this.input.value;i&&r(this.props.column,m.TEXT,!0)(i),n&&n((function(e){t.setState((function(){return{value:e}})),r(o,m.TEXT)(e)}))}},{key:"componentWillUnmount",value:function(){this.cleanTimer()}},{key:"UNSAFE_componentWillReceiveProps",value:function(t){t.defaultValue!==this.props.defaultValue&&this.applyFilter(t.defaultValue)}},{key:"filter",value:function(t){var e=this;t.stopPropagation(),this.cleanTimer();var r=t.target.value;this.setState((function(){return{value:r}})),this.timeout=setTimeout((function(){e.props.onFilter(e.props.column,m.TEXT)(r)}),this.props.delay)}},{key:"cleanTimer",value:function(){this.timeout&&clearTimeout(this.timeout)}},{key:"cleanFiltered",value:function(){var t=this.props.defaultValue;this.setState((function(){return{value:t}})),this.props.onFilter(this.props.column,m.TEXT)(t)}},{key:"applyFilter",value:function(t){this.setState((function(){return{value:t}})),this.props.onFilter(this.props.column,m.TEXT)(t)}},{key:"handleClick",value:function(t){t.stopPropagation(),this.props.onClick&&this.props.onClick(t)}},{key:"render",value:function(){var t=this,e=this.props,n=e.id,o=e.placeholder,i=e.column,a=i.dataField,l=i.text,u=e.style,c=e.className,s=(e.onFilter,e.caseSensitive,e.defaultValue,e.getFilter,e.filterState,v(e,d)),p="text-filter-column-".concat(a).concat(n?"-".concat(n):"");return r().createElement("label",{className:"filter-label",htmlFor:p},r().createElement("span",{className:"sr-only"},"Filter by ",l),r().createElement("input",h({},s,{ref:function(e){return t.input=e},type:"text",id:p,className:"filter text-filter form-control ".concat(c),style:u,onChange:this.filter,onClick:this.handleClick,placeholder:o||"Enter ".concat(l,"..."),value:this.state.value})))}}])&&g(e.prototype,n),o&&g(e,o),Object.defineProperty(e,"prototype",{writable:!1}),a}(e.Component);j.propTypes={onFilter:i.PropTypes.func.isRequired,column:i.PropTypes.object.isRequired,id:i.PropTypes.string,filterState:i.PropTypes.object,comparator:i.PropTypes.oneOf([l,u]),defaultValue:i.PropTypes.string,delay:i.PropTypes.number,placeholder:i.PropTypes.string,style:i.PropTypes.object,className:i.PropTypes.string,caseSensitive:i.PropTypes.bool,getFilter:i.PropTypes.func},j.defaultProps={delay:500,filterState:{},defaultValue:"",caseSensitive:!1,id:null};const P=j;function T(t){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},T(t)}var C=["id","style","className","defaultValue","onFilter","column","options","comparator","withoutEmptyOption","caseSensitive","getFilter","filterState"];function w(){return w=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},w.apply(this,arguments)}function k(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}function N(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==T(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==T(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===T(i)?i:String(i)),n)}var o,i}function V(t,e){return V=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},V(t,e)}function R(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=_(t);if(e){var o=_(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(t,e){if(e&&("object"===T(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return D(t)}(this,r)}}function D(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var x=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&V(t,e)}(a,t);var e,n,o,i=R(a);function a(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t)).filter=e.filter.bind(D(e)),e.options=e.getOptions(t);var r,n,o=void 0!==(r=e.options,n=e.getDefaultValue(),Array.isArray(r)?r.filter((function(t){return t.label===n})).map((function(t){return t.value}))[0]:r[n]);return e.state={isSelected:o},e}return e=a,(n=[{key:"componentDidMount",value:function(){var t=this,e=this.props,r=e.column,n=e.onFilter,o=e.getFilter,i=this.selectInput.value;i&&""!==i&&n(r,m.SELECT,!0)(i),o&&o((function(e){t.setState((function(){return{isSelected:""!==e}})),t.selectInput.value=e,n(r,m.SELECT)(e)}))}},{key:"componentDidUpdate",value:function(t){var e=!1,r=this.props,n=r.column,o=r.onFilter,i=r.defaultValue,a=this.getOptions(this.props);if(i!==t.defaultValue?e=!0:function(t,e){if(Array.isArray(t)){if(t.length===e.length){for(var r=0;r<t.length;r+=1)if(t[r].value!==e[r].value||t[r].label!==e[r].label)return!1;return!0}return!1}for(var n=Object.keys(t),o=0;o<n.length;o+=1)if(t[n[o]]!==e[n[o]])return!1;return Object.keys(t).length===Object.keys(e).length}(a,this.options)||(this.options=a,e=!0),e){var l=this.selectInput.value;l&&o(n,m.SELECT)(l)}}},{key:"getOptions",value:function(t){return"function"==typeof t.options?t.options(t.column):t.options}},{key:"getDefaultValue",value:function(){var t=this.props,e=t.filterState,r=t.defaultValue;return e&&void 0!==e.filterVal?e.filterVal:r}},{key:"cleanFiltered",value:function(){var t=void 0!==this.props.defaultValue?this.props.defaultValue:"";this.setState((function(){return{isSelected:""!==t}})),this.selectInput.value=t,this.props.onFilter(this.props.column,m.SELECT)(t)}},{key:"applyFilter",value:function(t){this.selectInput.value=t,this.setState((function(){return{isSelected:""!==t}})),this.props.onFilter(this.props.column,m.SELECT)(t)}},{key:"filter",value:function(t){var e=t.target.value;this.setState((function(){return{isSelected:""!==e}})),this.props.onFilter(this.props.column,m.SELECT)(e)}},{key:"renderOptions",value:function(){var t=[],e=this.options,n=this.props,o=n.placeholder,i=n.column;return n.withoutEmptyOption||t.push(r().createElement("option",{key:"-1",value:""},o||"Select ".concat(i.text,"..."))),Array.isArray(e)?e.forEach((function(e){var n=e.value,o=e.label;return t.push(r().createElement("option",{key:n,value:n},o))})):Object.keys(e).forEach((function(n){return t.push(r().createElement("option",{key:n,value:n},e[n]))})),t}},{key:"render",value:function(){var t=this,e=this.props,n=e.id,o=e.style,i=e.className,a=(e.defaultValue,e.onFilter,e.column),l=(e.options,e.comparator,e.withoutEmptyOption,e.caseSensitive,e.getFilter,e.filterState,k(e,C)),u="filter select-filter form-control ".concat(i," ").concat(this.state.isSelected?"":"placeholder-selected"),c="select-filter-column-".concat(a.dataField).concat(n?"-".concat(n):"");return r().createElement("label",{className:"filter-label",htmlFor:c},r().createElement("span",{className:"sr-only"},"Filter by ",a.text),r().createElement("select",w({},l,{ref:function(e){return t.selectInput=e},id:c,style:o,className:u,onChange:this.filter,onClick:function(t){return t.stopPropagation()},defaultValue:this.getDefaultValue()||""}),this.renderOptions()))}}])&&N(e.prototype,n),o&&N(e,o),Object.defineProperty(e,"prototype",{writable:!1}),a}(e.Component);x.propTypes={onFilter:a().func.isRequired,column:a().object.isRequired,id:a().string,filterState:a().object,options:a().oneOfType([a().object,a().array]).isRequired,comparator:a().oneOf([l,u]),placeholder:a().string,style:a().object,className:a().string,withoutEmptyOption:a().bool,defaultValue:a().any,caseSensitive:a().bool,getFilter:a().func},x.defaultProps={defaultValue:"",filterState:{},className:"",withoutEmptyOption:!1,comparator:u,caseSensitive:!0,id:null};const U=x;function L(t){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},L(t)}var M=["id","style","className","filterState","defaultValue","onFilter","column","options","comparator","withoutEmptyOption","caseSensitive","getFilter"];function B(){return B=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},B.apply(this,arguments)}function I(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}function q(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==L(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==L(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===L(i)?i:String(i)),n)}var o,i}function A(t,e){return A=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},A(t,e)}function W(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Y(t);if(e){var o=Y(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(t,e){if(e&&("object"===L(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return X(t)}(this,r)}}function X(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Y(t){return Y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Y(t)}var G=function(t){if(t.selectedOptions)return Array.from(t.selectedOptions).map((function(t){return t.value}));for(var e=[],r=t.options.length,n=0;n<r;n+=1){var o=t.options.item(n);o.selected&&e.push(o.value)}return e},K=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&A(t,e)}(a,t);var e,n,o,i=W(a);function a(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t)).filter=e.filter.bind(X(e)),e.applyFilter=e.applyFilter.bind(X(e));var r=t.defaultValue.map((function(e){return t.options[e]})).length>0;return e.state={isSelected:r},e}return e=a,(n=[{key:"componentDidMount",value:function(){var t=this,e=this.props.getFilter,r=G(this.selectInput);r&&r.length>0&&this.applyFilter(r),e&&e((function(e){t.selectInput.value=e,t.applyFilter(e)}))}},{key:"componentDidUpdate",value:function(t){var e=!1;this.props.defaultValue!==t.defaultValue?e=!0:function(t,e){for(var r=Object.keys(t),n=0;n<r.length;n+=1)if(t[r[n]]!==e[r[n]])return!1;return Object.keys(t).length===Object.keys(e).length}(this.props.options,t.options)||(e=!0),e&&this.applyFilter(G(this.selectInput))}},{key:"getDefaultValue",value:function(){var t=this.props,e=t.filterState,r=t.defaultValue;return e&&void 0!==e.filterVal?e.filterVal:r}},{key:"getOptions",value:function(){var t=[],e=this.props,n=e.options,o=e.placeholder,i=e.column;return e.withoutEmptyOption||t.push(r().createElement("option",{key:"-1",value:""},o||"Select ".concat(i.text,"..."))),Object.keys(n).forEach((function(e){return t.push(r().createElement("option",{key:e,value:e},n[e]))})),t}},{key:"cleanFiltered",value:function(){var t=void 0!==this.props.defaultValue?this.props.defaultValue:[];this.selectInput.value=t,this.applyFilter(t)}},{key:"applyFilter",value:function(t){1===t.length&&""===t[0]&&(t=[]),this.setState((function(){return{isSelected:t.length>0}})),this.props.onFilter(this.props.column,m.MULTISELECT)(t)}},{key:"filter",value:function(t){var e=G(t.target);this.applyFilter(e)}},{key:"render",value:function(){var t=this,e=this.props,n=e.id,o=e.style,i=e.className,a=(e.filterState,e.defaultValue,e.onFilter,e.column),l=(e.options,e.comparator,e.withoutEmptyOption,e.caseSensitive,e.getFilter,I(e,M)),u="filter select-filter form-control ".concat(i," ").concat(this.state.isSelected?"":"placeholder-selected"),c="multiselect-filter-column-".concat(a.dataField).concat(n?"-".concat(n):"");return r().createElement("label",{className:"filter-label",htmlFor:c},r().createElement("span",{className:"sr-only"},"Filter by ",a.text),r().createElement("select",B({},l,{ref:function(e){return t.selectInput=e},id:c,style:o,multiple:!0,className:u,onChange:this.filter,onClick:function(t){return t.stopPropagation()},defaultValue:this.getDefaultValue()}),this.getOptions()))}}])&&q(e.prototype,n),o&&q(e,o),Object.defineProperty(e,"prototype",{writable:!1}),a}(e.Component);K.propTypes={onFilter:a().func.isRequired,column:a().object.isRequired,options:a().object.isRequired,id:a().string,filterState:a().object,comparator:a().oneOf([l,u]),placeholder:a().string,style:a().object,className:a().string,withoutEmptyOption:a().bool,defaultValue:a().array,caseSensitive:a().bool,getFilter:a().func},K.defaultProps={defaultValue:[],filterState:{},className:"",withoutEmptyOption:!1,comparator:u,caseSensitive:!0,id:null};const H=K;function Q(t){return Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Q(t)}function $(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==Q(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Q(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===Q(i)?i:String(i)),n)}var o,i}function z(t,e){return z=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},z(t,e)}function J(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=tt(t);if(e){var o=tt(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(t,e){if(e&&("object"===Q(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Z(t)}(this,r)}}function Z(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function tt(t){return tt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},tt(t)}var et=[u,c,s,p,f,y],rt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&z(t,e)}(a,t);var e,n,o,i=J(a);function a(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t)).comparators=t.comparators||et,e.timeout=null;var r=void 0!==t.defaultValue&&void 0!==t.defaultValue.number;return t.options&&r&&(r=t.options.indexOf(t.defaultValue.number)>-1),e.state={isSelected:r},e.onChangeNumber=e.onChangeNumber.bind(Z(e)),e.onChangeNumberSet=e.onChangeNumberSet.bind(Z(e)),e.onChangeComparator=e.onChangeComparator.bind(Z(e)),e}return e=a,n=[{key:"componentDidMount",value:function(){var t=this,e=this.props,r=e.column,n=e.onFilter,o=e.getFilter,i=this.numberFilterComparator.value,a=this.numberFilter.value;i&&a&&n(r,m.NUMBER,!0)({number:a,comparator:i}),o&&o((function(e){t.setState((function(){return{isSelected:""!==e}})),t.numberFilterComparator.value=e.comparator,t.numberFilter.value=e.number,n(r,m.NUMBER)({number:e.number,comparator:e.comparator})}))}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeout)}},{key:"onChangeNumber",value:function(t){var e=this.props,r=e.delay,n=e.column,o=e.onFilter,i=this.numberFilterComparator.value;if(""!==i){this.timeout&&clearTimeout(this.timeout);var a=t.target.value;this.timeout=setTimeout((function(){o(n,m.NUMBER)({number:a,comparator:i})}),r)}}},{key:"onChangeNumberSet",value:function(t){var e=this.props,r=e.column,n=e.onFilter,o=this.numberFilterComparator.value,i=t.target.value;this.setState((function(){return{isSelected:""!==i}})),n(r,m.NUMBER)({number:i,comparator:o})}},{key:"onChangeComparator",value:function(t){var e=this.props,r=e.column,n=e.onFilter,o=this.numberFilter.value,i=t.target.value;n(r,m.NUMBER)({number:o,comparator:i})}},{key:"getDefaultComparator",value:function(){var t=this.props,e=t.defaultValue,r=t.filterState;return r&&r.filterVal?r.filterVal.comparator:e&&e.comparator?e.comparator:""}},{key:"getDefaultValue",value:function(){var t=this.props,e=t.defaultValue,r=t.filterState;return r&&r.filterVal?r.filterVal.number:e&&e.number?e.number:""}},{key:"getComparatorOptions",value:function(){var t=[];this.props.withoutEmptyComparatorOption||t.push(r().createElement("option",{key:"-1"}));for(var e=0;e<this.comparators.length;e+=1)t.push(r().createElement("option",{key:e,value:this.comparators[e]},this.comparators[e]));return t}},{key:"getNumberOptions",value:function(){var t=[],e=this.props,n=e.options,o=e.column;e.withoutEmptyNumberOption||t.push(r().createElement("option",{key:"-1",value:""},this.props.placeholder||"Select ".concat(o.text,"...")));for(var i=0;i<n.length;i+=1)t.push(r().createElement("option",{key:i,value:n[i]},n[i]));return t}},{key:"applyFilter",value:function(t){var e=this.props,r=e.column,n=e.onFilter,o=t.number,i=t.comparator;this.setState((function(){return{isSelected:""!==o}})),this.numberFilterComparator.value=i,this.numberFilter.value=o,n(r,m.NUMBER)({number:o,comparator:i})}},{key:"cleanFiltered",value:function(){var t=this.props,e=t.column,r=t.onFilter,n=t.defaultValue,o=n?n.number:"",i=n?n.comparator:"";this.setState((function(){return{isSelected:""!==o}})),this.numberFilterComparator.value=i,this.numberFilter.value=o,r(e,m.NUMBER)({number:o,comparator:i})}},{key:"render",value:function(){var t=this,e=this.state.isSelected,n=this.props,o=n.id,i=n.column,a=n.options,l=n.style,u=n.className,c=n.numberStyle,s=n.numberClassName,p=n.comparatorStyle,f=n.comparatorClassName,y=n.placeholder,m="\n      select-filter \n      number-filter-input \n      form-control \n      ".concat(s," \n      ").concat(e?"":"placeholder-selected","\n    "),b="number-filter-comparator-".concat(i.dataField).concat(o?"-".concat(o):""),d="number-filter-column-".concat(i.dataField).concat(o?"-".concat(o):"");return r().createElement("div",{onClick:function(t){return t.stopPropagation()},className:"filter number-filter ".concat(u),style:l},r().createElement("label",{className:"filter-label",htmlFor:b},r().createElement("span",{className:"sr-only"},"Filter comparator"),r().createElement("select",{ref:function(e){return t.numberFilterComparator=e},style:p,id:b,className:"number-filter-comparator form-control ".concat(f),onChange:this.onChangeComparator,defaultValue:this.getDefaultComparator()},this.getComparatorOptions())),a?r().createElement("label",{className:"filter-label",htmlFor:d},r().createElement("span",{className:"sr-only"},"Select ".concat(i.text)),r().createElement("select",{ref:function(e){return t.numberFilter=e},id:d,style:c,className:m,onChange:this.onChangeNumberSet,defaultValue:this.getDefaultValue()},this.getNumberOptions())):r().createElement("label",{htmlFor:d},r().createElement("span",{className:"sr-only"},"Enter ".concat(i.text)),r().createElement("input",{ref:function(e){return t.numberFilter=e},id:d,type:"number",style:c,className:"number-filter-input form-control ".concat(s),placeholder:y||"Enter ".concat(i.text,"..."),onChange:this.onChangeNumber,defaultValue:this.getDefaultValue()})))}}],n&&$(e.prototype,n),o&&$(e,o),Object.defineProperty(e,"prototype",{writable:!1}),a}(e.Component);rt.propTypes={onFilter:a().func.isRequired,column:a().object.isRequired,id:a().string,filterState:a().object,options:a().arrayOf(a().number),defaultValue:a().shape({number:a().oneOfType([a().string,a().number]),comparator:a().oneOf([].concat(et,[""]))}),delay:a().number,comparators:function(t,e){if(t[e])for(var r=0;r<t[e].length;r+=1){for(var n=!1,o=0;o<et.length;o+=1)if(et[o]===t[e][r]||""===t[e][r]){n=!0;break}if(!n)return new Error("Number comparator provided is not supported.\n          Use only ".concat(et))}},placeholder:a().string,withoutEmptyComparatorOption:a().bool,withoutEmptyNumberOption:a().bool,style:a().object,className:a().string,comparatorStyle:a().object,comparatorClassName:a().string,numberStyle:a().object,numberClassName:a().string,getFilter:a().func},rt.defaultProps={delay:500,options:void 0,defaultValue:{number:void 0,comparator:""},filterState:{},withoutEmptyComparatorOption:!1,withoutEmptyNumberOption:!1,comparators:et,placeholder:void 0,style:void 0,className:"",comparatorStyle:void 0,comparatorClassName:"",numberStyle:void 0,numberClassName:"",id:null};const nt=rt;function ot(t){return ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ot(t)}function it(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==ot(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ot(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===ot(i)?i:String(i)),n)}var o,i}function at(t,e){return at=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},at(t,e)}function lt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=ct(t);if(e){var o=ct(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(t,e){if(e&&("object"===ot(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return ut(t)}(this,r)}}function ut(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ct(t){return ct=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},ct(t)}var st=[u,c,s,p,f,y];function pt(t){return"".concat(t.getUTCFullYear(),"-").concat(("0"+(t.getUTCMonth()+1)).slice(-2),"-").concat(("0"+t.getUTCDate()).slice(-2))}var ft=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&at(t,e)}(a,t);var e,n,o,i=lt(a);function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t)).timeout=null,e.comparators=t.comparators||st,e.applyFilter=e.applyFilter.bind(ut(e)),e.onChangeDate=e.onChangeDate.bind(ut(e)),e.onChangeComparator=e.onChangeComparator.bind(ut(e)),e}return e=a,n=[{key:"componentDidMount",value:function(){var t=this,e=this.props.getFilter,r=this.dateFilterComparator.value,n=this.inputDate.value;r&&n&&this.applyFilter(n,r,!0),e&&e((function(e){var r=e||{date:null,comparator:null};t.dateFilterComparator.value=r.comparator,t.inputDate.value=r.date?pt(r.date):null,t.applyFilter(r.date,r.comparator)}))}},{key:"componentWillUnmount",value:function(){this.timeout&&clearTimeout(this.timeout)}},{key:"onChangeDate",value:function(t){var e=this.dateFilterComparator.value,r=t.target.value;this.applyFilter(r,e)}},{key:"onChangeComparator",value:function(t){var e=this.inputDate.value,r=t.target.value;this.applyFilter(e,r)}},{key:"getComparatorOptions",value:function(){var t=[];this.props.withoutEmptyComparatorOption||t.push(r().createElement("option",{key:"-1"}));for(var e=0;e<this.comparators.length;e+=1)t.push(r().createElement("option",{key:e,value:this.comparators[e]},this.comparators[e]));return t}},{key:"getDefaultComparator",value:function(){var t=this.props,e=t.defaultValue,r=t.filterState;return r&&r.filterVal?r.filterVal.comparator:e&&e.comparator?e.comparator:""}},{key:"getDefaultDate",value:function(){var t=this.props,e=t.defaultValue,r=t.filterState;return r&&r.filterVal&&r.filterVal.date?pt(r.filterVal.date):e&&e.date?pt(new Date(e.date)):""}},{key:"applyFilter",value:function(t,e,r){var n=this.props,o=n.column,i=n.onFilter,a=n.delay,l=function(){var n=""===t?null:new Date(t);i(o,m.DATE,r)({date:n,comparator:e})};a?this.timeout=setTimeout((function(){l()}),a):l()}},{key:"render",value:function(){var t=this,e=this.props,n=e.id,o=e.placeholder,i=e.column,a=i.dataField,l=i.text,u=e.style,c=e.comparatorStyle,s=e.dateStyle,p=e.className,f=e.comparatorClassName,y=e.dateClassName,m="date-filter-comparator-".concat(a).concat(n?"-".concat(n):""),b="date-filter-column-".concat(a).concat(n?"-".concat(n):"");return r().createElement("div",{onClick:function(t){return t.stopPropagation()},className:"filter date-filter ".concat(p),style:u},r().createElement("label",{className:"filter-label",htmlFor:m},r().createElement("span",{className:"sr-only"},"Filter comparator"),r().createElement("select",{ref:function(e){return t.dateFilterComparator=e},id:m,style:c,className:"date-filter-comparator form-control ".concat(f),onChange:this.onChangeComparator,defaultValue:this.getDefaultComparator()},this.getComparatorOptions())),r().createElement("label",{htmlFor:b},r().createElement("span",{className:"sr-only"},"Enter $",l),r().createElement("input",{ref:function(e){return t.inputDate=e},id:b,className:"filter date-filter-input form-control ".concat(y),style:s,type:"date",onChange:this.onChangeDate,placeholder:o||"Enter ".concat(l,"..."),defaultValue:this.getDefaultDate()})))}}],n&&it(e.prototype,n),o&&it(e,o),Object.defineProperty(e,"prototype",{writable:!1}),a}(e.Component);ft.propTypes={onFilter:i.PropTypes.func.isRequired,column:i.PropTypes.object.isRequired,id:i.PropTypes.string,filterState:i.PropTypes.object,delay:i.PropTypes.number,defaultValue:i.PropTypes.shape({date:i.PropTypes.oneOfType([i.PropTypes.object]),comparator:i.PropTypes.oneOf([].concat(st,[""]))}),comparators:function(t,e){if(t[e])for(var r=0;r<t[e].length;r+=1){for(var n=!1,o=0;o<st.length;o+=1)if(st[o]===t[e][r]||""===t[e][r]){n=!0;break}if(!n)return new Error("Date comparator provided is not supported.\n          Use only ".concat(st))}},placeholder:i.PropTypes.string,withoutEmptyComparatorOption:i.PropTypes.bool,style:i.PropTypes.object,comparatorStyle:i.PropTypes.object,dateStyle:i.PropTypes.object,className:i.PropTypes.string,comparatorClassName:i.PropTypes.string,dateClassName:i.PropTypes.string,getFilter:i.PropTypes.func},ft.defaultProps={delay:0,defaultValue:{date:void 0,comparator:""},filterState:{},withoutEmptyComparatorOption:!1,comparators:st,placeholder:void 0,style:void 0,className:"",comparatorStyle:void 0,comparatorClassName:"",dateStyle:void 0,dateClassName:"",id:null};const yt=ft;function mt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function bt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?mt(Object(r),!0).forEach((function(e){dt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):mt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function dt(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==ht(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ht(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ht(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function ht(t){return ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ht(t)}var vt=function(t){return function(e){switch(e){case m.MULTISELECT:return function(t){return function(e,r,n){var o=n.filterVal,i=n.comparator;if(0===o.length)return e;var a=o.filter((function(e){return t.isDefined(e)})).map((function(t){return t.toString()}));return e.filter((function(e){var n=t.get(e,r),o=t.isDefined(n)?n.toString():"";return i===u?-1!==a.indexOf(o):(o=o.toLocaleUpperCase(),a.some((function(t){return-1!==o.indexOf(t.toLocaleUpperCase())})))}))}}(t);case m.NUMBER:return function(t){return function(e,r,n,o){var i=n.filterVal,a=i.comparator,l=i.number;return e.filter((function(e){if(""===l||!a)return!0;var n=t.get(e,r);switch(o&&(n=o(n,e)),a){case u:return n==l;case s:return n>l;case p:return n>=l;case f:return n<l;case y:return n<=l;case c:return n!=l;default:return console.error("Number comparator provided is not supported"),!0}}))}}(t);case m.DATE:return function(t){return function(e,r,n,o){var i=n.filterVal,a=i.comparator,l=i.date;if(!l||!a)return e;var m=l.getUTCDate(),b=l.getUTCMonth(),d=l.getUTCFullYear();return e.filter((function(e){var n=!0,i=t.get(e,r);o&&(i=o(i,e)),"object"!==ht(i)&&(i=new Date(i));var h=i.getUTCDate(),v=i.getUTCMonth(),g=i.getUTCFullYear();switch(a){case u:m===h&&b===v&&d===g||(n=!1);break;case s:i<=l&&(n=!1);break;case p:(g<d||g===d&&v<b||g===d&&v===b&&h<m)&&(n=!1);break;case f:i>=l&&(n=!1);break;case y:(g>d||g===d&&v>b||g===d&&v===b&&h>m)&&(n=!1);break;case c:m===h&&b===v&&d===g&&(n=!1);break;default:console.error("Date comparator provided is not supported")}return n}))}}(t);case m.TEXT:case m.SELECT:default:return function(t){return function(e,r,n,o){var i=n.filterVal,a=void 0===i?"":i,c=n.comparator,s=void 0===c?l:c,p=n.caseSensitive,f=a.toString();return e.filter((function(e){var n=t.get(e,r);o&&(n=o(n,e));var i=t.isDefined(n)?n.toString():"";return s===u?i===f:p?i.includes(f):-1!==i.toLocaleUpperCase().indexOf(f.toLocaleUpperCase())}))}}(t)}}},gt=function(t,e,r){return function(n){var o,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=vt(r),l=bt(bt({},i),n),u=t;return Object.keys(l).forEach((function(t){for(var r,n,c,s=0;s<e.length;s+=1)if(e[s].dataField===t){n=e[s].filterValue,e[s].filter&&(c=e[s].filter.props.onFilter);break}if(i[t]&&c)void 0!==(r=c(i[t].filterVal,u))&&(u=r);else{var p=l[t];o=a(p.filterType),c&&(r=c(p.filterVal,u)),u=void 0===r?o(u,t,p,n):r}})),u}};function Ot(t){return Ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ot(t)}function St(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Ct(n.key),n)}}function Et(t,e){return Et=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Et(t,e)}function Ft(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Pt(t);if(e){var o=Pt(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(t,e){if(e&&("object"===Ot(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return jt(t)}(this,r)}}function jt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Pt(t){return Pt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Pt(t)}function Tt(t,e,r){return(e=Ct(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Ct(t){var e=function(t,e){if("object"!==Ot(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Ot(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Ot(e)?e:String(e)}const wt=function(t,e,n){var o=r().createContext(),i=function(i){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Et(t,e)}(f,i);var a,c,s,p=Ft(f);function f(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,f),(e=p.call(this,t)).currFilters={},e.clearFilters={},e.onFilter=e.onFilter.bind(jt(e)),e.doFilter=e.doFilter.bind(jt(e)),e.onExternalFilter=e.onExternalFilter.bind(jt(e)),e.data=t.data,e.isEmitDataChange=!1,e}return a=f,c=[{key:"componentDidMount",value:function(){e()&&Object.keys(this.currFilters).length>0&&n(this.currFilters)}},{key:"onFilter",value:function(r,o){var i=this,a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(c){var s=Object.assign({},i.currFilters);i.clearFilters={};var p=r.dataField,f=r.filter;if(t.isDefined(c)&&""!==c&&0!==c.length){var y=f.props,b=y.comparator,d=void 0===b?o===m.SELECT?u:l:b,h=y.caseSensitive,v=void 0!==h&&h;s[p]={filterVal:c,filterType:o,comparator:d,caseSensitive:v}}else delete s[p],i.clearFilters=Tt({},p,{clear:!0,filterVal:c});i.currFilters=s,e()?a||n(i.currFilters):i.doFilter(i.props)}}},{key:"onExternalFilter",value:function(t,e){var r=this;return function(n){r.onFilter(t,e)(n)}}},{key:"getFiltered",value:function(){return this.data}},{key:"UNSAFE_componentWillReceiveProps",value:function(r){e()||t.isEqual(r.data,this.data)?this.data=r.data:this.doFilter(r,this.isEmitDataChange)}},{key:"doFilter",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.dataChangeListener,o=e.data,i=e.columns,a=e.filter,l=gt(o,i,t)(this.currFilters,this.clearFilters);a.afterFilter&&a.afterFilter(l,this.currFilters),this.data=l,n&&!r?(this.isEmitDataChange=!0,n.emit("filterChanged",l.length)):(this.isEmitDataChange=!1,this.forceUpdate())}},{key:"render",value:function(){return r().createElement(o.Provider,{value:{data:this.data,onFilter:this.onFilter,onExternalFilter:this.onExternalFilter,currFilters:this.currFilters}},this.props.children)}}],c&&St(a.prototype,c),s&&St(a,s),Object.defineProperty(a,"prototype",{writable:!1}),f}(r().Component);return Tt(i,"propTypes",{data:a().array.isRequired,columns:a().array.isRequired,dataChangeListener:a().object}),{Provider:i,Consumer:o.Consumer}},kt=function(){return{createContext:wt,options:arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}}};var Nt=m,Vt=t,Rt=function(){return{Filter:P,props:arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}}},Dt=function(){return{Filter:U,props:arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}}},_t=function(){return{Filter:H,props:arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}}},xt=function(){return{Filter:nt,props:arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}}},Ut=function(){return{Filter:yt,props:arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}}},Lt=function(){return{props:arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}}}})(),o})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,