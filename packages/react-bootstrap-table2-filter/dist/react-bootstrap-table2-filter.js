!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports.ReactBootstrapTable2Filter=e(require("react")):t.ReactBootstrapTable2Filter=e(t.React)}(self,(function(t){return(()=>{var e={703:(t,e,r)=>{"use strict";var o=r(414);function n(){}function a(){}a.resetWarningCache=n,t.exports=function(){function t(t,e,r,n,a,i){if(i!==o){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function e(){return t}t.isRequired=t;var r={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:a,resetWarningCache:n};return r.PropTypes=r,r}},697:(t,e,r)=>{t.exports=r(703)()},414:t=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},787:e=>{"use strict";e.exports=t}},r={};function o(t){var n=r[t];if(void 0!==n)return n.exports;var a=r[t]={exports:{}};return e[t](a,a.exports,o),a.exports}o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{"use strict";o.r(n),o.d(n,{Comparator:()=>Ut,FILTER_TYPES:()=>xt,customFilter:()=>At,dateFilter:()=>qt,default:()=>_t,multiSelectFilter:()=>Bt,numberFilter:()=>It,selectFilter:()=>Mt,textFilter:()=>Lt});var t={};o.r(t),o.d(t,{EQ:()=>u,GE:()=>p,GT:()=>s,LE:()=>y,LIKE:()=>l,LT:()=>f,NE:()=>c});var e=o(787),r=o.n(e),a=o(697),i=o.n(a),l="LIKE",u="=",c="!=",s=">",p=">=",f="<",y="<=",m={TEXT:"TEXT",SELECT:"SELECT",MULTISELECT:"MULTISELECT",NUMBER:"NUMBER",DATE:"DATE"};function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}var d=["id","placeholder","column","style","className","onFilter","caseSensitive","defaultValue","getFilter","filterState"];function b(){return b=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o])}return t},b.apply(this,arguments)}function v(t,e){if(null==t)return{};var r,o,n=function(t,e){if(null==t)return{};var r,o,n={},a=Object.keys(t);for(o=0;o<a.length;o++)r=a[o],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)r=a[o],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}function g(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function O(t,e){return O=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},O(t,e)}function E(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,o=C(t);if(e){var n=C(this).constructor;r=Reflect.construct(o,arguments,n)}else r=o.apply(this,arguments);return S(this,r)}}function S(t,e){if(e&&("object"===h(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return F(t)}function F(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function C(t){return C=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},C(t)}var j=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&O(t,e)}(i,t);var e,o,n,a=E(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=a.call(this,t)).filter=e.filter.bind(F(e)),e.handleClick=e.handleClick.bind(F(e)),e.timeout=null,e.state={value:t.filterState&&void 0!==t.filterState.filterVal?t.filterState.filterVal:t.defaultValue},e}return e=i,(o=[{key:"componentDidMount",value:function(){var t=this,e=this.props,r=e.onFilter,o=e.getFilter,n=e.column,a=this.input.value;a&&r(this.props.column,m.TEXT,!0)(a),o&&o((function(e){t.setState((function(){return{value:e}})),r(n,m.TEXT)(e)}))}},{key:"componentWillUnmount",value:function(){this.cleanTimer()}},{key:"UNSAFE_componentWillReceiveProps",value:function(t){t.defaultValue!==this.props.defaultValue&&this.applyFilter(t.defaultValue)}},{key:"filter",value:function(t){var e=this;t.stopPropagation(),this.cleanTimer();var r=t.target.value;this.setState((function(){return{value:r}})),this.timeout=setTimeout((function(){e.props.onFilter(e.props.column,m.TEXT)(r)}),this.props.delay)}},{key:"cleanTimer",value:function(){this.timeout&&clearTimeout(this.timeout)}},{key:"cleanFiltered",value:function(){var t=this.props.defaultValue;this.setState((function(){return{value:t}})),this.props.onFilter(this.props.column,m.TEXT)(t)}},{key:"applyFilter",value:function(t){this.setState((function(){return{value:t}})),this.props.onFilter(this.props.column,m.TEXT)(t)}},{key:"handleClick",value:function(t){t.stopPropagation(),this.props.onClick&&this.props.onClick(t)}},{key:"render",value:function(){var t=this,e=this.props,o=e.id,n=e.placeholder,a=e.column,i=a.dataField,l=a.text,u=e.style,c=e.className,s=(e.onFilter,e.caseSensitive,e.defaultValue,e.getFilter,e.filterState,v(e,d)),p="text-filter-column-".concat(i).concat(o?"-".concat(o):"");return r().createElement("label",{className:"filter-label",htmlFor:p},r().createElement("span",{className:"sr-only"},"Filter by ",l),r().createElement("input",b({},s,{ref:function(e){return t.input=e},type:"text",id:p,className:"filter text-filter form-control ".concat(c),style:u,onChange:this.filter,onClick:this.handleClick,placeholder:n||"Enter ".concat(l,"..."),value:this.state.value})))}}])&&g(e.prototype,o),n&&g(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(e.Component);j.propTypes={onFilter:a.PropTypes.func.isRequired,column:a.PropTypes.object.isRequired,id:a.PropTypes.string,filterState:a.PropTypes.object,comparator:a.PropTypes.oneOf([l,u]),defaultValue:a.PropTypes.string,delay:a.PropTypes.number,placeholder:a.PropTypes.string,style:a.PropTypes.object,className:a.PropTypes.string,caseSensitive:a.PropTypes.bool,getFilter:a.PropTypes.func},j.defaultProps={delay:500,filterState:{},defaultValue:"",caseSensitive:!1,id:null};const T=j;function P(t){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},P(t)}var w=["id","style","className","defaultValue","onFilter","column","options","comparator","withoutEmptyOption","caseSensitive","getFilter","filterState"];function k(){return k=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o])}return t},k.apply(this,arguments)}function N(t,e){if(null==t)return{};var r,o,n=function(t,e){if(null==t)return{};var r,o,n={},a=Object.keys(t);for(o=0;o<a.length;o++)r=a[o],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)r=a[o],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}function V(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function R(t,e){return R=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},R(t,e)}function D(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,o=U(t);if(e){var n=U(this).constructor;r=Reflect.construct(o,arguments,n)}else r=o.apply(this,arguments);return _(this,r)}}function _(t,e){if(e&&("object"===P(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return x(t)}function x(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function U(t){return U=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},U(t)}var L=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&R(t,e)}(i,t);var e,o,n,a=D(i);function i(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=a.call(this,t)).filter=e.filter.bind(x(e)),e.options=e.getOptions(t);var r,o,n=void 0!==(r=e.options,o=e.getDefaultValue(),Array.isArray(r)?r.filter((function(t){return t.label===o})).map((function(t){return t.value}))[0]:r[o]);return e.state={isSelected:n},e}return e=i,(o=[{key:"componentDidMount",value:function(){var t=this,e=this.props,r=e.column,o=e.onFilter,n=e.getFilter,a=this.selectInput.value;a&&""!==a&&o(r,m.SELECT,!0)(a),n&&n((function(e){t.setState((function(){return{isSelected:""!==e}})),t.selectInput.value=e,o(r,m.SELECT)(e)}))}},{key:"componentDidUpdate",value:function(t){var e=!1,r=this.props,o=r.column,n=r.onFilter,a=r.defaultValue,i=this.getOptions(this.props);if(a!==t.defaultValue?e=!0:function(t,e){if(Array.isArray(t)){if(t.length===e.length){for(var r=0;r<t.length;r+=1)if(t[r].value!==e[r].value||t[r].label!==e[r].label)return!1;return!0}return!1}for(var o=Object.keys(t),n=0;n<o.length;n+=1)if(t[o[n]]!==e[o[n]])return!1;return Object.keys(t).length===Object.keys(e).length}(i,this.options)||(this.options=i,e=!0),e){var l=this.selectInput.value;l&&n(o,m.SELECT)(l)}}},{key:"getOptions",value:function(t){return"function"==typeof t.options?t.options(t.column):t.options}},{key:"getDefaultValue",value:function(){var t=this.props,e=t.filterState,r=t.defaultValue;return e&&void 0!==e.filterVal?e.filterVal:r}},{key:"cleanFiltered",value:function(){var t=void 0!==this.props.defaultValue?this.props.defaultValue:"";this.setState((function(){return{isSelected:""!==t}})),this.selectInput.value=t,this.props.onFilter(this.props.column,m.SELECT)(t)}},{key:"applyFilter",value:function(t){this.selectInput.value=t,this.setState((function(){return{isSelected:""!==t}})),this.props.onFilter(this.props.column,m.SELECT)(t)}},{key:"filter",value:function(t){var e=t.target.value;this.setState((function(){return{isSelected:""!==e}})),this.props.onFilter(this.props.column,m.SELECT)(e)}},{key:"renderOptions",value:function(){var t=[],e=this.options,o=this.props,n=o.placeholder,a=o.column;return o.withoutEmptyOption||t.push(r().createElement("option",{key:"-1",value:""},n||"Select ".concat(a.text,"..."))),Array.isArray(e)?e.forEach((function(e){var o=e.value,n=e.label;return t.push(r().createElement("option",{key:o,value:o},n))})):Object.keys(e).forEach((function(o){return t.push(r().createElement("option",{key:o,value:o},e[o]))})),t}},{key:"render",value:function(){var t=this,e=this.props,o=e.id,n=e.style,a=e.className,i=(e.defaultValue,e.onFilter,e.column),l=(e.options,e.comparator,e.withoutEmptyOption,e.caseSensitive,e.getFilter,e.filterState,N(e,w)),u="filter select-filter form-control ".concat(a," ").concat(this.state.isSelected?"":"placeholder-selected"),c="select-filter-column-".concat(i.dataField).concat(o?"-".concat(o):"");return r().createElement("label",{className:"filter-label",htmlFor:c},r().createElement("span",{className:"sr-only"},"Filter by ",i.text),r().createElement("select",k({},l,{ref:function(e){return t.selectInput=e},id:c,style:n,className:u,onChange:this.filter,onClick:function(t){return t.stopPropagation()},defaultValue:this.getDefaultValue()||""}),this.renderOptions()))}}])&&V(e.prototype,o),n&&V(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(e.Component);L.propTypes={onFilter:i().func.isRequired,column:i().object.isRequired,id:i().string,filterState:i().object,options:i().oneOfType([i().object,i().array]).isRequired,comparator:i().oneOf([l,u]),placeholder:i().string,style:i().object,className:i().string,withoutEmptyOption:i().bool,defaultValue:i().any,caseSensitive:i().bool,getFilter:i().func},L.defaultProps={defaultValue:"",filterState:{},className:"",withoutEmptyOption:!1,comparator:u,caseSensitive:!0,id:null};const M=L;function B(t){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},B(t)}var I=["id","style","className","filterState","defaultValue","onFilter","column","options","comparator","withoutEmptyOption","caseSensitive","getFilter"];function q(){return q=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o])}return t},q.apply(this,arguments)}function A(t,e){if(null==t)return{};var r,o,n=function(t,e){if(null==t)return{};var r,o,n={},a=Object.keys(t);for(o=0;o<a.length;o++)r=a[o],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)r=a[o],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}function W(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function X(t,e){return X=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},X(t,e)}function Y(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,o=H(t);if(e){var n=H(this).constructor;r=Reflect.construct(o,arguments,n)}else r=o.apply(this,arguments);return G(this,r)}}function G(t,e){if(e&&("object"===B(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return K(t)}function K(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function H(t){return H=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},H(t)}var Q=function(t){if(t.selectedOptions)return Array.from(t.selectedOptions).map((function(t){return t.value}));for(var e=[],r=t.options.length,o=0;o<r;o+=1){var n=t.options.item(o);n.selected&&e.push(n.value)}return e},$=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&X(t,e)}(i,t);var e,o,n,a=Y(i);function i(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=a.call(this,t)).filter=e.filter.bind(K(e)),e.applyFilter=e.applyFilter.bind(K(e));var r=t.defaultValue.map((function(e){return t.options[e]})).length>0;return e.state={isSelected:r},e}return e=i,(o=[{key:"componentDidMount",value:function(){var t=this,e=this.props.getFilter,r=Q(this.selectInput);r&&r.length>0&&this.applyFilter(r),e&&e((function(e){t.selectInput.value=e,t.applyFilter(e)}))}},{key:"componentDidUpdate",value:function(t){var e=!1;this.props.defaultValue!==t.defaultValue?e=!0:function(t,e){for(var r=Object.keys(t),o=0;o<r.length;o+=1)if(t[r[o]]!==e[r[o]])return!1;return Object.keys(t).length===Object.keys(e).length}(this.props.options,t.options)||(e=!0),e&&this.applyFilter(Q(this.selectInput))}},{key:"getDefaultValue",value:function(){var t=this.props,e=t.filterState,r=t.defaultValue;return e&&void 0!==e.filterVal?e.filterVal:r}},{key:"getOptions",value:function(){var t=[],e=this.props,o=e.options,n=e.placeholder,a=e.column;return e.withoutEmptyOption||t.push(r().createElement("option",{key:"-1",value:""},n||"Select ".concat(a.text,"..."))),Object.keys(o).forEach((function(e){return t.push(r().createElement("option",{key:e,value:e},o[e]))})),t}},{key:"cleanFiltered",value:function(){var t=void 0!==this.props.defaultValue?this.props.defaultValue:[];this.selectInput.value=t,this.applyFilter(t)}},{key:"applyFilter",value:function(t){1===t.length&&""===t[0]&&(t=[]),this.setState((function(){return{isSelected:t.length>0}})),this.props.onFilter(this.props.column,m.MULTISELECT)(t)}},{key:"filter",value:function(t){var e=Q(t.target);this.applyFilter(e)}},{key:"render",value:function(){var t=this,e=this.props,o=e.id,n=e.style,a=e.className,i=(e.filterState,e.defaultValue,e.onFilter,e.column),l=(e.options,e.comparator,e.withoutEmptyOption,e.caseSensitive,e.getFilter,A(e,I)),u="filter select-filter form-control ".concat(a," ").concat(this.state.isSelected?"":"placeholder-selected"),c="multiselect-filter-column-".concat(i.dataField).concat(o?"-".concat(o):"");return r().createElement("label",{className:"filter-label",htmlFor:c},r().createElement("span",{className:"sr-only"},"Filter by ",i.text),r().createElement("select",q({},l,{ref:function(e){return t.selectInput=e},id:c,style:n,multiple:!0,className:u,onChange:this.filter,onClick:function(t){return t.stopPropagation()},defaultValue:this.getDefaultValue()}),this.getOptions()))}}])&&W(e.prototype,o),n&&W(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(e.Component);$.propTypes={onFilter:i().func.isRequired,column:i().object.isRequired,options:i().object.isRequired,id:i().string,filterState:i().object,comparator:i().oneOf([l,u]),placeholder:i().string,style:i().object,className:i().string,withoutEmptyOption:i().bool,defaultValue:i().array,caseSensitive:i().bool,getFilter:i().func},$.defaultProps={defaultValue:[],filterState:{},className:"",withoutEmptyOption:!1,comparator:u,caseSensitive:!0,id:null};const z=$;function J(t){return J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},J(t)}function Z(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function tt(t,e){return tt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},tt(t,e)}function et(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,o=nt(t);if(e){var n=nt(this).constructor;r=Reflect.construct(o,arguments,n)}else r=o.apply(this,arguments);return rt(this,r)}}function rt(t,e){if(e&&("object"===J(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return ot(t)}function ot(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function nt(t){return nt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},nt(t)}var at=[u,c,s,p,f,y],it=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&tt(t,e)}(i,t);var e,o,n,a=et(i);function i(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=a.call(this,t)).comparators=t.comparators||at,e.timeout=null;var r=void 0!==t.defaultValue&&void 0!==t.defaultValue.number;return t.options&&r&&(r=t.options.indexOf(t.defaultValue.number)>-1),e.state={isSelected:r},e.onChangeNumber=e.onChangeNumber.bind(ot(e)),e.onChangeNumberSet=e.onChangeNumberSet.bind(ot(e)),e.onChangeComparator=e.onChangeComparator.bind(ot(e)),e}return e=i,o=[{key:"componentDidMount",value:function(){var t=this,e=this.props,r=e.column,o=e.onFilter,n=e.getFilter,a=this.numberFilterComparator.value,i=this.numberFilter.value;a&&i&&o(r,m.NUMBER,!0)({number:i,comparator:a}),n&&n((function(e){t.setState((function(){return{isSelected:""!==e}})),t.numberFilterComparator.value=e.comparator,t.numberFilter.value=e.number,o(r,m.NUMBER)({number:e.number,comparator:e.comparator})}))}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeout)}},{key:"onChangeNumber",value:function(t){var e=this.props,r=e.delay,o=e.column,n=e.onFilter,a=this.numberFilterComparator.value;if(""!==a){this.timeout&&clearTimeout(this.timeout);var i=t.target.value;this.timeout=setTimeout((function(){n(o,m.NUMBER)({number:i,comparator:a})}),r)}}},{key:"onChangeNumberSet",value:function(t){var e=this.props,r=e.column,o=e.onFilter,n=this.numberFilterComparator.value,a=t.target.value;this.setState((function(){return{isSelected:""!==a}})),o(r,m.NUMBER)({number:a,comparator:n})}},{key:"onChangeComparator",value:function(t){var e=this.props,r=e.column,o=e.onFilter,n=this.numberFilter.value,a=t.target.value;o(r,m.NUMBER)({number:n,comparator:a})}},{key:"getDefaultComparator",value:function(){var t=this.props,e=t.defaultValue,r=t.filterState;return r&&r.filterVal?r.filterVal.comparator:e&&e.comparator?e.comparator:""}},{key:"getDefaultValue",value:function(){var t=this.props,e=t.defaultValue,r=t.filterState;return r&&r.filterVal?r.filterVal.number:e&&e.number?e.number:""}},{key:"getComparatorOptions",value:function(){var t=[];this.props.withoutEmptyComparatorOption||t.push(r().createElement("option",{key:"-1"}));for(var e=0;e<this.comparators.length;e+=1)t.push(r().createElement("option",{key:e,value:this.comparators[e]},this.comparators[e]));return t}},{key:"getNumberOptions",value:function(){var t=[],e=this.props,o=e.options,n=e.column;e.withoutEmptyNumberOption||t.push(r().createElement("option",{key:"-1",value:""},this.props.placeholder||"Select ".concat(n.text,"...")));for(var a=0;a<o.length;a+=1)t.push(r().createElement("option",{key:a,value:o[a]},o[a]));return t}},{key:"applyFilter",value:function(t){var e=this.props,r=e.column,o=e.onFilter,n=t.number,a=t.comparator;this.setState((function(){return{isSelected:""!==n}})),this.numberFilterComparator.value=a,this.numberFilter.value=n,o(r,m.NUMBER)({number:n,comparator:a})}},{key:"cleanFiltered",value:function(){var t=this.props,e=t.column,r=t.onFilter,o=t.defaultValue,n=o?o.number:"",a=o?o.comparator:"";this.setState((function(){return{isSelected:""!==n}})),this.numberFilterComparator.value=a,this.numberFilter.value=n,r(e,m.NUMBER)({number:n,comparator:a})}},{key:"render",value:function(){var t=this,e=this.state.isSelected,o=this.props,n=o.id,a=o.column,i=o.options,l=o.style,u=o.className,c=o.numberStyle,s=o.numberClassName,p=o.comparatorStyle,f=o.comparatorClassName,y=o.placeholder,m="\n      select-filter \n      number-filter-input \n      form-control \n      ".concat(s," \n      ").concat(e?"":"placeholder-selected","\n    "),h="number-filter-comparator-".concat(a.dataField).concat(n?"-".concat(n):""),d="number-filter-column-".concat(a.dataField).concat(n?"-".concat(n):"");return r().createElement("div",{onClick:function(t){return t.stopPropagation()},className:"filter number-filter ".concat(u),style:l},r().createElement("label",{className:"filter-label",htmlFor:h},r().createElement("span",{className:"sr-only"},"Filter comparator"),r().createElement("select",{ref:function(e){return t.numberFilterComparator=e},style:p,id:h,className:"number-filter-comparator form-control ".concat(f),onChange:this.onChangeComparator,defaultValue:this.getDefaultComparator()},this.getComparatorOptions())),i?r().createElement("label",{className:"filter-label",htmlFor:d},r().createElement("span",{className:"sr-only"},"Select ".concat(a.text)),r().createElement("select",{ref:function(e){return t.numberFilter=e},id:d,style:c,className:m,onChange:this.onChangeNumberSet,defaultValue:this.getDefaultValue()},this.getNumberOptions())):r().createElement("label",{htmlFor:d},r().createElement("span",{className:"sr-only"},"Enter ".concat(a.text)),r().createElement("input",{ref:function(e){return t.numberFilter=e},id:d,type:"number",style:c,className:"number-filter-input form-control ".concat(s),placeholder:y||"Enter ".concat(a.text,"..."),onChange:this.onChangeNumber,defaultValue:this.getDefaultValue()})))}}],o&&Z(e.prototype,o),n&&Z(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(e.Component);it.propTypes={onFilter:i().func.isRequired,column:i().object.isRequired,id:i().string,filterState:i().object,options:i().arrayOf(i().number),defaultValue:i().shape({number:i().oneOfType([i().string,i().number]),comparator:i().oneOf([].concat(at,[""]))}),delay:i().number,comparators:function(t,e){if(t[e])for(var r=0;r<t[e].length;r+=1){for(var o=!1,n=0;n<at.length;n+=1)if(at[n]===t[e][r]||""===t[e][r]){o=!0;break}if(!o)return new Error("Number comparator provided is not supported.\n          Use only ".concat(at))}},placeholder:i().string,withoutEmptyComparatorOption:i().bool,withoutEmptyNumberOption:i().bool,style:i().object,className:i().string,comparatorStyle:i().object,comparatorClassName:i().string,numberStyle:i().object,numberClassName:i().string,getFilter:i().func},it.defaultProps={delay:500,options:void 0,defaultValue:{number:void 0,comparator:""},filterState:{},withoutEmptyComparatorOption:!1,withoutEmptyNumberOption:!1,comparators:at,placeholder:void 0,style:void 0,className:"",comparatorStyle:void 0,comparatorClassName:"",numberStyle:void 0,numberClassName:"",id:null};const lt=it;function ut(t){return ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ut(t)}function ct(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function st(t,e){return st=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},st(t,e)}function pt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,o=mt(t);if(e){var n=mt(this).constructor;r=Reflect.construct(o,arguments,n)}else r=o.apply(this,arguments);return ft(this,r)}}function ft(t,e){if(e&&("object"===ut(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return yt(t)}function yt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function mt(t){return mt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},mt(t)}var ht=[u,c,s,p,f,y];function dt(t){return"".concat(t.getUTCFullYear(),"-").concat(("0"+(t.getUTCMonth()+1)).slice(-2),"-").concat(("0"+t.getUTCDate()).slice(-2))}var bt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&st(t,e)}(i,t);var e,o,n,a=pt(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=a.call(this,t)).timeout=null,e.comparators=t.comparators||ht,e.applyFilter=e.applyFilter.bind(yt(e)),e.onChangeDate=e.onChangeDate.bind(yt(e)),e.onChangeComparator=e.onChangeComparator.bind(yt(e)),e}return e=i,o=[{key:"componentDidMount",value:function(){var t=this,e=this.props.getFilter,r=this.dateFilterComparator.value,o=this.inputDate.value;r&&o&&this.applyFilter(o,r,!0),e&&e((function(e){var r=e||{date:null,comparator:null};t.dateFilterComparator.value=r.comparator,t.inputDate.value=r.date?dt(r.date):null,t.applyFilter(r.date,r.comparator)}))}},{key:"componentWillUnmount",value:function(){this.timeout&&clearTimeout(this.timeout)}},{key:"onChangeDate",value:function(t){var e=this.dateFilterComparator.value,r=t.target.value;this.applyFilter(r,e)}},{key:"onChangeComparator",value:function(t){var e=this.inputDate.value,r=t.target.value;this.applyFilter(e,r)}},{key:"getComparatorOptions",value:function(){var t=[];this.props.withoutEmptyComparatorOption||t.push(r().createElement("option",{key:"-1"}));for(var e=0;e<this.comparators.length;e+=1)t.push(r().createElement("option",{key:e,value:this.comparators[e]},this.comparators[e]));return t}},{key:"getDefaultComparator",value:function(){var t=this.props,e=t.defaultValue,r=t.filterState;return r&&r.filterVal?r.filterVal.comparator:e&&e.comparator?e.comparator:""}},{key:"getDefaultDate",value:function(){var t=this.props,e=t.defaultValue,r=t.filterState;return r&&r.filterVal&&r.filterVal.date?dt(r.filterVal.date):e&&e.date?dt(new Date(e.date)):""}},{key:"applyFilter",value:function(t,e,r){var o=this.props,n=o.column,a=o.onFilter,i=o.delay,l=function(){var o=""===t?null:new Date(t);a(n,m.DATE,r)({date:o,comparator:e})};i?this.timeout=setTimeout((function(){l()}),i):l()}},{key:"render",value:function(){var t=this,e=this.props,o=e.id,n=e.placeholder,a=e.column,i=a.dataField,l=a.text,u=e.style,c=e.comparatorStyle,s=e.dateStyle,p=e.className,f=e.comparatorClassName,y=e.dateClassName,m="date-filter-comparator-".concat(i).concat(o?"-".concat(o):""),h="date-filter-column-".concat(i).concat(o?"-".concat(o):"");return r().createElement("div",{onClick:function(t){return t.stopPropagation()},className:"filter date-filter ".concat(p),style:u},r().createElement("label",{className:"filter-label",htmlFor:m},r().createElement("span",{className:"sr-only"},"Filter comparator"),r().createElement("select",{ref:function(e){return t.dateFilterComparator=e},id:m,style:c,className:"date-filter-comparator form-control ".concat(f),onChange:this.onChangeComparator,defaultValue:this.getDefaultComparator()},this.getComparatorOptions())),r().createElement("label",{htmlFor:h},r().createElement("span",{className:"sr-only"},"Enter $",l),r().createElement("input",{ref:function(e){return t.inputDate=e},id:h,className:"filter date-filter-input form-control ".concat(y),style:s,type:"date",onChange:this.onChangeDate,placeholder:n||"Enter ".concat(l,"..."),defaultValue:this.getDefaultDate()})))}}],o&&ct(e.prototype,o),n&&ct(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(e.Component);bt.propTypes={onFilter:a.PropTypes.func.isRequired,column:a.PropTypes.object.isRequired,id:a.PropTypes.string,filterState:a.PropTypes.object,delay:a.PropTypes.number,defaultValue:a.PropTypes.shape({date:a.PropTypes.oneOfType([a.PropTypes.object]),comparator:a.PropTypes.oneOf([].concat(ht,[""]))}),comparators:function(t,e){if(t[e])for(var r=0;r<t[e].length;r+=1){for(var o=!1,n=0;n<ht.length;n+=1)if(ht[n]===t[e][r]||""===t[e][r]){o=!0;break}if(!o)return new Error("Date comparator provided is not supported.\n          Use only ".concat(ht))}},placeholder:a.PropTypes.string,withoutEmptyComparatorOption:a.PropTypes.bool,style:a.PropTypes.object,comparatorStyle:a.PropTypes.object,dateStyle:a.PropTypes.object,className:a.PropTypes.string,comparatorClassName:a.PropTypes.string,dateClassName:a.PropTypes.string,getFilter:a.PropTypes.func},bt.defaultProps={delay:0,defaultValue:{date:void 0,comparator:""},filterState:{},withoutEmptyComparatorOption:!1,comparators:ht,placeholder:void 0,style:void 0,className:"",comparatorStyle:void 0,comparatorClassName:"",dateStyle:void 0,dateClassName:"",id:null};const vt=bt;function gt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,o)}return r}function Ot(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?gt(Object(r),!0).forEach((function(e){Et(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):gt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Et(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function St(t){return St="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},St(t)}var Ft=function(t){return function(e){switch(e){case m.MULTISELECT:return function(t){return function(e,r,o){var n=o.filterVal,a=o.comparator;if(0===n.length)return e;var i=n.filter((function(e){return t.isDefined(e)})).map((function(t){return t.toString()}));return e.filter((function(e){var o=t.get(e,r),n=t.isDefined(o)?o.toString():"";return a===u?-1!==i.indexOf(n):(n=n.toLocaleUpperCase(),i.some((function(t){return-1!==n.indexOf(t.toLocaleUpperCase())})))}))}}(t);case m.NUMBER:return function(t){return function(e,r,o,n){var a=o.filterVal,i=a.comparator,l=a.number;return e.filter((function(e){if(""===l||!i)return!0;var o=t.get(e,r);switch(n&&(o=n(o,e)),i){case u:return o==l;case s:return o>l;case p:return o>=l;case f:return o<l;case y:return o<=l;case c:return o!=l;default:return console.error("Number comparator provided is not supported"),!0}}))}}(t);case m.DATE:return function(t){return function(e,r,o,n){var a=o.filterVal,i=a.comparator,l=a.date;if(!l||!i)return e;var m=l.getUTCDate(),h=l.getUTCMonth(),d=l.getUTCFullYear();return e.filter((function(e){var o=!0,a=t.get(e,r);n&&(a=n(a,e)),"object"!==St(a)&&(a=new Date(a));var b=a.getUTCDate(),v=a.getUTCMonth(),g=a.getUTCFullYear();switch(i){case u:m===b&&h===v&&d===g||(o=!1);break;case s:a<=l&&(o=!1);break;case p:(g<d||g===d&&v<h||g===d&&v===h&&b<m)&&(o=!1);break;case f:a>=l&&(o=!1);break;case y:(g>d||g===d&&v>h||g===d&&v===h&&b>m)&&(o=!1);break;case c:m===b&&h===v&&d===g&&(o=!1);break;default:console.error("Date comparator provided is not supported")}return o}))}}(t);default:return function(t){return function(e,r,o,n){var a=o.filterVal,i=void 0===a?"":a,c=o.comparator,s=void 0===c?l:c,p=o.caseSensitive,f=i.toString();return e.filter((function(e){var o=t.get(e,r);n&&(o=n(o,e));var a=t.isDefined(o)?o.toString():"";return s===u?a===f:p?a.includes(f):-1!==a.toLocaleUpperCase().indexOf(f.toLocaleUpperCase())}))}}(t)}}},Ct=function(t,e,r){return function(o){var n,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=Ft(r),l=Ot(Ot({},a),o),u=t;return Object.keys(l).forEach((function(t){for(var r,o,c,s=0;s<e.length;s+=1)if(e[s].dataField===t){o=e[s].filterValue,e[s].filter&&(c=e[s].filter.props.onFilter);break}if(a[t]&&c)void 0!==(r=c(a[t].filterVal,u))&&(u=r);else{var p=l[t];n=i(p.filterType),c&&(r=c(p.filterVal,u)),u=void 0===r?n(u,t,p,o):r}})),u}};function jt(t){return jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},jt(t)}function Tt(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function Pt(t,e){return Pt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Pt(t,e)}function wt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,o=Vt(t);if(e){var n=Vt(this).constructor;r=Reflect.construct(o,arguments,n)}else r=o.apply(this,arguments);return kt(this,r)}}function kt(t,e){if(e&&("object"===jt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Nt(t)}function Nt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Vt(t){return Vt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Vt(t)}function Rt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const Dt=function(t,e,o){var n=r().createContext(),a=function(a){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Pt(t,e)}(f,a);var i,c,s,p=wt(f);function f(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,f),(e=p.call(this,t)).currFilters={},e.clearFilters={},e.onFilter=e.onFilter.bind(Nt(e)),e.doFilter=e.doFilter.bind(Nt(e)),e.onExternalFilter=e.onExternalFilter.bind(Nt(e)),e.data=t.data,e.isEmitDataChange=!1,e}return i=f,c=[{key:"componentDidMount",value:function(){e()&&Object.keys(this.currFilters).length>0&&o(this.currFilters)}},{key:"onFilter",value:function(r,n){var a=this,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(c){var s=Object.assign({},a.currFilters);a.clearFilters={};var p=r.dataField,f=r.filter;if(t.isDefined(c)&&""!==c&&0!==c.length){var y=f.props,h=y.comparator,d=void 0===h?n===m.SELECT?u:l:h,b=y.caseSensitive,v=void 0!==b&&b;s[p]={filterVal:c,filterType:n,comparator:d,caseSensitive:v}}else delete s[p],a.clearFilters=Rt({},p,{clear:!0,filterVal:c});a.currFilters=s,e()?i||o(a.currFilters):a.doFilter(a.props)}}},{key:"onExternalFilter",value:function(t,e){var r=this;return function(o){r.onFilter(t,e)(o)}}},{key:"getFiltered",value:function(){return this.data}},{key:"UNSAFE_componentWillReceiveProps",value:function(r){e()||t.isEqual(r.data,this.data)?this.data=r.data:this.doFilter(r,this.isEmitDataChange)}},{key:"doFilter",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=e.dataChangeListener,n=e.data,a=e.columns,i=e.filter,l=Ct(n,a,t)(this.currFilters,this.clearFilters);i.afterFilter&&i.afterFilter(l,this.currFilters),this.data=l,o&&!r?(this.isEmitDataChange=!0,o.emit("filterChanged",l.length)):(this.isEmitDataChange=!1,this.forceUpdate())}},{key:"render",value:function(){return r().createElement(n.Provider,{value:{data:this.data,onFilter:this.onFilter,onExternalFilter:this.onExternalFilter,currFilters:this.currFilters}},this.props.children)}}],c&&Tt(i.prototype,c),s&&Tt(i,s),Object.defineProperty(i,"prototype",{writable:!1}),f}(r().Component);return Rt(a,"propTypes",{data:i().array.isRequired,columns:i().array.isRequired,dataChangeListener:i().object}),{Provider:a,Consumer:n.Consumer}},_t=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{createContext:Dt,options:t}};var xt=m,Ut=t,Lt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{Filter:T,props:t}},Mt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{Filter:M,props:t}},Bt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{Filter:z,props:t}},It=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{Filter:lt,props:t}},qt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{Filter:vt,props:t}},At=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{props:t}}})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,