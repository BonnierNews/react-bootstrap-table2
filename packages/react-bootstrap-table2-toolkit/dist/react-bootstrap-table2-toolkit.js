!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.ReactBootstrapTable2Toolkit=t(require("react")):e.ReactBootstrapTable2Toolkit=t(e.React)}(self,(e=>(()=>{var t={703:(e,t,r)=>{"use strict";var n=r(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,i,a){if(a!==n){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var r={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return r.PropTypes=r,r}},697:(e,t,r)=>{e.exports=r(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},802:function(e,t,r){var n,o,i;o=[],void 0===(i="function"==typeof(n=function(){"use strict";function t(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}function n(e,t,r){var n=new XMLHttpRequest;n.open("GET",e),n.responseType="blob",n.onload=function(){u(n.response,t,r)},n.onerror=function(){console.error("could not download file")},n.send()}function o(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function i(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(r){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var a="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof r.g&&r.g.global===r.g?r.g:void 0,c=a.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),u=a.saveAs||("object"!=typeof window||window!==a?function(){}:"download"in HTMLAnchorElement.prototype&&!c?function(e,t,r){var c=a.URL||a.webkitURL,u=document.createElement("a");t=t||e.name||"download",u.download=t,u.rel="noopener","string"==typeof e?(u.href=e,u.origin===location.origin?i(u):o(u.href)?n(e,t,r):i(u,u.target="_blank")):(u.href=c.createObjectURL(e),setTimeout((function(){c.revokeObjectURL(u.href)}),4e4),setTimeout((function(){i(u)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,r,a){if(r=r||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(t(e,a),r);else if(o(e))n(e,r,a);else{var c=document.createElement("a");c.href=e,c.target="_blank",setTimeout((function(){i(c)}))}}:function(e,t,r,o){if((o=o||open("","_blank"))&&(o.document.title=o.document.body.innerText="downloading..."),"string"==typeof e)return n(e,t,r);var i="application/octet-stream"===e.type,u=/constructor/i.test(a.HTMLElement)||a.safari,l=/CriOS\/[\d]+/.test(navigator.userAgent);if((l||i&&u||c)&&"undefined"!=typeof FileReader){var s=new FileReader;s.onloadend=function(){var e=s.result;e=l?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),o?o.location.href=e:location=e,o=null},s.readAsDataURL(e)}else{var f=a.URL||a.webkitURL,p=f.createObjectURL(e);o?o.location=p:location.href=p,o=null,setTimeout((function(){f.revokeObjectURL(p)}),4e4)}});a.saveAs=u.saveAs=u,e.exports=u})?n.apply(t,o):n)||(e.exports=i)},787:t=>{"use strict";t.exports=e}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={exports:{}};return t[e].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{"use strict";n.r(o),n.d(o,{CSVExport:()=>Ce,ColumnToggle:()=>De,Search:()=>Se,ToolkitContext:()=>Le,default:()=>Be});var e=n(787),t=n.n(e),r=n(697),i=n.n(r),a=n(802),c=n.n(a),u=function(e){return e.map((function(e){return{field:e.dataField,type:e.csvType||String,formatter:e.csvFormatter,formatExtraData:e.formatExtraData,header:e.csvText||e.text,export:!1!==e.csvExport,row:Number(e.row)||0,rowSpan:Number(e.rowSpan)||1,colSpan:Number(e.colSpan)||1,footer:e.footer,footerFormatter:e.footerFormatter}})).filter((function(e){return e.export}))},l=function(e,t,r,n,o){var i=o.separator,a=o.ignoreHeader,c=o.ignoreFooter,u=t.filter((function(e){return e.export})),l="";return a||(l+=u.map((function(e){return'"'.concat(e.header,'"')})).join(i),l+="\n"),0===e.length||(l+=e.map((function(e,t){return u.map((function(r){var o=n.get(e,r.field);return r.formatter&&(o=r.formatter(o,e,t,r.formatExtraData)),r.type===String?'"'.concat("".concat(o).replace(/"/g,'""'),'"'):o})).join(i)})).join("\n"),c||(l+="\n",l+=u.map((function(t,o){if("function"==typeof t.footer){var i=n.pluck(e,r[o].dataField);return'"'.concat(t.footer(i,r[o],o),'"')}return t.footerFormatter?'"'.concat(t.footerFormatter(r[o],o),'"'):'"'.concat(t.footer,'"')})).join(i))),l},s=function(e,t){var r=t.noAutoBOM,n=t.fileName,o=t.blobType;c().saveAs(new Blob([e],{type:o}),n,r)};function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function y(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){w(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,j(n.key),n)}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){return m=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},m(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=O(e);if(t){var o=O(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return v(this,r)}}function v(e,t){if(t&&("object"===f(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return g(e)}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function O(e){return O=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},O(e)}function w(e,t,r){return(t=j(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function j(e){var t=function(e,t){if("object"!==f(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==f(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===f(t)?t:String(t)}var P={fileName:"spreadsheet.csv",separator:",",ignoreHeader:!1,ignoreFooter:!0,noAutoBOM:!0,blobType:"text/plain;charset=utf-8",exportAll:!0,onlyExportSelection:!1};const S=function(e){return function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&m(e,t)}(i,e);var t,r,n,o=h(i);function i(){var e;d(this,i);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return w(g(e=o.call.apply(o,[this].concat(r))),"handleExportCSV",(function(t){var r,n=e.props,o=n.columns,i=n.exportCSV,a=n.keyField,c=u(o),f=!0===i?P:y(y({},P),i);if(void 0!==t)r=t;else if(f.exportAll)r=e.props.data;else if(f.onlyExportFiltered){var p={};e.tableExposedAPIEmitter.emit("get.filtered.rows",p),r=p.result}else{var b={};e.tableExposedAPIEmitter.emit("get.table.data",b),r=b.result}if(f.onlyExportSelection){var d={};e.tableExposedAPIEmitter.emit("get.selected.rows",d);var m=d.result;r=r.filter((function(e){return!!m.find((function(t){return e[a]===t}))}))}var h=l(r,c,o,e._,f);s(h,f)})),e}return t=i,r&&b(t.prototype,r),n&&b(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}(e)};function T(e){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T(e)}function x(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,A(n.key),n)}}function E(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function R(e,t){return R=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},R(e,t)}function C(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=N(e);if(t){var o=N(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _(this,r)}}function _(e,t){if(t&&("object"===T(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return k(e)}function k(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function N(e){return N=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},N(e)}function F(e,t,r){return(t=A(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function A(e){var t=function(e,t){if("object"!==T(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==T(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===T(t)?t:String(t)}function D(e){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D(e)}function B(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function L(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,K(n.key),n)}}function M(e,t,r){return t&&L(e.prototype,t),r&&L(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function q(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&I(e,t)}function I(e,t){return I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},I(e,t)}function U(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=H(e);if(t){var o=H(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return V(this,r)}}function V(e,t){if(t&&("object"===D(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function H(e){return H=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},H(e)}function W(e,t,r){return(t=K(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function K(e){var t=function(e,t){if("object"!==D(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==D(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===D(t)?t:String(t)}const X=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{searchFormatted:!1,afterSearch:null,onColumnMatch:null};return function(r,n,o){var a=t().createContext(),c=function(i){q(u,i);var c=U(u);function u(e){var t;B(this,u),t=c.call(this,e);var r=e.data;return n()&&""!==t.props.searchText?o(t.props.searchText):(r=t.search(e),t.triggerListener(r,!0)),t.state={data:r},t}return M(u,[{key:"getSearched",value:function(){return this.state.data}},{key:"triggerListener",value:function(t,r){e.afterSearch&&!r&&e.afterSearch(t),this.props.dataChangeListener&&this.props.dataChangeListener.emit("filterChanged",t.length)}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){if(e.searchText!==this.props.searchText)if(n())o(e.searchText);else{var t=this.search(e);this.triggerListener(t),this.setState({data:t})}else if(n())this.setState({data:e.data});else if(!r.isEqual(e.data,this.props.data)){var i=this.search(e);this.triggerListener(i),this.setState({data:i})}}},{key:"search",value:function(t){var n=t.data,o=t.columns,i=t.searchText.toLowerCase();return n.filter((function(t,n){for(var a=0;a<o.length;a+=1){var c=o[a];if(!1!==c.searchable){var u=r.get(t,c.dataField);if(c.formatter&&e.searchFormatted?u=c.formatter(u,t,n,c.formatExtraData):c.filterValue&&(u=c.filterValue(u,t)),e.onColumnMatch){if(e.onColumnMatch({searchText:i,value:u,column:c,row:t}))return!0}else if(null!=u&&(u=u.toString().toLowerCase()).indexOf(i)>-1)return!0}}return!1}))}},{key:"render",value:function(){return t().createElement(a.Provider,{value:{data:this.state.data}},this.props.children)}}]),u}(t().Component);return W(c,"propTypes",{data:i().array.isRequired,columns:i().array.isRequired,searchText:i().string,dataChangeListener:i().object}),{Provider:c,Consumer:a.Consumer}}};function G(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Y(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?G(Object(r),!0).forEach((function(t){re(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):G(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function z(e){return z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},z(e)}function J(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,ne(n.key),n)}}function Q(e,t){return Q=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Q(e,t)}function Z(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=te(e);if(t){var o=te(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return $(this,r)}}function $(e,t){if(t&&("object"===z(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ee(e)}function ee(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function te(e){return te=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},te(e)}function re(e,t,r){return(t=ne(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ne(e){var t=function(e,t){if("object"!==z(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==z(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===z(t)?t:String(t)}var oe,ie=t().createContext(),ae=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Q(e,t)}(a,e);var r,n,o,i=Z(a);function a(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r={};return(t=i.call(this,e))._=null,t.onClear=t.onClear.bind(ee(t)),t.onSearch=t.onSearch.bind(ee(t)),t.onColumnToggle=t.onColumnToggle.bind(ee(t)),t.setDependencyModules=t.setDependencyModules.bind(ee(t)),e.columnToggle&&(r.columnToggle=e.columns.reduce((function(e,t){return e[t.dataField]=!t.hidden,e}),{})),r.searchText="object"===z(e.search)&&e.search.defaultSearch||"",t.state=r,t}return r=a,(n=[{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=this.state.columnToggle;t=e.columnToggle?e.columns.reduce((function(e,t){return e[t.dataField]=!t.hidden,e}),{}):null,this.setState(Y(Y({},this.state),{},{columnToggle:t}))}},{key:"onSearch",value:function(e){e!==this.state.searchText&&this.setState({searchText:e})}},{key:"onClear",value:function(){this.setState({searchText:""})}},{key:"onColumnToggle",value:function(e){var t=this.state.columnToggle;t[e]=!t[e],this.setState(Y(Y({},this.state),{},{columnToggle:t}))}},{key:"setDependencyModules",value:function(e){this._=e}},{key:"render",value:function(){var e={keyField:this.props.keyField,columns:this.props.columns,data:this.props.data,bootstrap4:this.props.bootstrap4,setDependencyModules:this.setDependencyModules,registerExposedAPI:this.registerExposedAPI};return this.props.search&&(e.search={searchContext:X(this.props.search),searchText:this.state.searchText}),this.props.columnToggle&&(e.columnToggle={toggles:this.state.columnToggle}),t().createElement(ie.Provider,{value:{searchProps:{searchText:this.state.searchText,onSearch:this.onSearch,onClear:this.onClear},csvProps:{onExport:this.handleExportCSV},columnToggleProps:{columns:this.props.columns,toggles:this.state.columnToggle,onColumnToggle:this.onColumnToggle},baseProps:e}},this.props.children)}}])&&J(r.prototype,n),o&&J(r,o),Object.defineProperty(r,"prototype",{writable:!1}),a}((oe=t().Component,function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&R(e,t)}(i,e);var t,r,n,o=C(i);function i(){var e;E(this,i);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return F(k(e=o.call.apply(o,[this].concat(r))),"registerExposedAPI",(function(t){e.tableExposedAPIEmitter=t})),e}return t=i,r&&x(t.prototype,r),n&&x(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}(S(oe))));re(ae,"propTypes",{keyField:i().string.isRequired,data:i().array.isRequired,columns:i().array.isRequired,children:i().node.isRequired,bootstrap4:i().bool,search:i().oneOfType([i().bool,i().shape({defaultSearch:i().string,searchFormatted:i().bool})]),exportCSV:i().oneOfType([i().bool,i().shape({fileName:i().string,separator:i().string,ignoreHeader:i().bool,ignoreFooter:i().bool,noAutoBOM:i().bool,blobType:i().string,exportAll:i().bool,onlyExportFiltered:i().bool,onlyExportSelection:i().bool})])}),re(ae,"defaultProps",{search:!1,exportCSV:!1,bootstrap4:!1});const ce={Provider:ae,Consumer:ie.Consumer};var ue=function(e){return t().createElement(ce.Provider,e,t().createElement(ce.Consumer,null,(function(t){return e.children(t)})))};ue.propTypes={children:i().func.isRequired};const le=ue;function se(e){return se="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},se(e)}var fe="undefined"==typeof arguments?void 0:arguments,pe=void 0;function ye(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Oe(n.key),n)}}function be(e,t){return be=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},be(e,t)}function de(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=ve(e);if(t){var o=ve(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return me(this,r)}}function me(e,t){if(t&&("object"===se(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return he(e)}function he(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ve(e){return ve=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ve(e)}function ge(e,t,r){return(t=Oe(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Oe(e){var t=function(e,t){if("object"!==se(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==se(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===se(t)?t:String(t)}var we=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&be(e,t)}(a,e);var r,n,o,i=de(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),ge(he(t=i.call(this,e)),"onChangeValue",(function(e){t.setState({value:e.target.value})})),ge(he(t),"onKeyup",(function(){var e,r,n,o,i=t.props,a=i.delay,c=i.onSearch;(e=function(){c(t.input.value)},r=a,function(){var t=n&&!o;clearTimeout(o),o=setTimeout((function(){o=null,n||e.apply(pe,fe)}),r||0),t&&e.appy(pe,fe)})()})),t.state={value:e.searchText},t}return r=a,(n=[{key:"UNSAFE_componentWillReceiveProps",value:function(e){this.setState({value:e.searchText})}},{key:"render",value:function(){var e=this,r=this.props,n=r.className,o=r.style,i=r.placeholder,c=r.tableId,u=r.srText;return t().createElement("label",{htmlFor:"search-bar-".concat(c),className:"search-label"},t().createElement("span",{id:"search-bar-".concat(c,"-label"),className:"sr-only"},u),t().createElement("input",{ref:function(t){return e.input=t},id:"search-bar-".concat(c),type:"text",style:o,"aria-labelledby":"search-bar-".concat(c,"-label"),onKeyUp:function(){return e.onKeyup()},onChange:this.onChangeValue,className:"form-control ".concat(n),value:this.state.value,placeholder:i||a.defaultProps.placeholder}))}}])&&ye(r.prototype,n),o&&ye(r,o),Object.defineProperty(r,"prototype",{writable:!1}),a}(t().Component);we.propTypes={onSearch:i().func.isRequired,className:i().string,placeholder:i().string,style:i().object,delay:i().number,searchText:i().string,tableId:i().string,srText:i().string},we.defaultProps={className:"",style:{},placeholder:"Search",delay:250,searchText:"",tableId:"0",srText:"Search this table"};const je=we;var Pe=function(e){var r=e.onClear,n=e.text,o=e.className;return t().createElement("button",{className:"btn btn-default ".concat(o),onClick:r},n)};Pe.propTypes={onClear:i().func.isRequired,className:i().string,text:i().string},Pe.defaultProps={text:"Clear",className:""};const Se={SearchBar:je,ClearSearchButton:Pe};var Te=["onExport","children","className"];function xe(){return xe=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},xe.apply(this,arguments)}function Ee(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var Re=function(e){var r=e.onExport,n=e.children,o=e.className,i=Ee(e,Te);return t().createElement("button",xe({type:"button",className:"react-bs-table-csv-btn btn btn-default ".concat(o),onClick:function(){return r()}},i),n)};Re.propTypes={children:i().node.isRequired,onExport:i().func.isRequired,className:i().string,style:i().object},Re.defaultProps={className:"",style:{}};const Ce={ExportCSVButton:Re};function _e(e){return _e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_e(e)}function ke(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Ne(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ke(Object(r),!0).forEach((function(t){Fe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ke(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Fe(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==_e(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==_e(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===_e(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var Ae=function(e){var r=e.columns,n=e.onColumnToggle,o=e.toggles,i=e.contextual,a=e.className,c=e.btnClassName;return t().createElement("div",{className:"btn-group btn-group-toggle ".concat(a),"data-toggle":"buttons"},r.map((function(e){return Ne(Ne({},e),{},{toggle:o[e.dataField]})})).map((function(e){return t().createElement("button",{type:"button",key:e.dataField,className:"".concat(c," btn btn-").concat(i," ").concat(e.toggle?"active":""),"data-toggle":"button","aria-pressed":e.toggle?"true":"false",onClick:function(){return n(e.dataField)}},e.text)})))};Ae.propTypes={columns:i().array.isRequired,toggles:i().object.isRequired,onColumnToggle:i().func.isRequired,btnClassName:i().string,className:i().string,contextual:i().string},Ae.defaultProps={btnClassName:"",className:"",contextual:"primary"};const De={ToggleList:Ae},Be=le;var Le=ce})(),o})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3QtYm9vdHN0cmFwLXRhYmxlMi10b29sa2l0L2Rpc3QvcmVhY3QtYm9vdHN0cmFwLXRhYmxlMi10b29sa2l0LmpzIiwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxFQUFRRyxRQUFRLFVBQ1IsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxDQUFDLFNBQVVKLEdBQ1EsaUJBQVpDLFFBQ2RBLFFBQXFDLDRCQUFJRCxFQUFRRyxRQUFRLFVBRXpESixFQUFrQyw0QkFBSUMsRUFBUUQsRUFBWSxNQUMzRCxDQVRELENBU0dPLE1BQU9DLEcsd0NDQVYsSUFBSUMsRUFBdUIsRUFBUSxLQUVuQyxTQUFTQyxJQUFpQixDQUMxQixTQUFTQyxJQUEwQixDQUNuQ0EsRUFBdUJDLGtCQUFvQkYsRUFFM0NQLEVBQU9ELFFBQVUsV0FDZixTQUFTVyxFQUFLQyxFQUFPQyxFQUFVQyxFQUFlQyxFQUFVQyxFQUFjQyxHQUNwRSxHQUFJQSxJQUFXVixFQUFmLENBSUEsSUFBSVcsRUFBTSxJQUFJQyxNQUNaLG1MQUtGLE1BREFELEVBQUlFLEtBQU8sc0JBQ0xGLENBUE4sQ0FRRixDQUVBLFNBQVNHLElBQ1AsT0FBT1YsQ0FDVCxDQUhBQSxFQUFLVyxXQUFhWCxFQU1sQixJQUFJWSxFQUFpQixDQUNuQkMsTUFBT2IsRUFDUGMsT0FBUWQsRUFDUmUsS0FBTWYsRUFDTmdCLEtBQU1oQixFQUNOaUIsT0FBUWpCLEVBQ1JrQixPQUFRbEIsRUFDUm1CLE9BQVFuQixFQUNSb0IsT0FBUXBCLEVBRVJxQixJQUFLckIsRUFDTHNCLFFBQVNaLEVBQ1RhLFFBQVN2QixFQUNUd0IsWUFBYXhCLEVBQ2J5QixXQUFZZixFQUNaZ0IsS0FBTTFCLEVBQ04yQixTQUFVakIsRUFDVmtCLE1BQU9sQixFQUNQbUIsVUFBV25CLEVBQ1hvQixNQUFPcEIsRUFDUHFCLE1BQU9yQixFQUVQc0IsZUFBZ0JsQyxFQUNo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Li9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3JlYWN0LWJvb3RzdHJhcC10YWJsZTItdG9vbGtpdC9ub2RlX21vZHVsZXMvZmlsZS1zYXZlci9kaXN0L0ZpbGVTYXZlci5taW4uanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHVtZCB7XCJyb290XCI6XCJSZWFjdFwiLFwiY29tbW9uanMyXCI6XCJyZWFjdFwiLFwiY29tbW9uanNcIjpcInJlYWN0XCIsXCJhbWRcIjpcInJlYWN0XCJ9Iiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yZWFjdC1ib290c3RyYXAtdGFibGUyLXRvb2xraXQvc3JjL2Nzdi9leHBvcnRlci5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yZWFjdC1ib290c3RyYXAtdGFibGUyLXRvb2xraXQvc3JjL29wL2Nzdi5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yZWFjdC1ib290c3RyYXAtdGFibGUyLXRvb2xraXQvc3JjL29wL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3JlYWN0LWJvb3RzdHJhcC10YWJsZTItdG9vbGtpdC9zcmMvc2VhcmNoL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvcmVhY3QtYm9vdHN0cmFwLXRhYmxlMi10b29sa2l0L2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvcmVhY3QtYm9vdHN0cmFwLXRhYmxlMi10b29sa2l0L3N0YXRlbGVzc09wLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3JlYWN0LWJvb3RzdHJhcC10YWJsZTItdG9vbGtpdC9wcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yZWFjdC1ib290c3RyYXAtdGFibGUyLXRvb2xraXQvc3JjL3NlYXJjaC9TZWFyY2hCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvcmVhY3QtYm9vdHN0cmFwLXRhYmxlMi10b29sa2l0L3NyYy9zZWFyY2gvY2xlYXItYnV0dG9uLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3JlYWN0LWJvb3RzdHJhcC10YWJsZTItdG9vbGtpdC9zcmMvc2VhcmNoL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3JlYWN0LWJvb3RzdHJhcC10YWJsZTItdG9vbGtpdC9zcmMvY3N2L2J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yZWFjdC1ib290c3RyYXAtdGFibGUyLXRvb2xraXQvc3JjL2Nzdi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yZWFjdC1ib290c3RyYXAtdGFibGUyLXRvb2xraXQvc3JjL2NvbHVtbi10b2dnbGUvdG9nZ2xlLWxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvcmVhY3QtYm9vdHN0cmFwLXRhYmxlMi10b29sa2l0L3NyYy9jb2x1bW4tdG9nZ2xlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3JlYWN0LWJvb3RzdHJhcC10YWJsZTItdG9vbGtpdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJyZWFjdFwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJSZWFjdEJvb3RzdHJhcFRhYmxlMlRvb2xraXRcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiUmVhY3RCb290c3RyYXBUYWJsZTJUb29sa2l0XCJdID0gZmFjdG9yeShyb290W1wiUmVhY3RcIl0pO1xufSkoc2VsZiwgKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzc4N19fKSA9PiB7XG5yZXR1cm4gIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJpZ2ludDogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIoZnVuY3Rpb24oYSxiKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGIpO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHMpYigpO2Vsc2V7YigpLGEuRmlsZVNhdmVyPXtleHBvcnRzOnt9fS5leHBvcnRzfX0pKHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGEsYil7cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGI/Yj17YXV0b0JvbTohMX06XCJvYmplY3RcIiE9dHlwZW9mIGImJihjb25zb2xlLndhcm4oXCJEZXByZWNhdGVkOiBFeHBlY3RlZCB0aGlyZCBhcmd1bWVudCB0byBiZSBhIG9iamVjdFwiKSxiPXthdXRvQm9tOiFifSksYi5hdXRvQm9tJiYvXlxccyooPzp0ZXh0XFwvXFxTKnxhcHBsaWNhdGlvblxcL3htbHxcXFMqXFwvXFxTKlxcK3htbClcXHMqOy4qY2hhcnNldFxccyo9XFxzKnV0Zi04L2kudGVzdChhLnR5cGUpP25ldyBCbG9iKFtcIlxcdUZFRkZcIixhXSx7dHlwZTphLnR5cGV9KTphfWZ1bmN0aW9uIGMoYSxiLGMpe3ZhciBkPW5ldyBYTUxIdHRwUmVxdWVzdDtkLm9wZW4oXCJHRVRcIixhKSxkLnJlc3BvbnNlVHlwZT1cImJsb2JcIixkLm9ubG9hZD1mdW5jdGlvbigpe2coZC5yZXNwb25zZSxiLGMpfSxkLm9uZXJyb3I9ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiY291bGQgbm90IGRvd25sb2FkIGZpbGVcIil9LGQuc2VuZCgpfWZ1bmN0aW9uIGQoYSl7dmFyIGI9bmV3IFhNTEh0dHBSZXF1ZXN0O2Iub3BlbihcIkhFQURcIixhLCExKTt0cnl7Yi5zZW5kKCl9Y2F0Y2goYSl7fXJldHVybiAyMDA8PWIuc3RhdHVzJiYyOTk+PWIuc3RhdHVzfWZ1bmN0aW9uIGUoYSl7dHJ5e2EuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudChcImNsaWNrXCIpKX1jYXRjaChjKXt2YXIgYj1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO2IuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCEwLCEwLHdpbmRvdywwLDAsMCw4MCwyMCwhMSwhMSwhMSwhMSwwLG51bGwpLGEuZGlzcGF0Y2hFdmVudChiKX19dmFyIGY9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93LndpbmRvdz09PXdpbmRvdz93aW5kb3c6XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYuc2VsZj09PXNlbGY/c2VsZjpcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwuZ2xvYmFsPT09Z2xvYmFsP2dsb2JhbDp2b2lkIDAsYT1mLm5hdmlnYXRvciYmL01hY2ludG9zaC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmL0FwcGxlV2ViS2l0Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYhL1NhZmFyaS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxnPWYuc2F2ZUFzfHwoXCJvYmplY3RcIiE9dHlwZW9mIHdpbmRvd3x8d2luZG93IT09Zj9mdW5jdGlvbigpe306XCJkb3dubG9hZFwiaW4gSFRNTEFuY2hvckVsZW1lbnQucHJvdG90eXBlJiYhYT9mdW5jdGlvbihiLGcsaCl7dmFyIGk9Zi5VUkx8fGYud2Via2l0VVJMLGo9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7Zz1nfHxiLm5hbWV8fFwiZG93bmxvYWRcIixqLmRvd25sb2FkPWcsai5yZWw9XCJub29wZW5lclwiLFwic3RyaW5nXCI9PXR5cGVvZiBiPyhqLmhyZWY9YixqLm9yaWdpbj09PWxvY2F0aW9uLm9yaWdpbj9lKGopOmQoai5ocmVmKT9jKGIsZyxoKTplKGosai50YXJnZXQ9XCJfYmxhbmtcIikpOihqLmhyZWY9aS5jcmVhdGVPYmplY3RVUkwoYiksc2V0VGltZW91dChmdW5jdGlvbigpe2kucmV2b2tlT2JqZWN0VVJMKGouaHJlZil9LDRFNCksc2V0VGltZW91dChmdW5jdGlvbigpe2Uoail9LDApKX06XCJtc1NhdmVPck9wZW5CbG9iXCJpbiBuYXZpZ2F0b3I/ZnVuY3Rpb24oZixnLGgpe2lmKGc9Z3x8Zi5uYW1lfHxcImRvd25sb2FkXCIsXCJzdHJpbmdcIiE9dHlwZW9mIGYpbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoYihmLGgpLGcpO2Vsc2UgaWYoZChmKSljKGYsZyxoKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2kuaHJlZj1mLGkudGFyZ2V0PVwiX2JsYW5rXCIsc2V0VGltZW91dChmdW5jdGlvbigpe2UoaSl9KX19OmZ1bmN0aW9uKGIsZCxlLGcpe2lmKGc9Z3x8b3BlbihcIlwiLFwiX2JsYW5rXCIpLGcmJihnLmRvY3VtZW50LnRpdGxlPWcuZG9jdW1lbnQuYm9keS5pbm5lclRleHQ9XCJkb3dubG9hZGluZy4uLlwiKSxcInN0cmluZ1wiPT10eXBlb2YgYilyZXR1cm4gYyhiLGQsZSk7dmFyIGg9XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIj09PWIudHlwZSxpPS9jb25zdHJ1Y3Rvci9pLnRlc3QoZi5IVE1MRWxlbWVudCl8fGYuc2FmYXJpLGo9L0NyaU9TXFwvW1xcZF0rLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO2lmKChqfHxoJiZpfHxhKSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEZpbGVSZWFkZXIpe3ZhciBrPW5ldyBGaWxlUmVhZGVyO2sub25sb2FkZW5kPWZ1bmN0aW9uKCl7dmFyIGE9ay5yZXN1bHQ7YT1qP2E6YS5yZXBsYWNlKC9eZGF0YTpbXjtdKjsvLFwiZGF0YTphdHRhY2htZW50L2ZpbGU7XCIpLGc/Zy5sb2NhdGlvbi5ocmVmPWE6bG9jYXRpb249YSxnPW51bGx9LGsucmVhZEFzRGF0YVVSTChiKX1lbHNle3ZhciBsPWYuVVJMfHxmLndlYmtpdFVSTCxtPWwuY3JlYXRlT2JqZWN0VVJMKGIpO2c/Zy5sb2NhdGlvbj1tOmxvY2F0aW9uLmhyZWY9bSxnPW51bGwsc2V0VGltZW91dChmdW5jdGlvbigpe2wucmV2b2tlT2JqZWN0VVJMKG0pfSw0RTQpfX0pO2Yuc2F2ZUFzPWcuc2F2ZUFzPWcsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmKG1vZHVsZS5leHBvcnRzPWcpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZpbGVTYXZlci5taW4uanMubWFwIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX183ODdfXzsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvKiBlc2xpbnQgbm8tdW5uZWVkZWQtdGVybmFyeTogMCAqL1xuaW1wb3J0IEZpbGVTYXZlciBmcm9tICdmaWxlLXNhdmVyJztcblxuZXhwb3J0IGNvbnN0IGdldE1ldGFJbmZvID0gY29sdW1ucyA9PlxuICBjb2x1bW5zXG4gICAgLm1hcChjb2x1bW4gPT4gKHtcbiAgICAgIGZpZWxkOiBjb2x1bW4uZGF0YUZpZWxkLFxuICAgICAgdHlwZTogY29sdW1uLmNzdlR5cGUgfHwgU3RyaW5nLFxuICAgICAgZm9ybWF0dGVyOiBjb2x1bW4uY3N2Rm9ybWF0dGVyLFxuICAgICAgZm9ybWF0RXh0cmFEYXRhOiBjb2x1bW4uZm9ybWF0RXh0cmFEYXRhLFxuICAgICAgaGVhZGVyOiBjb2x1bW4uY3N2VGV4dCB8fCBjb2x1bW4udGV4dCxcbiAgICAgIGV4cG9ydDogY29sdW1uLmNzdkV4cG9ydCA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWUsXG4gICAgICByb3c6IE51bWJlcihjb2x1bW4ucm93KSB8fCAwLFxuICAgICAgcm93U3BhbjogTnVtYmVyKGNvbHVtbi5yb3dTcGFuKSB8fCAxLFxuICAgICAgY29sU3BhbjogTnVtYmVyKGNvbHVtbi5jb2xTcGFuKSB8fCAxLFxuICAgICAgZm9vdGVyOiBjb2x1bW4uZm9vdGVyLFxuICAgICAgZm9vdGVyRm9ybWF0dGVyOiBjb2x1bW4uZm9vdGVyRm9ybWF0dGVyXG4gICAgfSkpXG4gICAgLmZpbHRlcihfID0+IF8uZXhwb3J0KTtcblxuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybSA9IChcbiAgZGF0YSxcbiAgbWV0YSxcbiAgY29sdW1ucyxcbiAgXyxcbiAge1xuICAgIHNlcGFyYXRvcixcbiAgICBpZ25vcmVIZWFkZXIsXG4gICAgaWdub3JlRm9vdGVyXG4gIH1cbikgPT4ge1xuICBjb25zdCB2aXNpYmxlQ29sdW1ucyA9IG1ldGEuZmlsdGVyKG0gPT4gbS5leHBvcnQpO1xuICBsZXQgY29udGVudCA9ICcnO1xuICAvLyBleHRyYWN0IGNzdiBoZWFkZXJcbiAgaWYgKCFpZ25vcmVIZWFkZXIpIHtcbiAgICBjb250ZW50ICs9IHZpc2libGVDb2x1bW5zLm1hcChtID0+IGBcIiR7bS5oZWFkZXJ9XCJgKS5qb2luKHNlcGFyYXRvcik7XG4gICAgY29udGVudCArPSAnXFxuJztcbiAgfVxuICAvLyBleHRyYWN0IGNzdiBib2R5XG4gIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNvbnRlbnQ7XG4gIGNvbnRlbnQgKz0gZGF0YVxuICAgIC5tYXAoKHJvdywgcm93SW5kZXgpID0+XG4gICAgICB2aXNpYmxlQ29sdW1ucy5tYXAoKG0pID0+IHtcbiAgICAgICAgbGV0IGNlbGxDb250ZW50ID0gXy5nZXQocm93LCBtLmZpZWxkKTtcbiAgICAgICAgaWYgKG0uZm9ybWF0dGVyKSB7XG4gICAgICAgICAgY2VsbENvbnRlbnQgPSBtLmZvcm1hdHRlcihjZWxsQ29udGVudCwgcm93LCByb3dJbmRleCwgbS5mb3JtYXRFeHRyYURhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtLnR5cGUgPT09IFN0cmluZykge1xuICAgICAgICAgIHJldHVybiBgXCIke2Ake2NlbGxDb250ZW50fWAucmVwbGFjZSgvXCIvZywgJ1wiXCInKX1cImA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNlbGxDb250ZW50O1xuICAgICAgfSkuam9pbihzZXBhcmF0b3IpKS5qb2luKCdcXG4nKTtcblxuICBpZiAoIWlnbm9yZUZvb3Rlcikge1xuICAgIGNvbnRlbnQgKz0gJ1xcbic7XG4gICAgY29udGVudCArPSB2aXNpYmxlQ29sdW1ucy5tYXAoKG0sIGkpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgbS5mb290ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3QgY29sdW1uRGF0YSA9IF8ucGx1Y2soZGF0YSwgY29sdW1uc1tpXS5kYXRhRmllbGQpO1xuICAgICAgICByZXR1cm4gYFwiJHttLmZvb3Rlcihjb2x1bW5EYXRhLCBjb2x1bW5zW2ldLCBpKX1cImA7XG4gICAgICB9IGVsc2UgaWYgKG0uZm9vdGVyRm9ybWF0dGVyKSB7XG4gICAgICAgIHJldHVybiBgXCIke20uZm9vdGVyRm9ybWF0dGVyKGNvbHVtbnNbaV0sIGkpfVwiYDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBgXCIke20uZm9vdGVyfVwiYDtcbiAgICB9KS5qb2luKHNlcGFyYXRvcik7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59O1xuXG5leHBvcnQgY29uc3Qgc2F2ZSA9IChcbiAgY29udGVudCxcbiAge1xuICAgIG5vQXV0b0JPTSxcbiAgICBmaWxlTmFtZSxcbiAgICBibG9iVHlwZVxuICB9XG4pID0+IHtcbiAgRmlsZVNhdmVyLnNhdmVBcyhcbiAgICBuZXcgQmxvYihbY29udGVudF0sIHsgdHlwZTogYmxvYlR5cGUgfSksXG4gICAgZmlsZU5hbWUsXG4gICAgbm9BdXRvQk9NXG4gICk7XG59O1xuIiwiaW1wb3J0IHsgZ2V0TWV0YUluZm8sIHRyYW5zZm9ybSwgc2F2ZSB9IGZyb20gJy4uL2Nzdi9leHBvcnRlcic7XG5cbmNvbnN0IGNzdkRlZmF1bHRPcHRpb25zID0ge1xuICBmaWxlTmFtZTogJ3NwcmVhZHNoZWV0LmNzdicsXG4gIHNlcGFyYXRvcjogJywnLFxuICBpZ25vcmVIZWFkZXI6IGZhbHNlLFxuICBpZ25vcmVGb290ZXI6IHRydWUsXG4gIG5vQXV0b0JPTTogdHJ1ZSxcbiAgYmxvYlR5cGU6ICd0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgnLFxuICBleHBvcnRBbGw6IHRydWUsXG4gIG9ubHlFeHBvcnRTZWxlY3Rpb246IGZhbHNlXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYXNlID0+XG4gIGNsYXNzIENTVk9wZXJhdGlvbiBleHRlbmRzIEJhc2Uge1xuICAgIGhhbmRsZUV4cG9ydENTViA9IChzb3VyY2UpID0+IHtcbiAgICAgIGNvbnN0IHsgY29sdW1ucywgZXhwb3J0Q1NWLCBrZXlGaWVsZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IG1ldGEgPSBnZXRNZXRhSW5mbyhjb2x1bW5zKTtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBleHBvcnRDU1YgPT09IHRydWUgP1xuICAgICAgICBjc3ZEZWZhdWx0T3B0aW9ucyA6XG4gICAgICAgIHtcbiAgICAgICAgICAuLi5jc3ZEZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgICAuLi5leHBvcnRDU1ZcbiAgICAgICAgfTtcblxuICAgICAgLy8gZ2V0IGRhdGEgZm9yIGNzdiBleHBvcnRcbiAgICAgIGxldCBkYXRhO1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRhdGEgPSBzb3VyY2U7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZXhwb3J0QWxsKSB7XG4gICAgICAgIGRhdGEgPSB0aGlzLnByb3BzLmRhdGE7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMub25seUV4cG9ydEZpbHRlcmVkKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICAgICAgdGhpcy50YWJsZUV4cG9zZWRBUElFbWl0dGVyLmVtaXQoJ2dldC5maWx0ZXJlZC5yb3dzJywgcGF5bG9hZCk7XG4gICAgICAgIGRhdGEgPSBwYXlsb2FkLnJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICAgICAgdGhpcy50YWJsZUV4cG9zZWRBUElFbWl0dGVyLmVtaXQoJ2dldC50YWJsZS5kYXRhJywgcGF5bG9hZCk7XG4gICAgICAgIGRhdGEgPSBwYXlsb2FkLnJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgLy8gZmlsdGVyIGRhdGEgYnkgcm93IHNlbGVjdGlvblxuICAgICAgaWYgKG9wdGlvbnMub25seUV4cG9ydFNlbGVjdGlvbikge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgICAgIHRoaXMudGFibGVFeHBvc2VkQVBJRW1pdHRlci5lbWl0KCdnZXQuc2VsZWN0ZWQucm93cycsIHBheWxvYWQpO1xuICAgICAgICBjb25zdCBzZWxlY3Rpb25zID0gcGF5bG9hZC5yZXN1bHQ7XG4gICAgICAgIGRhdGEgPSBkYXRhLmZpbHRlcihyb3cgPT4gISFzZWxlY3Rpb25zLmZpbmQoc2VsID0+IHJvd1trZXlGaWVsZF0gPT09IHNlbCkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb250ZW50ID0gdHJhbnNmb3JtKGRhdGEsIG1ldGEsIGNvbHVtbnMsIHRoaXMuXywgb3B0aW9ucyk7XG4gICAgICBzYXZlKGNvbnRlbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcbiIsImltcG9ydCBjc3ZPcGVyYXRpb24gZnJvbSAnLi9jc3YnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNzdk9wZXJhdGlvblxufTtcbiIsIi8qIGVzbGludCByZWFjdC9wcm9wLXR5cGVzOiAwICovXG4vKiBlc2xpbnQgcmVhY3QvcmVxdWlyZS1kZWZhdWx0LXByb3BzOiAwICovXG4vKiBlc2xpbnQgbm8tY29udGludWU6IDAgKi9cbi8qIGVzbGludCBuby1sb25lbHktaWY6IDAgKi9cbi8qIGVzbGludCBjbGFzcy1tZXRob2RzLXVzZS10aGlzOiAwICovXG4vKiBlc2xpbnQgY2FtZWxjYXNlOiAwICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgKG9wdGlvbnMgPSB7XG4gIHNlYXJjaEZvcm1hdHRlZDogZmFsc2UsXG4gIGFmdGVyU2VhcmNoOiBudWxsLFxuICBvbkNvbHVtbk1hdGNoOiBudWxsXG59KSA9PiAoXG4gIF8sXG4gIGlzUmVtb3RlU2VhcmNoLFxuICBoYW5kbGVSZW1vdGVTZWFyY2hDaGFuZ2VcbikgPT4ge1xuICBjb25zdCBTZWFyY2hDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuXG4gIGNsYXNzIFNlYXJjaFByb3ZpZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgZGF0YTogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgICBjb2x1bW5zOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICAgIHNlYXJjaFRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBkYXRhQ2hhbmdlTGlzdGVuZXI6IFByb3BUeXBlcy5vYmplY3RcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgbGV0IGluaXRpYWxEYXRhID0gcHJvcHMuZGF0YTtcbiAgICAgIGlmIChpc1JlbW90ZVNlYXJjaCgpICYmIHRoaXMucHJvcHMuc2VhcmNoVGV4dCAhPT0gJycpIHtcbiAgICAgICAgaGFuZGxlUmVtb3RlU2VhcmNoQ2hhbmdlKHRoaXMucHJvcHMuc2VhcmNoVGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsRGF0YSA9IHRoaXMuc2VhcmNoKHByb3BzKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyTGlzdGVuZXIoaW5pdGlhbERhdGEsIHRydWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGF0ZSA9IHsgZGF0YTogaW5pdGlhbERhdGEgfTtcbiAgICB9XG5cbiAgICBnZXRTZWFyY2hlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLmRhdGE7XG4gICAgfVxuXG4gICAgdHJpZ2dlckxpc3RlbmVyKHJlc3VsdCwgc2tpcEluaXQpIHtcbiAgICAgIGlmIChvcHRpb25zLmFmdGVyU2VhcmNoICYmICFza2lwSW5pdCkge1xuICAgICAgICBvcHRpb25zLmFmdGVyU2VhcmNoKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcm9wcy5kYXRhQ2hhbmdlTGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5kYXRhQ2hhbmdlTGlzdGVuZXIuZW1pdCgnZmlsdGVyQ2hhbmdlZCcsIHJlc3VsdC5sZW5ndGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5zZWFyY2hUZXh0ICE9PSB0aGlzLnByb3BzLnNlYXJjaFRleHQpIHtcbiAgICAgICAgaWYgKGlzUmVtb3RlU2VhcmNoKCkpIHtcbiAgICAgICAgICBoYW5kbGVSZW1vdGVTZWFyY2hDaGFuZ2UobmV4dFByb3BzLnNlYXJjaFRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc2VhcmNoKG5leHRQcm9wcyk7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyTGlzdGVuZXIocmVzdWx0KTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZW1vdGVTZWFyY2goKSkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBkYXRhOiBuZXh0UHJvcHMuZGF0YSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICghXy5pc0VxdWFsKG5leHRQcm9wcy5kYXRhLCB0aGlzLnByb3BzLmRhdGEpKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zZWFyY2gobmV4dFByb3BzKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXJMaXN0ZW5lcihyZXN1bHQpO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZGF0YTogcmVzdWx0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWFyY2gocHJvcHMpIHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgY29sdW1ucyB9ID0gcHJvcHM7XG4gICAgICBjb25zdCBzZWFyY2hUZXh0ID0gcHJvcHMuc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIGRhdGEuZmlsdGVyKChyb3csIHJpZHgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgY2lkeCA9IDA7IGNpZHggPCBjb2x1bW5zLmxlbmd0aDsgY2lkeCArPSAxKSB7XG4gICAgICAgICAgY29uc3QgY29sdW1uID0gY29sdW1uc1tjaWR4XTtcbiAgICAgICAgICBpZiAoY29sdW1uLnNlYXJjaGFibGUgPT09IGZhbHNlKSBjb250aW51ZTtcbiAgICAgICAgICBsZXQgdGFyZ2V0VmFsdWUgPSBfLmdldChyb3csIGNvbHVtbi5kYXRhRmllbGQpO1xuICAgICAgICAgIGlmIChjb2x1bW4uZm9ybWF0dGVyICYmIG9wdGlvbnMuc2VhcmNoRm9ybWF0dGVkKSB7XG4gICAgICAgICAgICB0YXJnZXRWYWx1ZSA9IGNvbHVtbi5mb3JtYXR0ZXIodGFyZ2V0VmFsdWUsIHJvdywgcmlkeCwgY29sdW1uLmZvcm1hdEV4dHJhRGF0YSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb2x1bW4uZmlsdGVyVmFsdWUpIHtcbiAgICAgICAgICAgIHRhcmdldFZhbHVlID0gY29sdW1uLmZpbHRlclZhbHVlKHRhcmdldFZhbHVlLCByb3cpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9ucy5vbkNvbHVtbk1hdGNoKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vbkNvbHVtbk1hdGNoKHtcbiAgICAgICAgICAgICAgc2VhcmNoVGV4dCxcbiAgICAgICAgICAgICAgdmFsdWU6IHRhcmdldFZhbHVlLFxuICAgICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICAgIHJvd1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXRWYWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdGFyZ2V0VmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRhcmdldFZhbHVlID0gdGFyZ2V0VmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICBpZiAodGFyZ2V0VmFsdWUuaW5kZXhPZihzZWFyY2hUZXh0KSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFNlYXJjaENvbnRleHQuUHJvdmlkZXIgdmFsdWU9eyB7IGRhdGE6IHRoaXMuc3RhdGUuZGF0YSB9IH0+XG4gICAgICAgICAgeyB0aGlzLnByb3BzLmNoaWxkcmVuIH1cbiAgICAgICAgPC9TZWFyY2hDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBTZWFyY2hQcm92aWRlcixcbiAgICBDb25zdW1lcjogU2VhcmNoQ29udGV4dC5Db25zdW1lclxuICB9O1xufTtcbiIsIi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogMCAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBzdGF0ZWxlc3NEZWNvcmF0b3IgZnJvbSAnLi9zdGF0ZWxlc3NPcCc7XG5cbmltcG9ydCBjcmVhdGVTZWFyY2hDb250ZXh0IGZyb20gJy4vc3JjL3NlYXJjaC9jb250ZXh0JztcblxuY29uc3QgVG9vbGtpdENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5cbmNsYXNzIFRvb2xraXRQcm92aWRlciBleHRlbmRzIHN0YXRlbGVzc0RlY29yYXRvcihSZWFjdC5Db21wb25lbnQpIHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBrZXlGaWVsZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGRhdGE6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIGNvbHVtbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICAgIGJvb3RzdHJhcDQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlYXJjaDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuYm9vbCxcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGRlZmF1bHRTZWFyY2g6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHNlYXJjaEZvcm1hdHRlZDogUHJvcFR5cGVzLmJvb2xcbiAgICAgIH0pXG4gICAgXSksXG4gICAgZXhwb3J0Q1NWOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5ib29sLFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgZmlsZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHNlcGFyYXRvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgaWdub3JlSGVhZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgaWdub3JlRm9vdGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgbm9BdXRvQk9NOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgYmxvYlR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGV4cG9ydEFsbDogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIG9ubHlFeHBvcnRGaWx0ZXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIG9ubHlFeHBvcnRTZWxlY3Rpb246IFByb3BUeXBlcy5ib29sXG4gICAgICB9KVxuICAgIF0pXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHNlYXJjaDogZmFsc2UsXG4gICAgZXhwb3J0Q1NWOiBmYWxzZSxcbiAgICBib290c3RyYXA0OiBmYWxzZVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgY29uc3Qgc3RhdGUgPSB7fTtcbiAgICB0aGlzLl8gPSBudWxsO1xuICAgIHRoaXMub25DbGVhciA9IHRoaXMub25DbGVhci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TZWFyY2ggPSB0aGlzLm9uU2VhcmNoLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNvbHVtblRvZ2dsZSA9IHRoaXMub25Db2x1bW5Ub2dnbGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNldERlcGVuZGVuY3lNb2R1bGVzID0gdGhpcy5zZXREZXBlbmRlbmN5TW9kdWxlcy5iaW5kKHRoaXMpO1xuXG4gICAgaWYgKHByb3BzLmNvbHVtblRvZ2dsZSkge1xuICAgICAgc3RhdGUuY29sdW1uVG9nZ2xlID0gcHJvcHMuY29sdW1uc1xuICAgICAgICAucmVkdWNlKChvYmosIGNvbHVtbikgPT4ge1xuICAgICAgICAgIG9ialtjb2x1bW4uZGF0YUZpZWxkXSA9ICFjb2x1bW4uaGlkZGVuO1xuICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgc3RhdGUuc2VhcmNoVGV4dCA9IHR5cGVvZiBwcm9wcy5zZWFyY2ggPT09ICdvYmplY3QnID8gKHByb3BzLnNlYXJjaC5kZWZhdWx0U2VhcmNoIHx8ICcnKSA6ICcnO1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgbGV0IGNvbHVtblRvZ2dsZSA9IHRoaXMuc3RhdGUuY29sdW1uVG9nZ2xlO1xuICAgIGlmIChuZXh0UHJvcHMuY29sdW1uVG9nZ2xlKSB7XG4gICAgICBjb2x1bW5Ub2dnbGUgPSBuZXh0UHJvcHMuY29sdW1uc1xuICAgICAgICAucmVkdWNlKChvYmosIGNvbHVtbikgPT4ge1xuICAgICAgICAgIG9ialtjb2x1bW4uZGF0YUZpZWxkXSA9ICFjb2x1bW4uaGlkZGVuO1xuICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29sdW1uVG9nZ2xlID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgY29sdW1uVG9nZ2xlXG4gICAgfSk7XG4gIH1cblxuICBvblNlYXJjaChzZWFyY2hUZXh0KSB7XG4gICAgaWYgKHNlYXJjaFRleHQgIT09IHRoaXMuc3RhdGUuc2VhcmNoVGV4dCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlYXJjaFRleHQgfSk7XG4gICAgfVxuICB9XG5cbiAgb25DbGVhcigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2VhcmNoVGV4dDogJycgfSk7XG4gIH1cblxuICBvbkNvbHVtblRvZ2dsZShkYXRhRmllbGQpIHtcbiAgICBjb25zdCB7IGNvbHVtblRvZ2dsZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb2x1bW5Ub2dnbGVbZGF0YUZpZWxkXSA9ICFjb2x1bW5Ub2dnbGVbZGF0YUZpZWxkXTtcbiAgICB0aGlzLnNldFN0YXRlKCh7XG4gICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgY29sdW1uVG9nZ2xlXG4gICAgfSkpO1xuICB9XG4gIC8qKlxuICAgKiBcbiAgICogQHBhcmFtIHsqfSBfIFxuICAgKiB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIG9ubHkgb25lIHRpbWUgd2hlbiB0YWJsZSByZW5kZXJcbiAgICogcmVhY3QtYm9vdHN0cmFwLXRhYmxlLW5leHQvc3JjL2NvbnRleHQvaW5kZXguanMgd2lsbCBjYWxsIHRoaXMgY2IgZm9yIHBhc3NpbmcgdGhlIF8gbW9kdWxlXG4gICAqIFBsZWFzZSBjb25zaWRlciB0byBleHRyYWN0IGEgY29tbW9uIG1vZHVsZSB0byBoYW5kbGUgXyBtb2R1bGUuXG4gICAqIHRoaXMgaXMganVzdCBhIHF1aWNrIGZpeFxuICAgKi9cbiAgc2V0RGVwZW5kZW5jeU1vZHVsZXMoXykge1xuICAgIHRoaXMuXyA9IF87XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgYmFzZVByb3BzID0ge1xuICAgICAga2V5RmllbGQ6IHRoaXMucHJvcHMua2V5RmllbGQsXG4gICAgICBjb2x1bW5zOiB0aGlzLnByb3BzLmNvbHVtbnMsXG4gICAgICBkYXRhOiB0aGlzLnByb3BzLmRhdGEsXG4gICAgICBib290c3RyYXA0OiB0aGlzLnByb3BzLmJvb3RzdHJhcDQsXG4gICAgICBzZXREZXBlbmRlbmN5TW9kdWxlczogdGhpcy5zZXREZXBlbmRlbmN5TW9kdWxlcyxcbiAgICAgIHJlZ2lzdGVyRXhwb3NlZEFQSTogdGhpcy5yZWdpc3RlckV4cG9zZWRBUElcbiAgICB9O1xuICAgIGlmICh0aGlzLnByb3BzLnNlYXJjaCkge1xuICAgICAgYmFzZVByb3BzLnNlYXJjaCA9IHtcbiAgICAgICAgc2VhcmNoQ29udGV4dDogY3JlYXRlU2VhcmNoQ29udGV4dCh0aGlzLnByb3BzLnNlYXJjaCksXG4gICAgICAgIHNlYXJjaFRleHQ6IHRoaXMuc3RhdGUuc2VhcmNoVGV4dFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuY29sdW1uVG9nZ2xlKSB7XG4gICAgICBiYXNlUHJvcHMuY29sdW1uVG9nZ2xlID0ge1xuICAgICAgICB0b2dnbGVzOiB0aGlzLnN0YXRlLmNvbHVtblRvZ2dsZVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sa2l0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17IHtcbiAgICAgICAgc2VhcmNoUHJvcHM6IHtcbiAgICAgICAgICBzZWFyY2hUZXh0OiB0aGlzLnN0YXRlLnNlYXJjaFRleHQsXG4gICAgICAgICAgb25TZWFyY2g6IHRoaXMub25TZWFyY2gsXG4gICAgICAgICAgb25DbGVhcjogdGhpcy5vbkNsZWFyXG4gICAgICAgIH0sXG4gICAgICAgIGNzdlByb3BzOiB7XG4gICAgICAgICAgb25FeHBvcnQ6IHRoaXMuaGFuZGxlRXhwb3J0Q1NWXG4gICAgICAgIH0sXG4gICAgICAgIGNvbHVtblRvZ2dsZVByb3BzOiB7XG4gICAgICAgICAgY29sdW1uczogdGhpcy5wcm9wcy5jb2x1bW5zLFxuICAgICAgICAgIHRvZ2dsZXM6IHRoaXMuc3RhdGUuY29sdW1uVG9nZ2xlLFxuICAgICAgICAgIG9uQ29sdW1uVG9nZ2xlOiB0aGlzLm9uQ29sdW1uVG9nZ2xlXG4gICAgICAgIH0sXG4gICAgICAgIGJhc2VQcm9wc1xuICAgICAgfSB9XG4gICAgICA+XG4gICAgICAgIHsgdGhpcy5wcm9wcy5jaGlsZHJlbiB9XG4gICAgICA8L1Rvb2xraXRDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBQcm92aWRlcjogVG9vbGtpdFByb3ZpZGVyLFxuICBDb25zdW1lcjogVG9vbGtpdENvbnRleHQuQ29uc3VtZXJcbn07XG4iLCJpbXBvcnQgT3BlcmF0aW9uIGZyb20gJy4vc3JjL29wJztcblxuZXhwb3J0IGRlZmF1bHQgQmFzZSA9PlxuICBjbGFzcyBTdGF0ZWxlc3NPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb24uY3N2T3BlcmF0aW9uKEJhc2UpIHtcbiAgICByZWdpc3RlckV4cG9zZWRBUEkgPSAodGFibGVFeHBvc2VkQVBJRW1pdHRlcikgPT4ge1xuICAgICAgdGhpcy50YWJsZUV4cG9zZWRBUElFbWl0dGVyID0gdGFibGVFeHBvc2VkQVBJRW1pdHRlcjtcbiAgICB9XG4gIH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBUb29sa2l0Q29udGV4dCBmcm9tICcuL2NvbnRleHQnO1xuXG5jb25zdCBUb29sa2l0cHJvdmlkZXIgPSBwcm9wcyA9PiAoXG4gIDxUb29sa2l0Q29udGV4dC5Qcm92aWRlciB7IC4uLnByb3BzIH0+XG4gICAgPFRvb2xraXRDb250ZXh0LkNvbnN1bWVyPlxuICAgICAge1xuICAgICAgICB0b29rS2l0UHJvcHMgPT4gcHJvcHMuY2hpbGRyZW4odG9va0tpdFByb3BzKVxuICAgICAgfVxuICAgIDwvVG9vbGtpdENvbnRleHQuQ29uc3VtZXI+XG4gIDwvVG9vbGtpdENvbnRleHQuUHJvdmlkZXI+XG4pO1xuXG5Ub29sa2l0cHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgVG9vbGtpdHByb3ZpZGVyO1xuIiwiLyogZXNsaW50IGNhbWVsY2FzZTogMCAqL1xuLyogZXNsaW50IG5vLXJldHVybi1hc3NpZ246IDAgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jb25zdCBoYW5kbGVEZWJvdW5jZSA9IChmdW5jLCB3YWl0LCBpbW1lZGlhdGUpID0+IHtcbiAgbGV0IHRpbWVvdXQ7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb25zdCBsYXRlciA9ICgpID0+IHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuXG4gICAgICBpZiAoIWltbWVkaWF0ZSkge1xuICAgICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG5cbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG5cbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCB8fCAwKTtcblxuICAgIGlmIChjYWxsTm93KSB7XG4gICAgICBmdW5jLmFwcHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH07XG59O1xuXG5jbGFzcyBTZWFyY2hCYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHByb3BzLnNlYXJjaFRleHRcbiAgICB9O1xuICB9XG5cbiAgb25DaGFuZ2VWYWx1ZSA9IChlKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgfVxuXG4gIG9uS2V5dXAgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBkZWxheSwgb25TZWFyY2ggfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZGVib3VuY2VDYWxsYmFjayA9IGhhbmRsZURlYm91bmNlKCgpID0+IHtcbiAgICAgIG9uU2VhcmNoKHRoaXMuaW5wdXQudmFsdWUpO1xuICAgIH0sIGRlbGF5KTtcbiAgICBkZWJvdW5jZUNhbGxiYWNrKCk7XG4gIH1cblxuICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IG5leHRQcm9wcy5zZWFyY2hUZXh0IH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlLFxuICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICB0YWJsZUlkLFxuICAgICAgc3JUZXh0XG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGxhYmVsXG4gICAgICAgIGh0bWxGb3I9eyBgc2VhcmNoLWJhci0ke3RhYmxlSWR9YCB9XG4gICAgICAgIGNsYXNzTmFtZT1cInNlYXJjaC1sYWJlbFwiXG4gICAgICA+XG4gICAgICAgIDxzcGFuIGlkPXsgYHNlYXJjaC1iYXItJHt0YWJsZUlkfS1sYWJlbGAgfSBjbGFzc05hbWU9XCJzci1vbmx5XCI+XG4gICAgICAgICAgeyBzclRleHQgfVxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHJlZj17IG4gPT4gdGhpcy5pbnB1dCA9IG4gfVxuICAgICAgICAgIGlkPXsgYHNlYXJjaC1iYXItJHt0YWJsZUlkfWAgfVxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICBzdHlsZT17IHN0eWxlIH1cbiAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9eyBgc2VhcmNoLWJhci0ke3RhYmxlSWR9LWxhYmVsYCB9XG4gICAgICAgICAgb25LZXlVcD17ICgpID0+IHRoaXMub25LZXl1cCgpIH1cbiAgICAgICAgICBvbkNoYW5nZT17IHRoaXMub25DaGFuZ2VWYWx1ZSB9XG4gICAgICAgICAgY2xhc3NOYW1lPXsgYGZvcm0tY29udHJvbCAke2NsYXNzTmFtZX1gIH1cbiAgICAgICAgICB2YWx1ZT17IHRoaXMuc3RhdGUudmFsdWUgfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXsgcGxhY2Vob2xkZXIgfHwgU2VhcmNoQmFyLmRlZmF1bHRQcm9wcy5wbGFjZWhvbGRlciB9XG4gICAgICAgIC8+XG4gICAgICA8L2xhYmVsPlxuICAgICk7XG4gIH1cbn1cblxuU2VhcmNoQmFyLnByb3BUeXBlcyA9IHtcbiAgb25TZWFyY2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBkZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgc2VhcmNoVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgdGFibGVJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3JUZXh0OiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5TZWFyY2hCYXIuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxuICBzdHlsZToge30sXG4gIHBsYWNlaG9sZGVyOiAnU2VhcmNoJyxcbiAgZGVsYXk6IDI1MCxcbiAgc2VhcmNoVGV4dDogJycsXG4gIHRhYmxlSWQ6ICcwJyxcbiAgc3JUZXh0OiAnU2VhcmNoIHRoaXMgdGFibGUnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hCYXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgQ2xlYXJCdXR0b24gPSAoe1xuICBvbkNsZWFyLFxuICB0ZXh0LFxuICBjbGFzc05hbWVcbn0pID0+IChcbiAgPGJ1dHRvbiBjbGFzc05hbWU9eyBgYnRuIGJ0bi1kZWZhdWx0ICR7Y2xhc3NOYW1lfWAgfSBvbkNsaWNrPXsgb25DbGVhciB9PnsgdGV4dCB9PC9idXR0b24+XG4pO1xuXG5DbGVhckJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIG9uQ2xlYXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdGV4dDogUHJvcFR5cGVzLnN0cmluZ1xufTtcblxuQ2xlYXJCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICB0ZXh0OiAnQ2xlYXInLFxuICBjbGFzc05hbWU6ICcnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDbGVhckJ1dHRvbjtcbiIsImltcG9ydCBTZWFyY2hCYXIgZnJvbSAnLi9TZWFyY2hCYXInO1xuaW1wb3J0IENsZWFyU2VhcmNoQnV0dG9uIGZyb20gJy4vY2xlYXItYnV0dG9uJztcblxuZXhwb3J0IGRlZmF1bHQgeyBTZWFyY2hCYXIsIENsZWFyU2VhcmNoQnV0dG9uIH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgRXhwb3J0Q1NWQnV0dG9uID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvbkV4cG9ydCxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgLi4ucmVzdFxuICB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIGNsYXNzTmFtZT17IGByZWFjdC1icy10YWJsZS1jc3YtYnRuIGJ0biBidG4tZGVmYXVsdCAke2NsYXNzTmFtZX1gIH1cbiAgICAgIG9uQ2xpY2s9eyAoKSA9PiBvbkV4cG9ydCgpIH1cbiAgICAgIHsgLi4ucmVzdCB9XG4gICAgPlxuICAgICAgeyBjaGlsZHJlbiB9XG4gICAgPC9idXR0b24+XG4gICk7XG59O1xuXG5FeHBvcnRDU1ZCdXR0b24ucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgb25FeHBvcnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5FeHBvcnRDU1ZCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxuICBzdHlsZToge31cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEV4cG9ydENTVkJ1dHRvbjtcbiIsImltcG9ydCBFeHBvcnRDU1ZCdXR0b24gZnJvbSAnLi9idXR0b24nO1xuXG5leHBvcnQgZGVmYXVsdCB7IEV4cG9ydENTVkJ1dHRvbiB9O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNvbnN0IFRvZ2dsZUxpc3QgPSAoe1xuICBjb2x1bW5zLFxuICBvbkNvbHVtblRvZ2dsZSxcbiAgdG9nZ2xlcyxcbiAgY29udGV4dHVhbCxcbiAgY2xhc3NOYW1lLFxuICBidG5DbGFzc05hbWVcbn0pID0+IChcbiAgPGRpdiBjbGFzc05hbWU9eyBgYnRuLWdyb3VwIGJ0bi1ncm91cC10b2dnbGUgJHtjbGFzc05hbWV9YCB9IGRhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiPlxuICAgIHtcbiAgICAgIGNvbHVtbnNcbiAgICAgICAgLm1hcChjb2x1bW4gPT4gKHtcbiAgICAgICAgICAuLi5jb2x1bW4sXG4gICAgICAgICAgdG9nZ2xlOiB0b2dnbGVzW2NvbHVtbi5kYXRhRmllbGRdXG4gICAgICAgIH0pKVxuICAgICAgICAubWFwKGNvbHVtbiA9PiAoXG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBrZXk9eyBjb2x1bW4uZGF0YUZpZWxkIH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17IGAke2J0bkNsYXNzTmFtZX0gYnRuIGJ0bi0ke2NvbnRleHR1YWx9ICR7Y29sdW1uLnRvZ2dsZSA/ICdhY3RpdmUnIDogJyd9YCB9XG4gICAgICAgICAgICBkYXRhLXRvZ2dsZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBhcmlhLXByZXNzZWQ9eyBjb2x1bW4udG9nZ2xlID8gJ3RydWUnIDogJ2ZhbHNlJyB9XG4gICAgICAgICAgICBvbkNsaWNrPXsgKCkgPT4gb25Db2x1bW5Ub2dnbGUoY29sdW1uLmRhdGFGaWVsZCkgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHsgY29sdW1uLnRleHQgfVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICApKVxuICAgIH1cbiAgPC9kaXY+XG4pO1xuXG5Ub2dnbGVMaXN0LnByb3BUeXBlcyA9IHtcbiAgY29sdW1uczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIHRvZ2dsZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgb25Db2x1bW5Ub2dnbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGJ0bkNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0dWFsOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5Ub2dnbGVMaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgYnRuQ2xhc3NOYW1lOiAnJyxcbiAgY2xhc3NOYW1lOiAnJyxcbiAgY29udGV4dHVhbDogJ3ByaW1hcnknXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb2dnbGVMaXN0O1xuIiwiaW1wb3J0IFRvZ2dsZUxpc3QgZnJvbSAnLi90b2dnbGUtbGlzdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHsgVG9nZ2xlTGlzdCB9O1xuIiwiaW1wb3J0IENvbnRleHQgZnJvbSAnLi9jb250ZXh0JztcbmltcG9ydCBUb29sa2l0UHJvdmlkZXIgZnJvbSAnLi9wcm92aWRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2xraXRQcm92aWRlcjtcbmV4cG9ydCBjb25zdCBUb29sa2l0Q29udGV4dCA9IENvbnRleHQ7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFNlYXJjaCB9IGZyb20gJy4vc3JjL3NlYXJjaCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENTVkV4cG9ydCB9IGZyb20gJy4vc3JjL2Nzdic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENvbHVtblRvZ2dsZSB9IGZyb20gJy4vc3JjL2NvbHVtbi10b2dnbGUnO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNzg3X18iLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImVyciIsIkVycm9yIiwibmFtZSIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJpZ2ludCIsImJvb2wiLCJmdW5jIiwibnVtYmVyIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImIiLCJhIiwiYXV0b0JvbSIsImNvbnNvbGUiLCJ3YXJuIiwidGVzdCIsInR5cGUiLCJCbG9iIiwiYyIsImQiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJyZXNwb25zZVR5cGUiLCJvbmxvYWQiLCJnIiwicmVzcG9uc2UiLCJvbmVycm9yIiwiZXJyb3IiLCJzZW5kIiwic3RhdHVzIiwiZSIsImRpc3BhdGNoRXZlbnQiLCJNb3VzZUV2ZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50Iiwid2luZG93IiwiZiIsImdsb2JhbCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInNhdmVBcyIsIkhUTUxBbmNob3JFbGVtZW50IiwicHJvdG90eXBlIiwiaCIsImkiLCJVUkwiLCJ3ZWJraXRVUkwiLCJqIiwiY3JlYXRlRWxlbWVudCIsImRvd25sb2FkIiwicmVsIiwiaHJlZiIsIm9yaWdpbiIsInRhcmdldCIsImNyZWF0ZU9iamVjdFVSTCIsInNldFRpbWVvdXQiLCJyZXZva2VPYmplY3RVUkwiLCJtc1NhdmVPck9wZW5CbG9iIiwidGl0bGUiLCJib2R5IiwiaW5uZXJUZXh0IiwiSFRNTEVsZW1lbnQiLCJzYWZhcmkiLCJGaWxlUmVhZGVyIiwiayIsIm9ubG9hZGVuZCIsInJlc3VsdCIsInJlcGxhY2UiLCJyZWFkQXNEYXRhVVJMIiwibCIsIm0iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnbG9iYWxUaGlzIiwidGhpcyIsIkZ1bmN0aW9uIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJnZXRNZXRhSW5mbyIsImNvbHVtbnMiLCJtYXAiLCJjb2x1bW4iLCJmaWVsZCIsImRhdGFGaWVsZCIsImNzdlR5cGUiLCJTdHJpbmciLCJmb3JtYXR0ZXIiLCJjc3ZGb3JtYXR0ZXIiLCJmb3JtYXRFeHRyYURhdGEiLCJoZWFkZXIiLCJjc3ZUZXh0IiwidGV4dCIsImV4cG9ydCIsImNzdkV4cG9ydCIsInJvdyIsIk51bWJlciIsInJvd1NwYW4iLCJjb2xTcGFuIiwiZm9vdGVyIiwiZm9vdGVyRm9ybWF0dGVyIiwiZmlsdGVyIiwiXyIsInRyYW5zZm9ybSIsImRhdGEiLCJtZXRhIiwic2VwYXJhdG9yIiwiaWdub3JlSGVhZGVyIiwiaWdub3JlRm9vdGVyIiwidmlzaWJsZUNvbHVtbnMiLCJjb250ZW50Iiwiam9pbiIsImxlbmd0aCIsInJvd0luZGV4IiwiY2VsbENvbnRlbnQiLCJjb2x1bW5EYXRhIiwicGx1Y2siLCJzYXZlIiwibm9BdXRvQk9NIiwiZmlsZU5hbWUiLCJibG9iVHlwZSIsIkZpbGVTYXZlciIsImNzdkRlZmF1bHRPcHRpb25zIiwiZXhwb3J0QWxsIiwib25seUV4cG9ydFNlbGVjdGlvbiIsIkJhc2UiLCJzb3VyY2UiLCJleHBvcnRDU1YiLCJrZXlGaWVsZCIsIm9wdGlvbnMiLCJvbmx5RXhwb3J0RmlsdGVyZWQiLCJwYXlsb2FkIiwidGFibGVFeHBvc2VkQVBJRW1pdHRlciIsImVtaXQiLCJzZWxlY3Rpb25zIiwiZmluZCIsInNlbCIsInNlYXJjaEZvcm1hdHRlZCIsImFmdGVyU2VhcmNoIiwib25Db2x1bW5NYXRjaCIsImlzUmVtb3RlU2VhcmNoIiwiaGFuZGxlUmVtb3RlU2VhcmNoQ2hhbmdlIiwiU2VhcmNoQ29udGV4dCIsIlJlYWN0IiwiU2VhcmNoUHJvdmlkZXIiLCJpbml0aWFsRGF0YSIsInNlYXJjaFRleHQiLCJzZWFyY2giLCJ0cmlnZ2VyTGlzdGVuZXIiLCJzdGF0ZSIsInNraXBJbml0IiwiZGF0YUNoYW5nZUxpc3RlbmVyIiwibmV4dFByb3BzIiwic2V0U3RhdGUiLCJpc0VxdWFsIiwidG9Mb3dlckNhc2UiLCJyaWR4IiwiY2lkeCIsInNlYXJjaGFibGUiLCJ0YXJnZXRWYWx1ZSIsImZpbHRlclZhbHVlIiwidG9TdHJpbmciLCJpbmRleE9mIiwiUHJvdmlkZXIiLCJjaGlsZHJlbiIsIkNvbnN1bWVyIiwiVG9vbGtpdENvbnRleHQiLCJUb29sa2l0UHJvdmlkZXIiLCJvbkNsZWFyIiwiYmluZCIsIm9uU2VhcmNoIiwib25Db2x1bW5Ub2dnbGUiLCJzZXREZXBlbmRlbmN5TW9kdWxlcyIsImNvbHVtblRvZ2dsZSIsInJlZHVjZSIsImhpZGRlbiIsImRlZmF1bHRTZWFyY2giLCJiYXNlUHJvcHMiLCJib290c3RyYXA0IiwicmVnaXN0ZXJFeHBvc2VkQVBJIiwic2VhcmNoQ29udGV4dCIsImNyZWF0ZVNlYXJjaENvbnRleHQiLCJ0b2dnbGVzIiwic2VhcmNoUHJvcHMiLCJjc3ZQcm9wcyIsIm9uRXhwb3J0IiwiaGFuZGxlRXhwb3J0Q1NWIiwiY29sdW1uVG9nZ2xlUHJvcHMiLCJPcGVyYXRpb24iLCJUb29sa2l0cHJvdmlkZXIiLCJ0b29rS2l0UHJvcHMiLCJwcm9wVHlwZXMiLCJTZWFyY2hCYXIiLCJ3YWl0IiwiaW1tZWRpYXRlIiwidGltZW91dCIsImRlbGF5IiwiaW5wdXQiLCJjYWxsTm93IiwiY2xlYXJUaW1lb3V0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJhcHB5IiwiY2xhc3NOYW1lIiwic3R5bGUiLCJwbGFjZWhvbGRlciIsInRhYmxlSWQiLCJzclRleHQiLCJodG1sRm9yIiwiaWQiLCJyZWYiLCJvbktleVVwIiwib25LZXl1cCIsIm9uQ2hhbmdlIiwib25DaGFuZ2VWYWx1ZSIsImRlZmF1bHRQcm9wcyIsIkNsZWFyQnV0dG9uIiwib25DbGljayIsIkNsZWFyU2VhcmNoQnV0dG9uIiwiRXhwb3J0Q1NWQnV0dG9uIiwicmVzdCIsIlRvZ2dsZUxpc3QiLCJjb250ZXh0dWFsIiwiYnRuQ2xhc3NOYW1lIiwidG9nZ2xlIiwiQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=