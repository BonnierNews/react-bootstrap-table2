/*! For license information please see react-bootstrap-table2-editor.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.ReactBootstrapTable2Editor=t(require("react")):e.ReactBootstrapTable2Editor=t(e.React)}(self,(e=>(()=>{var t={184:(e,t)=>{var r;!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)){if(r.length){var u=o.apply(null,r);u&&e.push(u)}}else if("object"===i){if(r.toString!==Object.prototype.toString&&!r.toString.toString().includes("[native code]")){e.push(r.toString());continue}for(var a in r)n.call(r,a)&&r[a]&&e.push(a)}}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},703:(e,t,r)=>{"use strict";var n=r(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,i,u){if(u!==n){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var r={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return r.PropTypes=r,r}},697:(e,t,r)=>{e.exports=r(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},787:t=>{"use strict";t.exports=e}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{"use strict";n.r(o),n.d(o,{Type:()=>Je,default:()=>Ge});var e=n(787),t=n.n(e),r=n(697),i=n.n(r),u="click",a="dbclick",c={TEXT:"text",SELECT:"select",TEXTAREA:"textarea",CHECKBOX:"checkbox",DATE:"date"},l=["nonEditableRows","errorMessage"],s=["options"];function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function y(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){g(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,j(n.key),n)}}function v(e,t){return v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},v(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=O(e);if(t){var o=O(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===f(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return m(e)}(this,r)}}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function O(e){return O=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},O(e)}function g(e,t,r){return(t=j(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function j(e){var t=function(e,t){if("object"!==f(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==f(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===f(t)?t:String(t)}var w=t().createContext();const P=function(e,r,n,o){var c=function(i){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}(p,i);var u,a,c,f=h(p);function p(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),(t=f.call(this,e)).doUpdate=t.doUpdate.bind(m(t)),t.startEditing=t.startEditing.bind(m(t)),t.escapeEditing=t.escapeEditing.bind(m(t)),t.completeEditing=t.completeEditing.bind(m(t)),t.handleCellUpdate=t.handleCellUpdate.bind(m(t)),t.state={ridx:null,cidx:null,message:null},t}return u=p,a=[{key:"UNSAFE_componentWillReceiveProps",value:function(e){e.cellEdit&&n()&&(e.cellEdit.options.errorMessage?this.setState((function(){return{message:e.cellEdit.options.errorMessage}})):this.escapeEditing())}},{key:"handleCellUpdate",value:function(t,n,o){var i=this,u=r.typeConvert(n.type,o),a=this.props.cellEdit.options.beforeSaveCell,c=e.get(t,n.dataField);if(e.isFunction(a)){var l=a(c,u,t,n,(function(){arguments.length>0&&void 0!==arguments[0]&&!arguments[0]?i.escapeEditing():i.doUpdate(t,n,u)}));if(e.isObject(l)&&l.async)return}this.doUpdate(t,n,u)}},{key:"doUpdate",value:function(t,i,u){var a=this.props,c=a.keyField,l=a.cellEdit,s=a.data,f=l.options.afterSaveCell,p=e.get(t,c),y=e.get(t,i.dataField);n()?o(p,i.dataField,u):(r.editCell(s,c,p,i.dataField,u),e.isFunction(f)&&f(y,u,t,i),this.completeEditing())}},{key:"completeEditing",value:function(){this.setState((function(){return{ridx:null,cidx:null,message:null}}))}},{key:"startEditing",value:function(e,t){var r=this,n=this.props.selectRow;n&&!n.clickToEdit&&n.clickToSelect||r.setState((function(){return{ridx:e,cidx:t}}))}},{key:"escapeEditing",value:function(){this.setState((function(){return{ridx:null,cidx:null}}))}},{key:"render",value:function(){var r=this.props.cellEdit,n=r.options,o=n.nonEditableRows,i=(n.errorMessage,d(n,l)),u=d(r,s),a=y(y(y(y({},i),u),this.state),{},{nonEditableRows:e.isDefined(o)?o():[],onStart:this.startEditing,onEscape:this.escapeEditing,onUpdate:this.handleCellUpdate});return t().createElement(w.Provider,{value:y({},a)},this.props.children)}}],a&&b(u.prototype,a),c&&b(u,c),Object.defineProperty(u,"prototype",{writable:!1}),p}(t().Component);return g(c,"propTypes",{data:i().array.isRequired,selectRow:i().object,options:i().shape({mode:i().oneOf([u,a]).isRequired,onErrorMessageDisappear:i().func,blurToSave:i().bool,beforeSaveCell:i().func,afterSaveCell:i().func,onStartEdit:i().func,nonEditableRows:i().func,timeToCloseMessage:i().number,errorMessage:i().any})}),{Provider:c}};var S=w.Consumer;function E(){return E=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},E.apply(this,arguments)}const T=function(e,r){function n(n){return t().createElement(S,null,(function(o){return function(n,o){var i=n.value,c=!(o.nonEditableRows.length>0&&o.nonEditableRows.indexOf(i)>-1),l={};return r&&o.mode===a&&(l.DELAY_FOR_DBCLICK=200),t().createElement(e,E({},n,l,{editingRowIdx:o.ridx,editingColIdx:o.cidx,editable:c,onStart:o.onStart,clickToEdit:o.mode===u,dbclickToEdit:o.mode===a}))}(n,o)}))}return n.displayName="WithCellEditingRowConsumer",n};var x=n(184),C=n.n(x);function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}var R=["defaultValue","didMount","getOptions","className"];function _(){return _=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_.apply(this,arguments)}function M(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function D(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?M(Object(r),!0).forEach((function(t){N(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):M(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function N(e,t,r){return(t=I(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function V(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function B(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,I(n.key),n)}}function I(e){var t=function(e,t){if("object"!==k(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==k(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===k(t)?t:String(t)}function F(e,t){return F=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},F(e,t)}function A(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=U(e);if(t){var o=U(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===k(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return K(e)}(this,r)}}function K(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function U(e){return U=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},U(e)}var q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&F(e,t)}(u,e);var r,n,o,i=A(u);function u(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),t=i.call(this,e);var r=e.options;return e.getOptions&&(r=e.getOptions(t.setOptions.bind(K(t)),{row:e.row,column:e.column})||[]),t.state={options:r},t}return r=u,(n=[{key:"componentDidMount",value:function(){var e=this.props,t=e.defaultValue,r=e.didMount;this.select.value=t,this.select.focus(),r&&r()}},{key:"setOptions",value:function(e){this.setState({options:e})}},{key:"getValue",value:function(){return this.select.value}},{key:"render",value:function(){var e=this,r=this.props,n=r.defaultValue,o=(r.didMount,r.getOptions,r.className),i=V(r,R),u=C()("form-control editor edit-select",o),a=D(D({},i),{},{className:u});return t().createElement("select",_({},a,{ref:function(t){return e.select=t},defaultValue:n}),this.state.options.map((function(e){var r=e.label,n=e.value;return t().createElement("option",{key:n,value:n},r)})))}}])&&B(r.prototype,n),o&&B(r,o),Object.defineProperty(r,"prototype",{writable:!1}),u}(e.Component);q.propTypes={row:i().object.isRequired,column:i().object.isRequired,defaultValue:i().oneOfType([i().string,i().number]),className:i().string,style:i().object,options:i().oneOfType([i().arrayOf(i().shape({label:i().string,value:i().any}))]),didMount:i().func,getOptions:i().func},q.defaultProps={className:"",defaultValue:"",style:{},options:[],didMount:void 0,getOptions:void 0};const L=q;function W(e){return W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},W(e)}var X=["defaultValue","didMount","className","autoSelectText"];function H(){return H=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},H.apply(this,arguments)}function Y(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function $(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==W(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==W(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===W(i)?i:String(i)),n)}var o,i}function z(e,t){return z=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},z(e,t)}function G(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Q(e);if(t){var o=Q(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===W(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return J(e)}(this,r)}}function J(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Q(e){return Q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Q(e)}var Z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&z(e,t)}(u,e);var r,n,o,i=G(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e)).handleKeyDown=t.handleKeyDown.bind(J(t)),t}return r=u,(n=[{key:"componentDidMount",value:function(){var e=this.props,t=e.defaultValue,r=e.didMount,n=e.autoSelectText;this.text.value=t,this.text.focus(),n&&this.text.select(),r&&r()}},{key:"getValue",value:function(){return this.text.value}},{key:"handleKeyDown",value:function(e){(13!==e.keyCode||e.shiftKey)&&this.props.onKeyDown&&this.props.onKeyDown(e)}},{key:"render",value:function(){var e=this,r=this.props,n=(r.defaultValue,r.didMount,r.className),o=(r.autoSelectText,Y(r,X)),i=C()("form-control editor edit-textarea",n);return t().createElement("textarea",H({ref:function(t){return e.text=t},type:"textarea",className:i},o,{onKeyDown:this.handleKeyDown}))}}])&&$(r.prototype,n),o&&$(r,o),Object.defineProperty(r,"prototype",{writable:!1}),u}(e.Component);Z.propTypes={className:i().oneOfType([i().string,i().object]),defaultValue:i().oneOfType([i().string,i().number]),onKeyDown:i().func,autoSelectText:i().bool,didMount:i().func},Z.defaultProps={className:"",defaultValue:"",autoSelectText:!1,onKeyDown:void 0,didMount:void 0};const ee=Z;function te(e){return te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},te(e)}var re=["defaultValue","didMount","className"];function ne(){return ne=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},ne.apply(this,arguments)}function oe(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function ie(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,u,a=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(a.push(n.value),a.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(u=r.return(),Object(u)!==u))return}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ue(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return ue(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function ae(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==te(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==te(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===te(i)?i:String(i)),n)}var o,i}function ce(e,t){return ce=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ce(e,t)}function le(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=fe(e);if(t){var o=fe(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===te(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return se(e)}(this,r)}}function se(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function fe(e){return fe=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},fe(e)}var pe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ce(e,t)}(u,e);var r,n,o,i=le(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e)).state={checked:e.defaultValue.toString()===e.value.split(":")[0]},t.handleChange=t.handleChange.bind(se(t)),t}return r=u,(n=[{key:"componentDidMount",value:function(){var e=this.props.didMount;this.checkbox.focus(),e&&e()}},{key:"getValue",value:function(){var e=ie(this.props.value.split(":"),2),t=e[0],r=e[1];return this.checkbox.checked?t:r}},{key:"handleChange",value:function(e){this.props.onChange&&this.props.onChange(e);var t=e.target;this.setState((function(){return{checked:t.checked}}))}},{key:"render",value:function(){var e=this,r=this.props,n=(r.defaultValue,r.didMount,r.className),o=oe(r,re),i=C()("editor edit-chseckbox checkbox",n);return t().createElement("input",ne({ref:function(t){return e.checkbox=t},type:"checkbox",className:i},o,{checked:this.state.checked,onChange:this.handleChange}))}}])&&ae(r.prototype,n),o&&ae(r,o),Object.defineProperty(r,"prototype",{writable:!1}),u}(e.Component);pe.propTypes={className:i().oneOfType([i().string,i().object]),value:i().string,defaultValue:i().any,onChange:i().func,didMount:i().func},pe.defaultProps={className:"",value:"on:off",defaultValue:!1,onChange:void 0,didMount:void 0};const ye=pe;function de(e){return de="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},de(e)}var be=["defaultValue","didMount","className"];function ve(){return ve=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},ve.apply(this,arguments)}function he(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function me(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==de(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==de(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===de(i)?i:String(i)),n)}var o,i}function Oe(e,t){return Oe=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Oe(e,t)}function ge(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=je(e);if(t){var o=je(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===de(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,r)}}function je(e){return je=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},je(e)}var we=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Oe(e,t)}(u,e);var r,n,o,i=ge(u);function u(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),i.apply(this,arguments)}return r=u,(n=[{key:"componentDidMount",value:function(){var e=this.props,t=e.defaultValue,r=e.didMount;this.date.valueAsDate=new Date(t),this.date.focus(),r&&r()}},{key:"getValue",value:function(){return this.date.value}},{key:"render",value:function(){var e=this,r=this.props,n=(r.defaultValue,r.didMount,r.className),o=he(r,be),i=C()("form-control editor edit-date",n);return t().createElement("input",ve({ref:function(t){return e.date=t},type:"date",className:i},o))}}])&&me(r.prototype,n),o&&me(r,o),Object.defineProperty(r,"prototype",{writable:!1}),u}(e.Component);we.propTypes={className:i().oneOfType([i().string,i().object]),defaultValue:i().string,didMount:i().func},we.defaultProps={className:"",defaultValue:"",didMount:void 0};const Pe=we;function Se(e){return Se="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Se(e)}var Ee=["defaultValue","didMount","className","autoSelectText"];function Te(){return Te=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Te.apply(this,arguments)}function xe(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function Ce(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==Se(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==Se(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===Se(i)?i:String(i)),n)}var o,i}function ke(e,t){return ke=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ke(e,t)}function Re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=_e(e);if(t){var o=_e(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===Se(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,r)}}function _e(e){return _e=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},_e(e)}var Me=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ke(e,t)}(u,e);var r,n,o,i=Re(u);function u(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),i.apply(this,arguments)}return r=u,(n=[{key:"componentDidMount",value:function(){var e=this.props,t=e.defaultValue,r=e.didMount,n=e.autoSelectText;this.text.value=t,this.text.focus(),n&&this.text.select(),r&&r()}},{key:"getValue",value:function(){return this.text.value}},{key:"render",value:function(){var e=this,r=this.props,n=(r.defaultValue,r.didMount,r.className),o=(r.autoSelectText,xe(r,Ee)),i=C()("form-control editor edit-text",n);return t().createElement("input",Te({ref:function(t){return e.text=t},type:"text",className:i},o))}}])&&Ce(r.prototype,n),o&&Ce(r,o),Object.defineProperty(r,"prototype",{writable:!1}),u}(e.Component);Me.propTypes={className:i().oneOfType([i().string,i().object]),defaultValue:i().oneOfType([i().string,i().number]),autoSelectText:i().bool,didMount:i().func},Me.defaultProps={className:null,defaultValue:"",autoSelectText:!1,didMount:void 0};const De=Me;var Ne=function(e){var r=e.invalidMessage;return t().createElement("div",{className:"alert alert-danger in",role:"alert"},t().createElement("strong",null,r))};Ne.propTypes={invalidMessage:i().string},Ne.defaultProps={invalidMessage:null};const Ve=Ne;function Be(e){return Be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Be(e)}function Ie(){return Ie=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Ie.apply(this,arguments)}function Fe(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Ae(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Fe(Object(r),!0).forEach((function(t){Xe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Fe(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Ke(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,He(n.key),n)}}function Ue(e,t){return Ue=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ue(e,t)}function qe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=We(e);if(t){var o=We(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"===Be(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Le(e)}(this,r)}}function Le(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function We(e){return We=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},We(e)}function Xe(e,t,r){return(t=He(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function He(e){var t=function(e,t){if("object"!==Be(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==Be(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===Be(t)?t:String(t)}const Ye=function(r,n){var o;return o=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ue(e,t)}(l,e);var o,i,u,a=qe(l);function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).indicatorTimer=null,t.clearTimer=t.clearTimer.bind(Le(t)),t.handleBlur=t.handleBlur.bind(Le(t)),t.handleClick=t.handleClick.bind(Le(t)),t.handleKeyDown=t.handleKeyDown.bind(Le(t)),t.beforeComplete=t.beforeComplete.bind(Le(t)),t.asyncbeforeCompete=t.asyncbeforeCompete.bind(Le(t)),t.displayErrorMessage=t.displayErrorMessage.bind(Le(t)),t.state={invalidMessage:null},t}return o=l,i=[{key:"componentWillUnmount",value:function(){this.clearTimer()}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=e.message;r.isDefined(t)&&(this.createTimer(),this.setState((function(){return{invalidMessage:t}})))}},{key:"clearTimer",value:function(){this.indicatorTimer&&clearTimeout(this.indicatorTimer)}},{key:"createTimer",value:function(){var e=this;this.clearTimer();var t=this.props,n=t.timeToCloseMessage,o=t.onErrorMessageDisappear;this.indicatorTimer=r.sleep((function(){e.setState((function(){return{invalidMessage:null}})),r.isFunction(o)&&o()}),n)}},{key:"displayErrorMessage",value:function(e){this.setState((function(){return{invalidMessage:e}})),this.createTimer()}},{key:"asyncbeforeCompete",value:function(e){var t=this;return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{valid:!0},n=r.valid,o=r.message,i=t.props,u=i.onUpdate,a=i.row,c=i.column;n?u(a,c,e):t.displayErrorMessage(o)}}},{key:"beforeComplete",value:function(e){var t=this.props,n=t.onUpdate,o=t.row,i=t.column;if(r.isFunction(i.validator)){var u=i.validator(e,o,i,this.asyncbeforeCompete(e));if(r.isObject(u)){if(u.async)return;if(!u.valid)return void this.displayErrorMessage(u.message)}}n(o,i,e)}},{key:"handleBlur",value:function(){var e=this.props,t=e.onEscape;e.blurToSave?this.beforeComplete(this.editor.getValue()):t()}},{key:"handleKeyDown",value:function(e){var t=this.props.onEscape;27===e.keyCode?t():13===e.keyCode&&this.beforeComplete(this.editor.getValue())}},{key:"handleClick",value:function(e){"TD"!==e.target.tagName&&e.stopPropagation()}},{key:"render",value:function(){var e,o=this,i=this.props,u=i.row,a=i.column,l=i.className,s=i.style,f=i.rowIndex,p=i.columnIndex,y=i.autoSelectText,d=a.dataField,b=r.get(u,d),v=r.isDefined(this.state.invalidMessage),h=a.editorClasses||"";r.isFunction(a.editorClasses)&&(h=a.editorClasses(b,u,f,p));var m=a.editorStyle||{};r.isFunction(a.editorStyle)&&(m=a.editorStyle(b,u,f,p));var O={ref:function(e){return o.editor=e},defaultValue:b,style:m,className:C()({animated:v,shake:v},h),onKeyDown:this.handleKeyDown,onBlur:this.handleBlur};n&&(O.didMount=function(){return n(u,a,f,p)});var g=r.isObject(a.editor);return g?O=Ae(Ae({},O),a.editor):r.isFunction(a.editorRenderer)&&(O=Ae(Ae({},O),{},{onUpdate:this.beforeComplete})),e=r.isFunction(a.editorRenderer)?a.editorRenderer(O,b,u,a,f,p):g&&a.editor.type===c.SELECT?t().createElement(L,Ie({},O,{row:u,column:a})):g&&a.editor.type===c.TEXTAREA?t().createElement(ee,Ie({},O,{autoSelectText:y})):g&&a.editor.type===c.CHECKBOX?t().createElement(ye,O):g&&a.editor.type===c.DATE?t().createElement(Pe,O):t().createElement(De,Ie({},O,{autoSelectText:y})),t().createElement("td",{className:C()("react-bootstrap-table-editing-cell",l),style:s,onClick:this.handleClick},e,v?t().createElement(Ve,{invalidMessage:this.state.invalidMessage}):null)}}],i&&Ke(o.prototype,i),u&&Ke(o,u),Object.defineProperty(o,"prototype",{writable:!1}),l}(e.Component),Xe(o,"propTypes",{row:i().object.isRequired,rowIndex:i().number.isRequired,column:i().object.isRequired,columnIndex:i().number.isRequired,onUpdate:i().func.isRequired,onEscape:i().func.isRequired,timeToCloseMessage:i().number,autoSelectText:i().bool,className:i().string,style:i().object}),Xe(o,"defaultProps",{timeToCloseMessage:3e3,className:null,autoSelectText:!1,style:{}}),o};function $e(){return $e=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},$e.apply(this,arguments)}const ze=function(e,r){var n=Ye(e,r);return function(r){return t().createElement(S,null,(function(o){return function(r,o){var i=e.get(r.row,r.column.dataField),u=r.column.editCellStyle||{},a=r.column.editCellClasses;return e.isFunction(r.column.editCellStyle)&&(u=r.column.editCellStyle(i,r.row,r.rowIndex,r.columnIndex)),e.isFunction(r.column.editCellClasses)&&(a=r.column.editCellClasses(i,r.row,r.rowIndex,r.columnIndex)),t().createElement(n,$e({},r,{className:a,style:u},o))}(r,o)}))}},Ge=function(){return{createContext:P,createEditingCell:ze,withRowLevelCellEdit:T,DBCLICK_TO_CELL_EDIT:a,DELAY_FOR_DBCLICK:200,options:arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}}};var Je=c})(),o})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3QtYm9vdHN0cmFwLXRhYmxlMi1lZGl0b3IvZGlzdC9yZWFjdC1ib290c3RyYXAtdGFibGUyLWVkaXRvci5qcyIsIm1hcHBpbmdzIjoiO0NBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELEVBQVFHLFFBQVEsVUFDUixtQkFBWEMsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLENBQUMsU0FBVUosR0FDUSxpQkFBWkMsUUFDZEEsUUFBb0MsMkJBQUlELEVBQVFHLFFBQVEsVUFFeERKLEVBQWlDLDJCQUFJQyxFQUFRRCxFQUFZLE1BQzFELENBVEQsQ0FTR08sTUFBT0MsNEJDVFYsT0FPQyxXQUNBLGFBRUEsSUFBSUMsRUFBUyxDQUFDLEVBQUVDLGVBR2hCLFNBQVNDLElBR1IsSUFGQSxJQUFJQyxFQUFVLEdBRUxDLEVBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUMxQyxJQUFJRyxFQUFNRixVQUFVRCxHQUNwQixHQUFLRyxFQUFMLENBRUEsSUFBSUMsU0FBaUJELEVBRXJCLEdBQWdCLFdBQVpDLEdBQW9DLFdBQVpBLEVBQzNCTCxFQUFRTSxLQUFLRixRQUNQLEdBQUlHLE1BQU1DLFFBQVFKLElBQ3hCLEdBQUlBLEVBQUlELE9BQVEsQ0FDZixJQUFJTSxFQUFRVixFQUFXVyxNQUFNLEtBQU1OLEdBQy9CSyxHQUNIVCxFQUFRTSxLQUFLRyxFQUVmLE9BQ00sR0FBZ0IsV0FBWkosRUFBc0IsQ0FDaEMsR0FBSUQsRUFBSU8sV0FBYUMsT0FBT0MsVUFBVUYsV0FBYVAsRUFBSU8sU0FBU0EsV0FBV0csU0FBUyxpQkFBa0IsQ0FDckdkLEVBQVFNLEtBQUtGLEVBQUlPLFlBQ2pCLFFBQ0QsQ0FFQSxJQUFLLElBQUlJLEtBQU9YLEVBQ1hQLEVBQU9tQixLQUFLWixFQUFLVyxJQUFRWCxFQUFJVyxJQUNoQ2YsRUFBUU0sS0FBS1MsRUFHaEIsQ0F4QmtCLENBeUJuQixDQUVBLE9BQU9mLEVBQVFp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bUssVUFBWWdGLEVBQ1p0RSxNQUFRb0UsR0FDSHpKLEdBR1gsQ0FJa0I2SixDQUFzQnJQLEVBQU93RixFQUFTLEdBQzNDLENBRWQsRUNqQ0QsY0FBNEIsTUFBTSxDQUNoQzhKLGNBQUFBLEVBQ0FQLGtCQUFBQSxHQUNBUSxxQkFBQUEsRUFDQS9MLHFCQUFBQSxFQUNBMEYsa0JYYitCLElXYy9CekQsUUFOcUIvRyxVQUFBQyxPQUFBLFFBQUEwRCxJQUFBM0QsVUFBQSxHQUFBQSxVQUFBLEdBQUcsQ0FBQyxFQU96QixFQUVLLElBQU04USxHQUFPL0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHVtZCB7XCJyb290XCI6XCJSZWFjdFwiLFwiY29tbW9uanMyXCI6XCJyZWFjdFwiLFwiY29tbW9uanNcIjpcInJlYWN0XCIsXCJhbWRcIjpcInJlYWN0XCJ9Iiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yZWFjdC1ib290c3RyYXAtdGFibGUyLWVkaXRvci9zcmMvY29uc3QuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvcmVhY3QtYm9vdHN0cmFwLXRhYmxlMi1lZGl0b3Ivc3JjL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvcmVhY3QtYm9vdHN0cmFwLXRhYmxlMi1lZGl0b3Ivc3JjL3Jvdy1jb25zdW1lci5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yZWFjdC1ib290c3RyYXAtdGFibGUyLWVkaXRvci9zcmMvZHJvcGRvd24tZWRpdG9yLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3JlYWN0LWJvb3RzdHJhcC10YWJsZTItZWRpdG9yL3NyYy90ZXh0YXJlYS1lZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvcmVhY3QtYm9vdHN0cmFwLXRhYmxlMi1lZGl0b3Ivc3JjL2NoZWNrYm94LWVkaXRvci5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yZWFjdC1ib290c3RyYXAtdGFibGUyLWVkaXRvci9zcmMvZGF0ZS1lZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvcmVhY3QtYm9vdHN0cmFwLXRhYmxlMi1lZGl0b3Ivc3JjL3RleHQtZWRpdG9yLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3JlYWN0LWJvb3RzdHJhcC10YWJsZTItZWRpdG9yL3NyYy9lZGl0b3ItaW5kaWNhdG9yLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3JlYWN0LWJvb3RzdHJhcC10YWJsZTItZWRpdG9yL3NyYy9lZGl0aW5nLWNlbGwuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvcmVhY3QtYm9vdHN0cmFwLXRhYmxlMi1lZGl0b3Ivc3JjL2VkaXRpbmctY2VsbC1jb25zdW1lci5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yZWFjdC1ib290c3RyYXAtdGFibGUyLWVkaXRvci9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJyZWFjdFwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJSZWFjdEJvb3RzdHJhcFRhYmxlMkVkaXRvclwiXSA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJSZWFjdEJvb3RzdHJhcFRhYmxlMkVkaXRvclwiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdKTtcbn0pKHNlbGYsIChfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX183ODdfXykgPT4ge1xucmV0dXJuICIsIi8qIVxuXHRDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cblx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcblx0aHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIG5hdGl2ZUNvZGVTdHJpbmcgPSAnW25hdGl2ZSBjb2RlXSc7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nICYmICFhcmcudG9TdHJpbmcudG9TdHJpbmcoKS5pbmNsdWRlcygnW25hdGl2ZSBjb2RlXScpKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYmlnaW50OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNzg3X187IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImV4cG9ydCBjb25zdCBUSU1FX1RPX0NMT1NFX01FU1NBR0UgPSAzMDAwO1xuZXhwb3J0IGNvbnN0IERFTEFZX0ZPUl9EQkNMSUNLID0gMjAwO1xuZXhwb3J0IGNvbnN0IENMSUNLX1RPX0NFTExfRURJVCA9ICdjbGljayc7XG5leHBvcnQgY29uc3QgREJDTElDS19UT19DRUxMX0VESVQgPSAnZGJjbGljayc7XG5cbmV4cG9ydCBjb25zdCBFRElUVFlQRSA9IHtcbiAgVEVYVDogJ3RleHQnLFxuICBTRUxFQ1Q6ICdzZWxlY3QnLFxuICBURVhUQVJFQTogJ3RleHRhcmVhJyxcbiAgQ0hFQ0tCT1g6ICdjaGVja2JveCcsXG4gIERBVEU6ICdkYXRlJ1xufTtcbiIsIi8qIGVzbGludCByZWFjdC9wcm9wLXR5cGVzOiAwICovXG4vKiBlc2xpbnQgcmVhY3QvcmVxdWlyZS1kZWZhdWx0LXByb3BzOiAwICovXG4vKiBlc2xpbnQgY2FtZWxjYXNlOiAwICovXG4vKiBlc2xpbnQgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXM6IDAgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgQ0xJQ0tfVE9fQ0VMTF9FRElULCBEQkNMSUNLX1RPX0NFTExfRURJVCB9IGZyb20gJy4vY29uc3QnO1xuXG5jb25zdCBDZWxsRWRpdENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5cbmV4cG9ydCBkZWZhdWx0IChcbiAgXyxcbiAgZGF0YU9wZXJhdG9yLFxuICBpc1JlbW90ZUNlbGxFZGl0LFxuICBoYW5kbGVDZWxsQ2hhbmdlXG4pID0+IHtcbiAgY2xhc3MgQ2VsbEVkaXRQcm92aWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgIGRhdGE6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgICAgc2VsZWN0Um93OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgb3B0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgbW9kZTogUHJvcFR5cGVzLm9uZU9mKFtDTElDS19UT19DRUxMX0VESVQsIERCQ0xJQ0tfVE9fQ0VMTF9FRElUXSkuaXNSZXF1aXJlZCxcbiAgICAgICAgb25FcnJvck1lc3NhZ2VEaXNhcHBlYXI6IFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBibHVyVG9TYXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgYmVmb3JlU2F2ZUNlbGw6IFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBhZnRlclNhdmVDZWxsOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgb25TdGFydEVkaXQ6IFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBub25FZGl0YWJsZVJvd3M6IFByb3BUeXBlcy5mdW5jLFxuICAgICAgICB0aW1lVG9DbG9zZU1lc3NhZ2U6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgIGVycm9yTWVzc2FnZTogUHJvcFR5cGVzLmFueVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgdGhpcy5kb1VwZGF0ZSA9IHRoaXMuZG9VcGRhdGUuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuc3RhcnRFZGl0aW5nID0gdGhpcy5zdGFydEVkaXRpbmcuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuZXNjYXBlRWRpdGluZyA9IHRoaXMuZXNjYXBlRWRpdGluZy5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5jb21wbGV0ZUVkaXRpbmcgPSB0aGlzLmNvbXBsZXRlRWRpdGluZy5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5oYW5kbGVDZWxsVXBkYXRlID0gdGhpcy5oYW5kbGVDZWxsVXBkYXRlLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICByaWR4OiBudWxsLFxuICAgICAgICBjaWR4OiBudWxsLFxuICAgICAgICBtZXNzYWdlOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5jZWxsRWRpdCAmJiBpc1JlbW90ZUNlbGxFZGl0KCkpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5jZWxsRWRpdC5vcHRpb25zLmVycm9yTWVzc2FnZSkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG5leHRQcm9wcy5jZWxsRWRpdC5vcHRpb25zLmVycm9yTWVzc2FnZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVzY2FwZUVkaXRpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUNlbGxVcGRhdGUocm93LCBjb2x1bW4sIG5ld1ZhbHVlKSB7XG4gICAgICBjb25zdCBuZXdWYWx1ZVdpdGhUeXBlID0gZGF0YU9wZXJhdG9yLnR5cGVDb252ZXJ0KGNvbHVtbi50eXBlLCBuZXdWYWx1ZSk7XG4gICAgICBjb25zdCB7IGNlbGxFZGl0IH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgeyBiZWZvcmVTYXZlQ2VsbCB9ID0gY2VsbEVkaXQub3B0aW9ucztcbiAgICAgIGNvbnN0IG9sZFZhbHVlID0gXy5nZXQocm93LCBjb2x1bW4uZGF0YUZpZWxkKTtcbiAgICAgIGNvbnN0IGJlZm9yZVNhdmVDZWxsRG9uZSA9IChyZXN1bHQgPSB0cnVlKSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICB0aGlzLmRvVXBkYXRlKHJvdywgY29sdW1uLCBuZXdWYWx1ZVdpdGhUeXBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVzY2FwZUVkaXRpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24oYmVmb3JlU2F2ZUNlbGwpKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGJlZm9yZVNhdmVDZWxsKFxuICAgICAgICAgIG9sZFZhbHVlLFxuICAgICAgICAgIG5ld1ZhbHVlV2l0aFR5cGUsXG4gICAgICAgICAgcm93LFxuICAgICAgICAgIGNvbHVtbixcbiAgICAgICAgICBiZWZvcmVTYXZlQ2VsbERvbmVcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKF8uaXNPYmplY3QocmVzdWx0KSAmJiByZXN1bHQuYXN5bmMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZG9VcGRhdGUocm93LCBjb2x1bW4sIG5ld1ZhbHVlV2l0aFR5cGUpO1xuICAgIH1cblxuICAgIGRvVXBkYXRlKHJvdywgY29sdW1uLCBuZXdWYWx1ZSkge1xuICAgICAgY29uc3QgeyBrZXlGaWVsZCwgY2VsbEVkaXQsIGRhdGEgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCB7IGFmdGVyU2F2ZUNlbGwgfSA9IGNlbGxFZGl0Lm9wdGlvbnM7XG4gICAgICBjb25zdCByb3dJZCA9IF8uZ2V0KHJvdywga2V5RmllbGQpO1xuICAgICAgY29uc3Qgb2xkVmFsdWUgPSBfLmdldChyb3csIGNvbHVtbi5kYXRhRmllbGQpO1xuICAgICAgaWYgKGlzUmVtb3RlQ2VsbEVkaXQoKSkge1xuICAgICAgICBoYW5kbGVDZWxsQ2hhbmdlKHJvd0lkLCBjb2x1bW4uZGF0YUZpZWxkLCBuZXdWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhT3BlcmF0b3IuZWRpdENlbGwoZGF0YSwga2V5RmllbGQsIHJvd0lkLCBjb2x1bW4uZGF0YUZpZWxkLCBuZXdWYWx1ZSk7XG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24oYWZ0ZXJTYXZlQ2VsbCkpIGFmdGVyU2F2ZUNlbGwob2xkVmFsdWUsIG5ld1ZhbHVlLCByb3csIGNvbHVtbik7XG4gICAgICAgIHRoaXMuY29tcGxldGVFZGl0aW5nKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29tcGxldGVFZGl0aW5nKCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoe1xuICAgICAgICByaWR4OiBudWxsLFxuICAgICAgICBjaWR4OiBudWxsLFxuICAgICAgICBtZXNzYWdlOiBudWxsXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgc3RhcnRFZGl0aW5nKHJpZHgsIGNpZHgpIHtcbiAgICAgIGNvbnN0IGVkaXRpbmcgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHtcbiAgICAgICAgICByaWR4LFxuICAgICAgICAgIGNpZHhcbiAgICAgICAgfSkpO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgeyBzZWxlY3RSb3cgfSA9IHRoaXMucHJvcHM7XG4gICAgICBpZiAoIXNlbGVjdFJvdyB8fCAoc2VsZWN0Um93LmNsaWNrVG9FZGl0IHx8ICFzZWxlY3RSb3cuY2xpY2tUb1NlbGVjdCkpIGVkaXRpbmcoKTtcbiAgICB9XG5cbiAgICBlc2NhcGVFZGl0aW5nKCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoe1xuICAgICAgICByaWR4OiBudWxsLFxuICAgICAgICBjaWR4OiBudWxsXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjZWxsRWRpdDoge1xuICAgICAgICAgIG9wdGlvbnM6IHsgbm9uRWRpdGFibGVSb3dzLCBlcnJvck1lc3NhZ2UsIC4uLm9wdGlvbnNSZXN0IH0sXG4gICAgICAgICAgLi4uY2VsbEVkaXRSZXN0XG4gICAgICAgIH1cbiAgICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICBjb25zdCBuZXdDZWxsRWRpdCA9IHtcbiAgICAgICAgLi4ub3B0aW9uc1Jlc3QsXG4gICAgICAgIC4uLmNlbGxFZGl0UmVzdCxcbiAgICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgICAgbm9uRWRpdGFibGVSb3dzOiBfLmlzRGVmaW5lZChub25FZGl0YWJsZVJvd3MpID8gbm9uRWRpdGFibGVSb3dzKCkgOiBbXSxcbiAgICAgICAgb25TdGFydDogdGhpcy5zdGFydEVkaXRpbmcsXG4gICAgICAgIG9uRXNjYXBlOiB0aGlzLmVzY2FwZUVkaXRpbmcsXG4gICAgICAgIG9uVXBkYXRlOiB0aGlzLmhhbmRsZUNlbGxVcGRhdGVcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxDZWxsRWRpdENvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgICB2YWx1ZT17IHsgLi4ubmV3Q2VsbEVkaXQgfSB9XG4gICAgICAgID5cbiAgICAgICAgICB7IHRoaXMucHJvcHMuY2hpbGRyZW4gfVxuICAgICAgICA8L0NlbGxFZGl0Q29udGV4dC5Qcm92aWRlcj5cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IENlbGxFZGl0UHJvdmlkZXJcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBDb25zdW1lciA9IENlbGxFZGl0Q29udGV4dC5Db25zdW1lcjtcbiIsIi8qIGVzbGludCByZWFjdC9wcm9wLXR5cGVzOiAwICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgREVMQVlfRk9SX0RCQ0xJQ0ssIERCQ0xJQ0tfVE9fQ0VMTF9FRElULCBDTElDS19UT19DRUxMX0VESVQgfSBmcm9tICcuL2NvbnN0JztcbmltcG9ydCB7IENvbnN1bWVyIH0gZnJvbSAnLi9jb250ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQgKENvbXBvbmVudCwgc2VsZWN0Um93RW5hYmxlZCkgPT4ge1xuICBjb25zdCByZW5kZXJXaXRoQ2VsbEVkaXQgPSAocHJvcHMsIGNlbGxFZGl0KSA9PiB7XG4gICAgY29uc3Qga2V5ID0gcHJvcHMudmFsdWU7XG4gICAgY29uc3QgZWRpdGFibGVSb3cgPSAhKFxuICAgICAgY2VsbEVkaXQubm9uRWRpdGFibGVSb3dzLmxlbmd0aCA+IDAgJiZcbiAgICAgIGNlbGxFZGl0Lm5vbkVkaXRhYmxlUm93cy5pbmRleE9mKGtleSkgPiAtMVxuICAgICk7XG5cbiAgICBjb25zdCBhdHRycyA9IHt9O1xuXG4gICAgaWYgKHNlbGVjdFJvd0VuYWJsZWQgJiYgY2VsbEVkaXQubW9kZSA9PT0gREJDTElDS19UT19DRUxMX0VESVQpIHtcbiAgICAgIGF0dHJzLkRFTEFZX0ZPUl9EQkNMSUNLID0gREVMQVlfRk9SX0RCQ0xJQ0s7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb21wb25lbnRcbiAgICAgICAgeyAuLi5wcm9wcyB9XG4gICAgICAgIHsgLi4uYXR0cnMgfVxuICAgICAgICBlZGl0aW5nUm93SWR4PXsgY2VsbEVkaXQucmlkeCB9XG4gICAgICAgIGVkaXRpbmdDb2xJZHg9eyBjZWxsRWRpdC5jaWR4IH1cbiAgICAgICAgZWRpdGFibGU9eyBlZGl0YWJsZVJvdyB9XG4gICAgICAgIG9uU3RhcnQ9eyBjZWxsRWRpdC5vblN0YXJ0IH1cbiAgICAgICAgY2xpY2tUb0VkaXQ9eyBjZWxsRWRpdC5tb2RlID09PSBDTElDS19UT19DRUxMX0VESVQgfVxuICAgICAgICBkYmNsaWNrVG9FZGl0PXsgY2VsbEVkaXQubW9kZSA9PT0gREJDTElDS19UT19DRUxMX0VESVQgfVxuICAgICAgLz5cbiAgICApO1xuICB9O1xuICBmdW5jdGlvbiB3aXRoQ29uc3VtZXIocHJvcHMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPENvbnN1bWVyPlxuICAgICAgICB7IGNlbGxFZGl0ID0+IHJlbmRlcldpdGhDZWxsRWRpdChwcm9wcywgY2VsbEVkaXQpIH1cbiAgICAgIDwvQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxuXG4gIHdpdGhDb25zdW1lci5kaXNwbGF5TmFtZSA9ICdXaXRoQ2VsbEVkaXRpbmdSb3dDb25zdW1lcic7XG4gIHJldHVybiB3aXRoQ29uc3VtZXI7XG59O1xuIiwiLyogZXNsaW50IG5vLXJldHVybi1hc3NpZ246IDAgKi9cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3MgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jbGFzcyBEcm9wRG93bkVkaXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGxldCBvcHRpb25zID0gcHJvcHMub3B0aW9ucztcbiAgICBpZiAocHJvcHMuZ2V0T3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHByb3BzLmdldE9wdGlvbnMoXG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucy5iaW5kKHRoaXMpLFxuICAgICAgICB7XG4gICAgICAgICAgcm93OiBwcm9wcy5yb3csXG4gICAgICAgICAgY29sdW1uOiBwcm9wcy5jb2x1bW5cbiAgICAgICAgfVxuICAgICAgKSB8fCBbXTtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZSA9IHsgb3B0aW9ucyB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBkZWZhdWx0VmFsdWUsIGRpZE1vdW50IH0gPSB0aGlzLnByb3BzO1xuICAgIHRoaXMuc2VsZWN0LnZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgIHRoaXMuc2VsZWN0LmZvY3VzKCk7XG4gICAgaWYgKGRpZE1vdW50KSBkaWRNb3VudCgpO1xuICB9XG5cbiAgc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wdGlvbnMgfSk7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QudmFsdWU7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBkZWZhdWx0VmFsdWUsIGRpZE1vdW50LCBnZXRPcHRpb25zLCBjbGFzc05hbWUsIC4uLnJlc3QgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZWRpdG9yQ2xhc3MgPSBjcygnZm9ybS1jb250cm9sIGVkaXRvciBlZGl0LXNlbGVjdCcsIGNsYXNzTmFtZSk7XG5cbiAgICBjb25zdCBhdHRyID0ge1xuICAgICAgLi4ucmVzdCxcbiAgICAgIGNsYXNzTmFtZTogZWRpdG9yQ2xhc3NcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxzZWxlY3RcbiAgICAgICAgeyAuLi5hdHRyIH1cbiAgICAgICAgcmVmPXsgbm9kZSA9PiB0aGlzLnNlbGVjdCA9IG5vZGUgfVxuICAgICAgICBkZWZhdWx0VmFsdWU9eyBkZWZhdWx0VmFsdWUgfVxuICAgICAgPlxuICAgICAgICB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5vcHRpb25zLm1hcCgoeyBsYWJlbCwgdmFsdWUgfSkgPT4gKFxuICAgICAgICAgICAgPG9wdGlvbiBrZXk9eyB2YWx1ZSB9IHZhbHVlPXsgdmFsdWUgfT57IGxhYmVsIH08L29wdGlvbj5cbiAgICAgICAgICApKVxuICAgICAgICB9XG4gICAgICA8L3NlbGVjdD5cbiAgICApO1xuICB9XG59XG5cbkRyb3BEb3duRWRpdG9yLnByb3BUeXBlcyA9IHtcbiAgcm93OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNvbHVtbjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgUHJvcFR5cGVzLm51bWJlclxuICBdKSxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgb3B0aW9uczogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbiAgICB9KSlcbiAgXSksXG4gIGRpZE1vdW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgZ2V0T3B0aW9uczogUHJvcFR5cGVzLmZ1bmNcbn07XG5Ecm9wRG93bkVkaXRvci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogJycsXG4gIGRlZmF1bHRWYWx1ZTogJycsXG4gIHN0eWxlOiB7fSxcbiAgb3B0aW9uczogW10sXG4gIGRpZE1vdW50OiB1bmRlZmluZWQsXG4gIGdldE9wdGlvbnM6IHVuZGVmaW5lZFxufTtcbmV4cG9ydCBkZWZhdWx0IERyb3BEb3duRWRpdG9yO1xuIiwiLyogZXNsaW50IG5vLXJldHVybi1hc3NpZ246IDAgKi9cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3MgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jbGFzcyBUZXh0QXJlYUVkaXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuaGFuZGxlS2V5RG93biA9IHRoaXMuaGFuZGxlS2V5RG93bi5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBkZWZhdWx0VmFsdWUsIGRpZE1vdW50LCBhdXRvU2VsZWN0VGV4dCB9ID0gdGhpcy5wcm9wcztcbiAgICB0aGlzLnRleHQudmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgdGhpcy50ZXh0LmZvY3VzKCk7XG4gICAgaWYgKGF1dG9TZWxlY3RUZXh0KSB0aGlzLnRleHQuc2VsZWN0KCk7XG4gICAgaWYgKGRpZE1vdW50KSBkaWRNb3VudCgpO1xuICB9XG5cbiAgZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dC52YWx1ZTtcbiAgfVxuXG4gIGhhbmRsZUtleURvd24oZSkge1xuICAgIGlmIChlLmtleUNvZGUgPT09IDEzICYmICFlLnNoaWZ0S2V5KSByZXR1cm47XG4gICAgaWYgKHRoaXMucHJvcHMub25LZXlEb3duKSB7XG4gICAgICB0aGlzLnByb3BzLm9uS2V5RG93bihlKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBkZWZhdWx0VmFsdWUsIGRpZE1vdW50LCBjbGFzc05hbWUsIGF1dG9TZWxlY3RUZXh0LCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGVkaXRvckNsYXNzID0gY3MoJ2Zvcm0tY29udHJvbCBlZGl0b3IgZWRpdC10ZXh0YXJlYScsIGNsYXNzTmFtZSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDx0ZXh0YXJlYVxuICAgICAgICByZWY9eyBub2RlID0+IHRoaXMudGV4dCA9IG5vZGUgfVxuICAgICAgICB0eXBlPVwidGV4dGFyZWFcIlxuICAgICAgICBjbGFzc05hbWU9eyBlZGl0b3JDbGFzcyB9XG4gICAgICAgIHsgLi4ucmVzdCB9XG4gICAgICAgIG9uS2V5RG93bj17IHRoaXMuaGFuZGxlS2V5RG93biB9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cblxuVGV4dEFyZWFFZGl0b3IucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgUHJvcFR5cGVzLm9iamVjdFxuICBdKSxcbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIFByb3BUeXBlcy5udW1iZXJcbiAgXSksXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIGF1dG9TZWxlY3RUZXh0OiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlkTW91bnQ6IFByb3BUeXBlcy5mdW5jXG59O1xuVGV4dEFyZWFFZGl0b3IuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxuICBkZWZhdWx0VmFsdWU6ICcnLFxuICBhdXRvU2VsZWN0VGV4dDogZmFsc2UsXG4gIG9uS2V5RG93bjogdW5kZWZpbmVkLFxuICBkaWRNb3VudDogdW5kZWZpbmVkXG59O1xuZXhwb3J0IGRlZmF1bHQgVGV4dEFyZWFFZGl0b3I7XG4iLCIvKiBlc2xpbnQgbm8tcmV0dXJuLWFzc2lnbjogMCAqL1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNsYXNzIENoZWNrQm94RWRpdG9yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNoZWNrZWQ6IHByb3BzLmRlZmF1bHRWYWx1ZS50b1N0cmluZygpID09PSBwcm9wcy52YWx1ZS5zcGxpdCgnOicpWzBdXG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGRpZE1vdW50IH0gPSB0aGlzLnByb3BzO1xuICAgIHRoaXMuY2hlY2tib3guZm9jdXMoKTtcbiAgICBpZiAoZGlkTW91bnQpIGRpZE1vdW50KCk7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICBjb25zdCBbcG9zaXRpdmUsIG5lZ2F0aXZlXSA9IHRoaXMucHJvcHMudmFsdWUuc3BsaXQoJzonKTtcbiAgICByZXR1cm4gdGhpcy5jaGVja2JveC5jaGVja2VkID8gcG9zaXRpdmUgOiBuZWdhdGl2ZTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHRoaXMucHJvcHMub25DaGFuZ2UoZSk7XG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IGU7XG4gICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoeyBjaGVja2VkOiB0YXJnZXQuY2hlY2tlZCB9KSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBkZWZhdWx0VmFsdWUsIGRpZE1vdW50LCBjbGFzc05hbWUsIC4uLnJlc3QgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZWRpdG9yQ2xhc3MgPSBjcygnZWRpdG9yIGVkaXQtY2hzZWNrYm94IGNoZWNrYm94JywgY2xhc3NOYW1lKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0XG4gICAgICAgIHJlZj17IG5vZGUgPT4gdGhpcy5jaGVja2JveCA9IG5vZGUgfVxuICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICBjbGFzc05hbWU9eyBlZGl0b3JDbGFzcyB9XG4gICAgICAgIHsgLi4ucmVzdCB9XG4gICAgICAgIGNoZWNrZWQ9eyB0aGlzLnN0YXRlLmNoZWNrZWQgfVxuICAgICAgICBvbkNoYW5nZT17IHRoaXMuaGFuZGxlQ2hhbmdlIH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuXG5DaGVja0JveEVkaXRvci5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMub2JqZWN0XG4gIF0pLFxuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGRpZE1vdW50OiBQcm9wVHlwZXMuZnVuY1xufTtcbkNoZWNrQm94RWRpdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiAnJyxcbiAgdmFsdWU6ICdvbjpvZmYnLFxuICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICBvbkNoYW5nZTogdW5kZWZpbmVkLFxuICBkaWRNb3VudDogdW5kZWZpbmVkXG59O1xuZXhwb3J0IGRlZmF1bHQgQ2hlY2tCb3hFZGl0b3I7XG4iLCIvKiBlc2xpbnQgbm8tcmV0dXJuLWFzc2lnbjogMCAqL1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNsYXNzIERhdGVFZGl0b3IgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGRlZmF1bHRWYWx1ZSwgZGlkTW91bnQgfSA9IHRoaXMucHJvcHM7XG4gICAgdGhpcy5kYXRlLnZhbHVlQXNEYXRlID0gbmV3IERhdGUoZGVmYXVsdFZhbHVlKTtcbiAgICB0aGlzLmRhdGUuZm9jdXMoKTtcbiAgICBpZiAoZGlkTW91bnQpIGRpZE1vdW50KCk7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRlLnZhbHVlO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGVmYXVsdFZhbHVlLCBkaWRNb3VudCwgY2xhc3NOYW1lLCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGVkaXRvckNsYXNzID0gY3MoJ2Zvcm0tY29udHJvbCBlZGl0b3IgZWRpdC1kYXRlJywgY2xhc3NOYW1lKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0XG4gICAgICAgIHJlZj17IG5vZGUgPT4gdGhpcy5kYXRlID0gbm9kZSB9XG4gICAgICAgIHR5cGU9XCJkYXRlXCJcbiAgICAgICAgY2xhc3NOYW1lPXsgZWRpdG9yQ2xhc3MgfVxuICAgICAgICB7IC4uLnJlc3QgfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbkRhdGVFZGl0b3IucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgUHJvcFR5cGVzLm9iamVjdFxuICBdKSxcbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBkaWRNb3VudDogUHJvcFR5cGVzLmZ1bmNcbn07XG5EYXRlRWRpdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiAnJyxcbiAgZGVmYXVsdFZhbHVlOiAnJyxcbiAgZGlkTW91bnQ6IHVuZGVmaW5lZFxufTtcbmV4cG9ydCBkZWZhdWx0IERhdGVFZGl0b3I7XG4iLCIvKiBlc2xpbnQgbm8tcmV0dXJuLWFzc2lnbjogMCAqL1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNsYXNzIFRleHRFZGl0b3IgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGRlZmF1bHRWYWx1ZSwgZGlkTW91bnQsIGF1dG9TZWxlY3RUZXh0IH0gPSB0aGlzLnByb3BzO1xuICAgIHRoaXMudGV4dC52YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICB0aGlzLnRleHQuZm9jdXMoKTtcbiAgICBpZiAoYXV0b1NlbGVjdFRleHQpIHRoaXMudGV4dC5zZWxlY3QoKTtcbiAgICBpZiAoZGlkTW91bnQpIGRpZE1vdW50KCk7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0LnZhbHVlO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGVmYXVsdFZhbHVlLCBkaWRNb3VudCwgY2xhc3NOYW1lLCBhdXRvU2VsZWN0VGV4dCwgLi4ucmVzdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBlZGl0b3JDbGFzcyA9IGNzKCdmb3JtLWNvbnRyb2wgZWRpdG9yIGVkaXQtdGV4dCcsIGNsYXNzTmFtZSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxpbnB1dFxuICAgICAgICByZWY9eyBub2RlID0+IHRoaXMudGV4dCA9IG5vZGUgfVxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIGNsYXNzTmFtZT17IGVkaXRvckNsYXNzIH1cbiAgICAgICAgeyAuLi5yZXN0IH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuXG5UZXh0RWRpdG9yLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIFByb3BUeXBlcy5vYmplY3RcbiAgXSksXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMubnVtYmVyXG4gIF0pLFxuICBhdXRvU2VsZWN0VGV4dDogUHJvcFR5cGVzLmJvb2wsXG4gIGRpZE1vdW50OiBQcm9wVHlwZXMuZnVuY1xufTtcblRleHRFZGl0b3IuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6IG51bGwsXG4gIGRlZmF1bHRWYWx1ZTogJycsXG4gIGF1dG9TZWxlY3RUZXh0OiBmYWxzZSxcbiAgZGlkTW91bnQ6IHVuZGVmaW5lZFxufTtcbmV4cG9ydCBkZWZhdWx0IFRleHRFZGl0b3I7XG4iLCIvKiBlc2xpbnQgbm8tcmV0dXJuLWFzc2lnbjogMCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNvbnN0IEVkaXRvckluZGljYXRvciA9ICh7IGludmFsaWRNZXNzYWdlIH0pID0+XG4gIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFsZXJ0IGFsZXJ0LWRhbmdlciBpblwiIHJvbGU9XCJhbGVydFwiPlxuICAgICAgPHN0cm9uZz57IGludmFsaWRNZXNzYWdlIH08L3N0cm9uZz5cbiAgICA8L2Rpdj5cbiAgKTtcblxuRWRpdG9ySW5kaWNhdG9yLnByb3BUeXBlcyA9IHtcbiAgaW52YWxpZE1lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbkVkaXRvckluZGljYXRvci5kZWZhdWx0UHJvcHMgPSB7XG4gIGludmFsaWRNZXNzYWdlOiBudWxsXG59O1xuZXhwb3J0IGRlZmF1bHQgRWRpdG9ySW5kaWNhdG9yO1xuIiwiLyogZXNsaW50IHJlYWN0L3Byb3AtdHlwZXM6IDAgKi9cbi8qIGVzbGludCBuby1yZXR1cm4tYXNzaWduOiAwICovXG4vKiBlc2xpbnQgY2xhc3MtbWV0aG9kcy11c2UtdGhpczogMCAqL1xuLyogZXNsaW50IGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLWVsZW1lbnQtaW50ZXJhY3Rpb25zOiAwICovXG4vKiBlc2xpbnQgY2FtZWxjYXNlOiAwICovXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IERyb3Bkb3duRWRpdG9yIGZyb20gJy4vZHJvcGRvd24tZWRpdG9yJztcbmltcG9ydCBUZXh0QXJlYUVkaXRvciBmcm9tICcuL3RleHRhcmVhLWVkaXRvcic7XG5pbXBvcnQgQ2hlY2tCb3hFZGl0b3IgZnJvbSAnLi9jaGVja2JveC1lZGl0b3InO1xuaW1wb3J0IERhdGVFZGl0b3IgZnJvbSAnLi9kYXRlLWVkaXRvcic7XG5pbXBvcnQgVGV4dEVkaXRvciBmcm9tICcuL3RleHQtZWRpdG9yJztcbmltcG9ydCBFZGl0b3JJbmRpY2F0b3IgZnJvbSAnLi9lZGl0b3ItaW5kaWNhdG9yJztcbmltcG9ydCB7IFRJTUVfVE9fQ0xPU0VfTUVTU0FHRSwgRURJVFRZUEUgfSBmcm9tICcuL2NvbnN0JztcblxuZXhwb3J0IGRlZmF1bHQgKF8sIG9uU3RhcnRFZGl0KSA9PlxuICBjbGFzcyBFZGl0aW5nQ2VsbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgIHJvdzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgICAgcm93SW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICAgIGNvbHVtbjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgICAgY29sdW1uSW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICAgIG9uVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgb25Fc2NhcGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICB0aW1lVG9DbG9zZU1lc3NhZ2U6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICBhdXRvU2VsZWN0VGV4dDogUHJvcFR5cGVzLmJvb2wsXG4gICAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICB0aW1lVG9DbG9zZU1lc3NhZ2U6IFRJTUVfVE9fQ0xPU0VfTUVTU0FHRSxcbiAgICAgIGNsYXNzTmFtZTogbnVsbCxcbiAgICAgIGF1dG9TZWxlY3RUZXh0OiBmYWxzZSxcbiAgICAgIHN0eWxlOiB7fVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICBzdXBlcihwcm9wcyk7XG4gICAgICB0aGlzLmluZGljYXRvclRpbWVyID0gbnVsbDtcbiAgICAgIHRoaXMuY2xlYXJUaW1lciA9IHRoaXMuY2xlYXJUaW1lci5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5oYW5kbGVCbHVyID0gdGhpcy5oYW5kbGVCbHVyLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmhhbmRsZUNsaWNrID0gdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5oYW5kbGVLZXlEb3duID0gdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmJlZm9yZUNvbXBsZXRlID0gdGhpcy5iZWZvcmVDb21wbGV0ZS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5hc3luY2JlZm9yZUNvbXBldGUgPSB0aGlzLmFzeW5jYmVmb3JlQ29tcGV0ZS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5kaXNwbGF5RXJyb3JNZXNzYWdlID0gdGhpcy5kaXNwbGF5RXJyb3JNZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICBpbnZhbGlkTWVzc2FnZTogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xuICAgIH1cblxuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHsgbWVzc2FnZSB9KSB7XG4gICAgICBpZiAoXy5pc0RlZmluZWQobWVzc2FnZSkpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVUaW1lcigpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7XG4gICAgICAgICAgaW52YWxpZE1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyVGltZXIoKSB7XG4gICAgICBpZiAodGhpcy5pbmRpY2F0b3JUaW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5pbmRpY2F0b3JUaW1lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlVGltZXIoKSB7XG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICAgIGNvbnN0IHsgdGltZVRvQ2xvc2VNZXNzYWdlLCBvbkVycm9yTWVzc2FnZURpc2FwcGVhciB9ID0gdGhpcy5wcm9wcztcbiAgICAgIHRoaXMuaW5kaWNhdG9yVGltZXIgPSBfLnNsZWVwKCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoe1xuICAgICAgICAgIGludmFsaWRNZXNzYWdlOiBudWxsXG4gICAgICAgIH0pKTtcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihvbkVycm9yTWVzc2FnZURpc2FwcGVhcikpIG9uRXJyb3JNZXNzYWdlRGlzYXBwZWFyKCk7XG4gICAgICB9LCB0aW1lVG9DbG9zZU1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGRpc3BsYXlFcnJvck1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoe1xuICAgICAgICBpbnZhbGlkTWVzc2FnZTogbWVzc2FnZVxuICAgICAgfSkpO1xuICAgICAgdGhpcy5jcmVhdGVUaW1lcigpO1xuICAgIH1cblxuICAgIGFzeW5jYmVmb3JlQ29tcGV0ZShuZXdWYWx1ZSkge1xuICAgICAgcmV0dXJuIChyZXN1bHQgPSB7IHZhbGlkOiB0cnVlIH0pID0+IHtcbiAgICAgICAgY29uc3QgeyB2YWxpZCwgbWVzc2FnZSB9ID0gcmVzdWx0O1xuICAgICAgICBjb25zdCB7IG9uVXBkYXRlLCByb3csIGNvbHVtbiB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKCF2YWxpZCkge1xuICAgICAgICAgIHRoaXMuZGlzcGxheUVycm9yTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb25VcGRhdGUocm93LCBjb2x1bW4sIG5ld1ZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgYmVmb3JlQ29tcGxldGUobmV3VmFsdWUpIHtcbiAgICAgIGNvbnN0IHsgb25VcGRhdGUsIHJvdywgY29sdW1uIH0gPSB0aGlzLnByb3BzO1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihjb2x1bW4udmFsaWRhdG9yKSkge1xuICAgICAgICBjb25zdCB2YWxpZGF0ZUZvcm0gPSBjb2x1bW4udmFsaWRhdG9yKFxuICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgdGhpcy5hc3luY2JlZm9yZUNvbXBldGUobmV3VmFsdWUpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChfLmlzT2JqZWN0KHZhbGlkYXRlRm9ybSkpIHtcbiAgICAgICAgICBpZiAodmFsaWRhdGVGb3JtLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIGlmICghdmFsaWRhdGVGb3JtLnZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlFcnJvck1lc3NhZ2UodmFsaWRhdGVGb3JtLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb25VcGRhdGUocm93LCBjb2x1bW4sIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICBoYW5kbGVCbHVyKCkge1xuICAgICAgY29uc3QgeyBvbkVzY2FwZSwgYmx1clRvU2F2ZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGlmIChibHVyVG9TYXZlKSB7XG4gICAgICAgIHRoaXMuYmVmb3JlQ29tcGxldGUodGhpcy5lZGl0b3IuZ2V0VmFsdWUoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkVzY2FwZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUtleURvd24oZSkge1xuICAgICAgY29uc3QgeyBvbkVzY2FwZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IDI3KSB7IC8vIEVTQ1xuICAgICAgICBvbkVzY2FwZSgpO1xuICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDEzKSB7IC8vIEVOVEVSXG4gICAgICAgIHRoaXMuYmVmb3JlQ29tcGxldGUodGhpcy5lZGl0b3IuZ2V0VmFsdWUoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2soZSkge1xuICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgIT09ICdURCcpIHtcbiAgICAgICAgLy8gVG8gYXZvaWQgdGhlIHJvdyBzZWxlY3Rpb24gZXZlbnQgYmUgdHJpZ2dlcmVkLFxuICAgICAgICAvLyBXaGVuIHVzZXIgZGVmaW5lIHNlbGVjdFJvdy5jbGlja1RvU2VsZWN0IGFuZCBzZWxlY3RSb3cuY2xpY2tUb0VkaXRcbiAgICAgICAgLy8gV2Ugc2hvdWxkbid0IHRyaWdnZXIgc2VsZWN0aW9uIGV2ZW50IGV2ZW4gaWYgdXNlciBjbGljayBvbiB0aGUgY2VsbCBlZGl0b3IoaW5wdXQpXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgbGV0IGVkaXRvcjtcbiAgICAgIGNvbnN0IHsgcm93LCBjb2x1bW4sIGNsYXNzTmFtZSwgc3R5bGUsIHJvd0luZGV4LCBjb2x1bW5JbmRleCwgYXV0b1NlbGVjdFRleHQgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCB7IGRhdGFGaWVsZCB9ID0gY29sdW1uO1xuXG4gICAgICBjb25zdCB2YWx1ZSA9IF8uZ2V0KHJvdywgZGF0YUZpZWxkKTtcbiAgICAgIGNvbnN0IGhhc0Vycm9yID0gXy5pc0RlZmluZWQodGhpcy5zdGF0ZS5pbnZhbGlkTWVzc2FnZSk7XG5cbiAgICAgIGxldCBjdXN0b21FZGl0b3JDbGFzcyA9IGNvbHVtbi5lZGl0b3JDbGFzc2VzIHx8ICcnO1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihjb2x1bW4uZWRpdG9yQ2xhc3NlcykpIHtcbiAgICAgICAgY3VzdG9tRWRpdG9yQ2xhc3MgPSBjb2x1bW4uZWRpdG9yQ2xhc3Nlcyh2YWx1ZSwgcm93LCByb3dJbmRleCwgY29sdW1uSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBsZXQgZWRpdG9yU3R5bGUgPSBjb2x1bW4uZWRpdG9yU3R5bGUgfHwge307XG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKGNvbHVtbi5lZGl0b3JTdHlsZSkpIHtcbiAgICAgICAgZWRpdG9yU3R5bGUgPSBjb2x1bW4uZWRpdG9yU3R5bGUodmFsdWUsIHJvdywgcm93SW5kZXgsIGNvbHVtbkluZGV4KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZWRpdG9yQ2xhc3MgPSBjcyh7XG4gICAgICAgIGFuaW1hdGVkOiBoYXNFcnJvcixcbiAgICAgICAgc2hha2U6IGhhc0Vycm9yXG4gICAgICB9LCBjdXN0b21FZGl0b3JDbGFzcyk7XG5cbiAgICAgIGxldCBlZGl0b3JQcm9wcyA9IHtcbiAgICAgICAgcmVmOiBub2RlID0+IHRoaXMuZWRpdG9yID0gbm9kZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB2YWx1ZSxcbiAgICAgICAgc3R5bGU6IGVkaXRvclN0eWxlLFxuICAgICAgICBjbGFzc05hbWU6IGVkaXRvckNsYXNzLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXJcbiAgICAgIH07XG5cbiAgICAgIGlmIChvblN0YXJ0RWRpdCkge1xuICAgICAgICBlZGl0b3JQcm9wcy5kaWRNb3VudCA9ICgpID0+IG9uU3RhcnRFZGl0KHJvdywgY29sdW1uLCByb3dJbmRleCwgY29sdW1uSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpc0RlZmF1bHRFZGl0b3JEZWZpbmVkID0gXy5pc09iamVjdChjb2x1bW4uZWRpdG9yKTtcblxuICAgICAgaWYgKGlzRGVmYXVsdEVkaXRvckRlZmluZWQpIHtcbiAgICAgICAgZWRpdG9yUHJvcHMgPSB7XG4gICAgICAgICAgLi4uZWRpdG9yUHJvcHMsXG4gICAgICAgICAgLi4uY29sdW1uLmVkaXRvclxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24oY29sdW1uLmVkaXRvclJlbmRlcmVyKSkge1xuICAgICAgICBlZGl0b3JQcm9wcyA9IHtcbiAgICAgICAgICAuLi5lZGl0b3JQcm9wcyxcbiAgICAgICAgICBvblVwZGF0ZTogdGhpcy5iZWZvcmVDb21wbGV0ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKGNvbHVtbi5lZGl0b3JSZW5kZXJlcikpIHtcbiAgICAgICAgZWRpdG9yID0gY29sdW1uLmVkaXRvclJlbmRlcmVyKGVkaXRvclByb3BzLCB2YWx1ZSwgcm93LCBjb2x1bW4sIHJvd0luZGV4LCBjb2x1bW5JbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmYXVsdEVkaXRvckRlZmluZWQgJiYgY29sdW1uLmVkaXRvci50eXBlID09PSBFRElUVFlQRS5TRUxFQ1QpIHtcbiAgICAgICAgZWRpdG9yID0gPERyb3Bkb3duRWRpdG9yIHsgLi4uZWRpdG9yUHJvcHMgfSByb3c9eyByb3cgfSBjb2x1bW49eyBjb2x1bW4gfSAvPjtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWZhdWx0RWRpdG9yRGVmaW5lZCAmJiBjb2x1bW4uZWRpdG9yLnR5cGUgPT09IEVESVRUWVBFLlRFWFRBUkVBKSB7XG4gICAgICAgIGVkaXRvciA9IDxUZXh0QXJlYUVkaXRvciB7IC4uLmVkaXRvclByb3BzIH0gYXV0b1NlbGVjdFRleHQ9eyBhdXRvU2VsZWN0VGV4dCB9IC8+O1xuICAgICAgfSBlbHNlIGlmIChpc0RlZmF1bHRFZGl0b3JEZWZpbmVkICYmIGNvbHVtbi5lZGl0b3IudHlwZSA9PT0gRURJVFRZUEUuQ0hFQ0tCT1gpIHtcbiAgICAgICAgZWRpdG9yID0gPENoZWNrQm94RWRpdG9yIHsgLi4uZWRpdG9yUHJvcHMgfSAvPjtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWZhdWx0RWRpdG9yRGVmaW5lZCAmJiBjb2x1bW4uZWRpdG9yLnR5cGUgPT09IEVESVRUWVBFLkRBVEUpIHtcbiAgICAgICAgZWRpdG9yID0gPERhdGVFZGl0b3IgeyAuLi5lZGl0b3JQcm9wcyB9IC8+O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWRpdG9yID0gPFRleHRFZGl0b3IgeyAuLi5lZGl0b3JQcm9wcyB9IGF1dG9TZWxlY3RUZXh0PXsgYXV0b1NlbGVjdFRleHQgfSAvPjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPHRkXG4gICAgICAgICAgY2xhc3NOYW1lPXsgY3MoJ3JlYWN0LWJvb3RzdHJhcC10YWJsZS1lZGl0aW5nLWNlbGwnLCBjbGFzc05hbWUpIH1cbiAgICAgICAgICBzdHlsZT17IHN0eWxlIH1cbiAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5oYW5kbGVDbGljayB9XG4gICAgICAgID5cbiAgICAgICAgICB7IGVkaXRvciB9XG4gICAgICAgICAgeyBoYXNFcnJvciA/IDxFZGl0b3JJbmRpY2F0b3IgaW52YWxpZE1lc3NhZ2U9eyB0aGlzLnN0YXRlLmludmFsaWRNZXNzYWdlIH0gLz4gOiBudWxsIH1cbiAgICAgICAgPC90ZD5cbiAgICAgICk7XG4gICAgfVxuICB9O1xuIiwiLyogZXNsaW50IHJlYWN0L3Byb3AtdHlwZXM6IDAgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb25zdW1lciB9IGZyb20gJy4vY29udGV4dCc7XG5pbXBvcnQgY3JlYXRlRWRpdGluZ0NlbGwgZnJvbSAnLi9lZGl0aW5nLWNlbGwnO1xuXG5leHBvcnQgZGVmYXVsdCAoXywgb25TdGFydEVkaXQpID0+IHtcbiAgY29uc3QgRWRpdGluZ0NlbGwgPSBjcmVhdGVFZGl0aW5nQ2VsbChfLCBvblN0YXJ0RWRpdCk7XG4gIGNvbnN0IHJlbmRlcldpdGhFZGl0aW5nQ2VsbCA9IChwcm9wcywgY2VsbEVkaXQpID0+IHtcbiAgICBjb25zdCBjb250ZW50ID0gXy5nZXQocHJvcHMucm93LCBwcm9wcy5jb2x1bW4uZGF0YUZpZWxkKTtcbiAgICBsZXQgZWRpdENlbGxzdHlsZSA9IHByb3BzLmNvbHVtbi5lZGl0Q2VsbFN0eWxlIHx8IHt9O1xuICAgIGxldCBlZGl0Q2VsbGNsYXNzZXMgPSBwcm9wcy5jb2x1bW4uZWRpdENlbGxDbGFzc2VzO1xuICAgIGlmIChfLmlzRnVuY3Rpb24ocHJvcHMuY29sdW1uLmVkaXRDZWxsU3R5bGUpKSB7XG4gICAgICBlZGl0Q2VsbHN0eWxlID0gcHJvcHMuY29sdW1uLmVkaXRDZWxsU3R5bGUoXG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIHByb3BzLnJvdyxcbiAgICAgICAgcHJvcHMucm93SW5kZXgsXG4gICAgICAgIHByb3BzLmNvbHVtbkluZGV4XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHByb3BzLmNvbHVtbi5lZGl0Q2VsbENsYXNzZXMpKSB7XG4gICAgICBlZGl0Q2VsbGNsYXNzZXMgPSBwcm9wcy5jb2x1bW4uZWRpdENlbGxDbGFzc2VzKFxuICAgICAgICBjb250ZW50LFxuICAgICAgICBwcm9wcy5yb3csXG4gICAgICAgIHByb3BzLnJvd0luZGV4LFxuICAgICAgICBwcm9wcy5jb2x1bW5JbmRleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxFZGl0aW5nQ2VsbFxuICAgICAgICB7IC4uLnByb3BzIH1cbiAgICAgICAgY2xhc3NOYW1lPXsgZWRpdENlbGxjbGFzc2VzIH1cbiAgICAgICAgc3R5bGU9eyBlZGl0Q2VsbHN0eWxlIH1cbiAgICAgICAgeyAuLi5jZWxsRWRpdCB9XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIHByb3BzID0+IChcbiAgICA8Q29uc3VtZXI+XG4gICAgICB7IGNlbGxFZGl0ID0+IHJlbmRlcldpdGhFZGl0aW5nQ2VsbChwcm9wcywgY2VsbEVkaXQpIH1cbiAgICA8L0NvbnN1bWVyPlxuICApO1xufTtcbiIsImltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJy4vc3JjL2NvbnRleHQnO1xuaW1wb3J0IHdpdGhSb3dMZXZlbENlbGxFZGl0IGZyb20gJy4vc3JjL3Jvdy1jb25zdW1lcic7XG5pbXBvcnQgY3JlYXRlRWRpdGluZ0NlbGwgZnJvbSAnLi9zcmMvZWRpdGluZy1jZWxsLWNvbnN1bWVyJztcbmltcG9ydCB7XG4gIEVESVRUWVBFLFxuICBEQkNMSUNLX1RPX0NFTExfRURJVCxcbiAgREVMQVlfRk9SX0RCQ0xJQ0tcbn0gZnJvbSAnLi9zcmMvY29uc3QnO1xuXG5leHBvcnQgZGVmYXVsdCAob3B0aW9ucyA9IHt9KSA9PiAoe1xuICBjcmVhdGVDb250ZXh0LFxuICBjcmVhdGVFZGl0aW5nQ2VsbCxcbiAgd2l0aFJvd0xldmVsQ2VsbEVkaXQsXG4gIERCQ0xJQ0tfVE9fQ0VMTF9FRElULFxuICBERUxBWV9GT1JfREJDTElDSyxcbiAgb3B0aW9uc1xufSk7XG5cbmV4cG9ydCBjb25zdCBUeXBlID0gRURJVFRZUEU7XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX183ODdfXyIsImhhc093biIsImhhc093blByb3BlcnR5IiwiY2xhc3NOYW1lcyIsImNsYXNzZXMiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJnIiwiYXJnVHlwZSIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJpbm5lciIsImFwcGx5IiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJpbmNsdWRlcyIsImtleSIsImNhbGwiLCJqb2luIiwiZGVmYXVsdCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZXJyIiwiRXJyb3IiLCJuYW1lIiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYmlnaW50IiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJvYmplY3QiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsIkNMSUNLX1RPX0NFTExfRURJVCIsIkRCQ0xJQ0tfVE9fQ0VMTF9FRElUIiwiRURJVFRZUEUiLCJURVhUIiwiU0VMRUNUIiwiVEVYVEFSRUEiLCJDSEVDS0JPWCIsIkRBVEUiLCJDZWxsRWRpdENvbnRleHQiLCJSZWFjdCIsIl8iLCJkYXRhT3BlcmF0b3IiLCJpc1JlbW90ZUNlbGxFZGl0IiwiaGFuZGxlQ2VsbENoYW5nZSIsIkNlbGxFZGl0UHJvdmlkZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiX2luaGVyaXRzIiwiX3N1cGVyIiwiX2NyZWF0ZVN1cGVyIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJkb1VwZGF0ZSIsImJpbmQiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic3RhcnRFZGl0aW5nIiwiZXNjYXBlRWRpdGluZyIsImNvbXBsZXRlRWRpdGluZyIsImhhbmRsZUNlbGxVcGRhdGUiLCJzdGF0ZSIsInJpZHgiLCJjaWR4IiwibWVzc2FnZSIsIm5leHRQcm9wcyIsImNlbGxFZGl0Iiwib3B0aW9ucyIsImVycm9yTWVzc2FnZSIsInRoaXMiLCJzZXRTdGF0ZSIsInJvdyIsImNvbHVtbiIsIm5ld1ZhbHVlIiwiX3RoaXMyIiwibmV3VmFsdWVXaXRoVHlwZSIsInR5cGVDb252ZXJ0IiwidHlwZSIsImJlZm9yZVNhdmVDZWxsIiwib2xkVmFsdWUiLCJkYXRhRmllbGQiLCJpc0Z1bmN0aW9uIiwicmVzdWx0IiwiaXNPYmplY3QiLCJhc3luYyIsIl90aGlzJHByb3BzIiwia2V5RmllbGQiLCJkYXRhIiwiYWZ0ZXJTYXZlQ2VsbCIsInJvd0lkIiwiZWRpdENlbGwiLCJfdGhpczMiLCJzZWxlY3RSb3ciLCJjbGlja1RvRWRpdCIsImNsaWNrVG9TZWxlY3QiLCJfdGhpcyRwcm9wcyRjZWxsRWRpdCIsIl90aGlzJHByb3BzJGNlbGxFZGl0JCIsIm5vbkVkaXRhYmxlUm93cyIsIm9wdGlvbnNSZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2V4Y2x1ZGVkIiwiY2VsbEVkaXRSZXN0IiwiX2V4Y2x1ZGVkMiIsIm5ld0NlbGxFZGl0IiwiX29iamVjdFNwcmVhZCIsImlzRGVmaW5lZCIsIm9uU3RhcnQiLCJvbkVzY2FwZSIsIm9uVXBkYXRlIiwiUHJvdmlkZXIiLCJjaGlsZHJlbiIsIl9kZWZpbmVQcm9wZXJ0eSIsIm1vZGUiLCJvbkVycm9yTWVzc2FnZURpc2FwcGVhciIsImJsdXJUb1NhdmUiLCJvblN0YXJ0RWRpdCIsInRpbWVUb0Nsb3NlTWVzc2FnZSIsIkNvbnN1bWVyIiwiQ29tcG9uZW50Iiwic2VsZWN0Um93RW5hYmxlZCIsIndpdGhDb25zdW1lciIsImVkaXRhYmxlUm93IiwiaW5kZXhPZiIsImF0dHJzIiwiREVMQVlfRk9SX0RCQ0xJQ0siLCJfZXh0ZW5kcyIsImVkaXRpbmdSb3dJZHgiLCJlZGl0aW5nQ29sSWR4IiwiZWRpdGFibGUiLCJkYmNsaWNrVG9FZGl0IiwicmVuZGVyV2l0aENlbGxFZGl0IiwiZGlzcGxheU5hbWUiLCJEcm9wRG93bkVkaXRvciIsIl9Db21wb25lbnQiLCJnZXRPcHRpb25zIiwic2V0T3B0aW9ucyIsImRlZmF1bHRWYWx1ZSIsImRpZE1vdW50Iiwic2VsZWN0IiwiZm9jdXMiLCJfdGhpcyRwcm9wczIiLCJjbGFzc05hbWUiLCJyZXN0IiwiZWRpdG9yQ2xhc3MiLCJjcyIsImF0dHIiLCJyZWYiLCJtYXAiLCJfcmVmIiwibGFiZWwiLCJwcm9wVHlwZXMiLCJzdHlsZSIsImRlZmF1bHRQcm9wcyIsIlRleHRBcmVhRWRpdG9yIiwiaGFuZGxlS2V5RG93biIsImF1dG9TZWxlY3RUZXh0IiwidGV4dCIsImUiLCJrZXlDb2RlIiwic2hpZnRLZXkiLCJvbktleURvd24iLCJDaGVja0JveEVkaXRvciIsImNoZWNrZWQiLCJzcGxpdCIsImhhbmRsZUNoYW5nZSIsImNoZWNrYm94IiwiX3RoaXMkcHJvcHMkdmFsdWUkc3BsMiIsIl9zbGljZWRUb0FycmF5IiwicG9zaXRpdmUiLCJuZWdhdGl2ZSIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwiRGF0ZUVkaXRvciIsImRhdGUiLCJ2YWx1ZUFzRGF0ZSIsIkRhdGUiLCJUZXh0RWRpdG9yIiwiRWRpdG9ySW5kaWNhdG9yIiwiaW52YWxpZE1lc3NhZ2UiLCJyb2xlIiwiX2NsYXNzIiwiRWRpdGluZ0NlbGwiLCJpbmRpY2F0b3JUaW1lciIsImNsZWFyVGltZXIiLCJoYW5kbGVCbHVyIiwiaGFuZGxlQ2xpY2siLCJiZWZvcmVDb21wbGV0ZSIsImFzeW5jYmVmb3JlQ29tcGV0ZSIsImRpc3BsYXlFcnJvck1lc3NhZ2UiLCJjcmVhdGVUaW1lciIsImNsZWFyVGltZW91dCIsInNsZWVwIiwidmFsaWQiLCJfdGhpczMkcHJvcHMiLCJ2YWxpZGF0b3IiLCJ2YWxpZGF0ZUZvcm0iLCJfdGhpcyRwcm9wczMiLCJlZGl0b3IiLCJnZXRWYWx1ZSIsInRhZ05hbWUiLCJzdG9wUHJvcGFnYXRpb24iLCJfdGhpczQiLCJfdGhpcyRwcm9wczQiLCJyb3dJbmRleCIsImNvbHVtbkluZGV4IiwiaGFzRXJyb3IiLCJjdXN0b21FZGl0b3JDbGFzcyIsImVkaXRvckNsYXNzZXMiLCJlZGl0b3JTdHlsZSIsImVkaXRvclByb3BzIiwiYW5pbWF0ZWQiLCJzaGFrZSIsIm9uQmx1ciIsImlzRGVmYXVsdEVkaXRvckRlZmluZWQiLCJlZGl0b3JSZW5kZXJlciIsIkRyb3Bkb3duRWRpdG9yIiwib25DbGljayIsImNyZWF0ZUVkaXRpbmdDZWxsIiwiY29udGVudCIsImVkaXRDZWxsc3R5bGUiLCJlZGl0Q2VsbFN0eWxlIiwiZWRpdENlbGxjbGFzc2VzIiwiZWRpdENlbGxDbGFzc2VzIiwicmVuZGVyV2l0aEVkaXRpbmdDZWxsIiwiY3JlYXRlQ29udGV4dCIsIndpdGhSb3dMZXZlbENlbGxFZGl0IiwiVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=